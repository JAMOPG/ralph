{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Ralph is a command-line tool to fetch, extract, convert and push your tracking logs ( aka learning events) from various storage backends to your LRS or any other compatible storage or database backend. Key concepts \u00b6 Ralph has been designed to batch process your logs using base commands and UNIX standard streams ( stdin , stdout ) to connect them in a pipeline that fits your needs. A base example pipeline may be: $ ralph fetch --backend swift my_archive.gzip | \\ gunzip | \\ ralph push --backend es In this small pipeline, we stream my_archive.gzip content from a Swift container to the standard output (using the fetch command), uncompress the content (using the gunzip command), and bulk insert logs in an ElasticSearch index (using the push command). As UNIX is beautiful, Ralph offers many powerful possibilities by combining its commands with other standard commands or command line tools. Quick start guide \u00b6 Ralph is distributed as a python package and a Docker image. If you choose to install ralph in your native environment (without using Docker), please make sure that Python 3.9 is installed (and your default python distribution). Ralph package can be installed from PyPI using the pip tool: # Create a new virtualenv (optional) $ python3.9 -m venv venv $ source venv/bin/activate # Install the package (in a virtualenv) ( venv ) $ pip install ralph-malph # Test the ralph command (it should be in your PATH) ( venv ) $ ralph --help Alternatively, Docker users can pull the latest ralph image and start playing with it: # Pull latest docker image and get usage $ docker run --rm -i fundocker/ralph:latest ralph --help # Pro tip: define an alias to ease your life $ alias ralph = \"docker run --rm -i fundocker/ralph:latest ralph\" Now that ralph can be run from your system, we invite you to explore available commands . Contributing \u00b6 This project is intended to be community-driven, so please, do not hesitate to get in touch if you have any questions related to our implementation or design decisions. We try to raise our code quality standards and expect contributors to follow the recommendations from our handbook . License \u00b6 This work is released under the MIT License (see LICENSE ).","title":"Introduction"},{"location":"#introduction","text":"Ralph is a command-line tool to fetch, extract, convert and push your tracking logs ( aka learning events) from various storage backends to your LRS or any other compatible storage or database backend.","title":"Introduction"},{"location":"#key_concepts","text":"Ralph has been designed to batch process your logs using base commands and UNIX standard streams ( stdin , stdout ) to connect them in a pipeline that fits your needs. A base example pipeline may be: $ ralph fetch --backend swift my_archive.gzip | \\ gunzip | \\ ralph push --backend es In this small pipeline, we stream my_archive.gzip content from a Swift container to the standard output (using the fetch command), uncompress the content (using the gunzip command), and bulk insert logs in an ElasticSearch index (using the push command). As UNIX is beautiful, Ralph offers many powerful possibilities by combining its commands with other standard commands or command line tools.","title":"Key concepts"},{"location":"#quick_start_guide","text":"Ralph is distributed as a python package and a Docker image. If you choose to install ralph in your native environment (without using Docker), please make sure that Python 3.9 is installed (and your default python distribution). Ralph package can be installed from PyPI using the pip tool: # Create a new virtualenv (optional) $ python3.9 -m venv venv $ source venv/bin/activate # Install the package (in a virtualenv) ( venv ) $ pip install ralph-malph # Test the ralph command (it should be in your PATH) ( venv ) $ ralph --help Alternatively, Docker users can pull the latest ralph image and start playing with it: # Pull latest docker image and get usage $ docker run --rm -i fundocker/ralph:latest ralph --help # Pro tip: define an alias to ease your life $ alias ralph = \"docker run --rm -i fundocker/ralph:latest ralph\" Now that ralph can be run from your system, we invite you to explore available commands .","title":"Quick start guide"},{"location":"#contributing","text":"This project is intended to be community-driven, so please, do not hesitate to get in touch if you have any questions related to our implementation or design decisions. We try to raise our code quality standards and expect contributors to follow the recommendations from our handbook .","title":"Contributing"},{"location":"#license","text":"This work is released under the MIT License (see LICENSE ).","title":"License"},{"location":"CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased \u00b6 Added \u00b6 Create a post endpoint for statements implementing the LRS spec Implement support for the MongoDB database backend Implement support for custom queries when using database backends get method (used in the fetch command) Changed \u00b6 Migrate to python-legacy handler for mkdocstrings package Upgrade bclick to 3.2.2 Upgrade click to 8.1.3 Upgrade elasticsearch to 8.3.1 Upgrade fastapi to 0.78.0 Upgrade Jinja2 to 3.1.2 Upgrade ovh to 1.0.0 Upgrade pydantic to 1.9.1 Upgrade pyparsing to 3.0.9 Upgrade python-keystoneclient to 4.5.0 Upgrade python-swiftclient to 4.0.0 Upgrade requests to 2.28.1 Upgrade sentry_sdk to 1.7.0 Upgrade uvicorn to 0.18.2 Upgrade websockets to 10.3 Make backends yield results instead of writing to standard streams Fixed \u00b6 Tray: do not create a cronjobs list when no cronjob has been defined 2.1.0 - 2022-04-13 \u00b6 Added \u00b6 Implement edx problem interaction events pydantic models Implement edx textbook interaction events pydantic models ws websocket stream backend (compatible with the fetch command) bundle jq , curl and wget in the fundocker/ralph Docker image Tray: enable ralph app deployment command configuration Add a runserver command with basic auth and a whoami route Create a get endpoint for statements implementing the LRS spec Add optional fields to BaseXapiModel Changed \u00b6 Upgrade uvicorn to 0.17.4 Upgrade elasticsearch to 7.17.0 Upgrade sentry_sdk to 1.5.5 Upgrade fastapi to 0.73.0 Upgrade pyparsing to 3.0.7 Upgrade pydantic to 1.9.0 Upgrade python-keystoneclient to 4.4.0 Upgrade python-swiftclient to 3.13.0 Upgrade pyyaml to 6.0 Upgrade requests to 2.27.1 Upgrade websockets to 10.1 2.0.1 - 2021-07-15 \u00b6 Changed \u00b6 Upgrade elasticsearch to 7.13.3 Fixed \u00b6 Restore elasticsearch backend datastream compatibility for bulk operations 2.0.0 - 2021-07-09 \u00b6 Added \u00b6 xAPI video interacted pydantic models xAPI video terminated pydantic models xAPI video completed pydantic models xAPI video seeked pydantic models xAPI video initialized pydantic models xAPI video paused pydantic models convert command to transform edx events to xAPI format EdX to xAPI converters for page viewed and page_close events Implement core event format converter xAPI video played pydantic models xAPI page viewed and page terminated pydantic models Implement edx navigational events pydantic models Implement edx enrollment events pydantic models Install security updates in project Docker images Model selector to retrieve associated pydantic model of a given event validate command to lint edx events using pydantic models Support all available bulk operation types for the elasticsearch backend (create, index, update, delete) using the --es-op-type option Changed \u00b6 Upgrade elasticsearch to 7.13.2 Upgrade python-swiftclient to 3.12.0 Upgrade click to 8.0.1 Upgrade click-option-group to 0.5.3 Upgrade pydantic to 1.8.2 Upgrade sentry_sdk to 1.1.0 Rename edx models Migrate model tests from factories to hypothesis strategies Tray: switch from openshift to k8s (BC) Tray: remove useless deployment probes Fixed \u00b6 Tray: remove version immutable field in DC selector 1.2.0 - 2021-02-26 \u00b6 Added \u00b6 EdX server event pydantic model and factory EdX page_close browser event pydantic model and factory Tray: allow to specify a self-generated elasticsearch cluster CA certificate Fixed \u00b6 Tray: add missing Swift variables in the secret Tray: fix pods anti-affinity selector Removed \u00b6 pandas is no longer required 1.1.0 - 2021-02-04 \u00b6 Added \u00b6 Support for Swift storage backend Use the push command --ignore-errors option to ignore ES bulk import errors The elasticsearch backend now accepts passing all supported client options Changed \u00b6 Upgrade pyyaml to 5.4.1 Upgrade pandas to 1.2.1 Removed \u00b6 click_log is no longer required as we are able to configure logging 1.0.0 - 2021-01-13 \u00b6 Added \u00b6 Implement base CLI commands (list, extract, fetch & push) for supported backends Support for ElasticSearch database backend Support for LDP storage backend Support for FS storage backend Parse (gzipped) tracking logs in GELF format Support for application\u2019s configuration file Add optional sentry integration Distribute Arnold\u2019s tray to deploy Ralph in a k8s cluster as cronjobs","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"CHANGELOG/#added","text":"Create a post endpoint for statements implementing the LRS spec Implement support for the MongoDB database backend Implement support for custom queries when using database backends get method (used in the fetch command)","title":"Added"},{"location":"CHANGELOG/#changed","text":"Migrate to python-legacy handler for mkdocstrings package Upgrade bclick to 3.2.2 Upgrade click to 8.1.3 Upgrade elasticsearch to 8.3.1 Upgrade fastapi to 0.78.0 Upgrade Jinja2 to 3.1.2 Upgrade ovh to 1.0.0 Upgrade pydantic to 1.9.1 Upgrade pyparsing to 3.0.9 Upgrade python-keystoneclient to 4.5.0 Upgrade python-swiftclient to 4.0.0 Upgrade requests to 2.28.1 Upgrade sentry_sdk to 1.7.0 Upgrade uvicorn to 0.18.2 Upgrade websockets to 10.3 Make backends yield results instead of writing to standard streams","title":"Changed"},{"location":"CHANGELOG/#fixed","text":"Tray: do not create a cronjobs list when no cronjob has been defined","title":"Fixed"},{"location":"CHANGELOG/#210_-_2022-04-13","text":"","title":"2.1.0 - 2022-04-13"},{"location":"CHANGELOG/#added_1","text":"Implement edx problem interaction events pydantic models Implement edx textbook interaction events pydantic models ws websocket stream backend (compatible with the fetch command) bundle jq , curl and wget in the fundocker/ralph Docker image Tray: enable ralph app deployment command configuration Add a runserver command with basic auth and a whoami route Create a get endpoint for statements implementing the LRS spec Add optional fields to BaseXapiModel","title":"Added"},{"location":"CHANGELOG/#changed_1","text":"Upgrade uvicorn to 0.17.4 Upgrade elasticsearch to 7.17.0 Upgrade sentry_sdk to 1.5.5 Upgrade fastapi to 0.73.0 Upgrade pyparsing to 3.0.7 Upgrade pydantic to 1.9.0 Upgrade python-keystoneclient to 4.4.0 Upgrade python-swiftclient to 3.13.0 Upgrade pyyaml to 6.0 Upgrade requests to 2.27.1 Upgrade websockets to 10.1","title":"Changed"},{"location":"CHANGELOG/#201_-_2021-07-15","text":"","title":"2.0.1 - 2021-07-15"},{"location":"CHANGELOG/#changed_2","text":"Upgrade elasticsearch to 7.13.3","title":"Changed"},{"location":"CHANGELOG/#fixed_1","text":"Restore elasticsearch backend datastream compatibility for bulk operations","title":"Fixed"},{"location":"CHANGELOG/#200_-_2021-07-09","text":"","title":"2.0.0 - 2021-07-09"},{"location":"CHANGELOG/#added_2","text":"xAPI video interacted pydantic models xAPI video terminated pydantic models xAPI video completed pydantic models xAPI video seeked pydantic models xAPI video initialized pydantic models xAPI video paused pydantic models convert command to transform edx events to xAPI format EdX to xAPI converters for page viewed and page_close events Implement core event format converter xAPI video played pydantic models xAPI page viewed and page terminated pydantic models Implement edx navigational events pydantic models Implement edx enrollment events pydantic models Install security updates in project Docker images Model selector to retrieve associated pydantic model of a given event validate command to lint edx events using pydantic models Support all available bulk operation types for the elasticsearch backend (create, index, update, delete) using the --es-op-type option","title":"Added"},{"location":"CHANGELOG/#changed_3","text":"Upgrade elasticsearch to 7.13.2 Upgrade python-swiftclient to 3.12.0 Upgrade click to 8.0.1 Upgrade click-option-group to 0.5.3 Upgrade pydantic to 1.8.2 Upgrade sentry_sdk to 1.1.0 Rename edx models Migrate model tests from factories to hypothesis strategies Tray: switch from openshift to k8s (BC) Tray: remove useless deployment probes","title":"Changed"},{"location":"CHANGELOG/#fixed_2","text":"Tray: remove version immutable field in DC selector","title":"Fixed"},{"location":"CHANGELOG/#120_-_2021-02-26","text":"","title":"1.2.0 - 2021-02-26"},{"location":"CHANGELOG/#added_3","text":"EdX server event pydantic model and factory EdX page_close browser event pydantic model and factory Tray: allow to specify a self-generated elasticsearch cluster CA certificate","title":"Added"},{"location":"CHANGELOG/#fixed_3","text":"Tray: add missing Swift variables in the secret Tray: fix pods anti-affinity selector","title":"Fixed"},{"location":"CHANGELOG/#removed","text":"pandas is no longer required","title":"Removed"},{"location":"CHANGELOG/#110_-_2021-02-04","text":"","title":"1.1.0 - 2021-02-04"},{"location":"CHANGELOG/#added_4","text":"Support for Swift storage backend Use the push command --ignore-errors option to ignore ES bulk import errors The elasticsearch backend now accepts passing all supported client options","title":"Added"},{"location":"CHANGELOG/#changed_4","text":"Upgrade pyyaml to 5.4.1 Upgrade pandas to 1.2.1","title":"Changed"},{"location":"CHANGELOG/#removed_1","text":"click_log is no longer required as we are able to configure logging","title":"Removed"},{"location":"CHANGELOG/#100_-_2021-01-13","text":"","title":"1.0.0 - 2021-01-13"},{"location":"CHANGELOG/#added_5","text":"Implement base CLI commands (list, extract, fetch & push) for supported backends Support for ElasticSearch database backend Support for LDP storage backend Support for FS storage backend Parse (gzipped) tracking logs in GELF format Support for application\u2019s configuration file Add optional sentry integration Distribute Arnold\u2019s tray to deploy Ralph in a k8s cluster as cronjobs","title":"Added"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2020-present GIP FUN MOOC. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"api/","text":"API Server \u00b6 Ralph comes with an API server that aims to implement the LRS specification (still a work in progress). Getting started \u00b6 The API server can be started up with the following command: $ ralph runserver Before you can start your API server and make requests against it, you need to set up your credentials. Creating a credentials file \u00b6 The credentials file is expected to be a valid JSON file. Its location is specified by the RALPH_AUTH_FILE configuration value. By default, ralph will look for the auth.json file in the application directory (see click documentation for details ). The expected format is a list of entries (JSON objects) each containing the username, the user\u2019s bcrypt hashed+salted password and scopes they can access: [ { \"username\" : \"john.doe@example.com\" , \"hash\" : \"$2b$12$yBXrzIuRIk6yaft5KUgVFOIPv0PskCCh9PXmF2t7pno.qUZ5LK0D2\" , \"scopes\" : [ \"example_scope\" ] }, { \"username\" : \"simon.says@example.com\" , \"hash\" : \"$2b$12$yBXrzIuRIk6yaft5KUgVFOIPv0PskCCh9PXmF2t7pno.qUZ5LK0D2\" , \"scopes\" : [ \"second_scope\" , \"third_scope\" ] } ] The hash can be generated with a python script executed directly in the command line: # Install bcrypt $ python3 -m pip install bcrypt # Generate the hash and print it to console $ python3 -c 'import bcrypt; print(bcrypt.hashpw(b\"PASSWORD\", bcrypt.gensalt()).decode(\"ascii\"))' Making a GET request \u00b6 The first request that can be answered by the ralph API server is a whoami request, which checks if the user is authenticated and returns their username and permission scopes. Use curl to get http://localhost:8100/whoami : $ curl http://localhost:8100/whoami < HTTP/1.1 401 Unauthorized < { \"error\" : \"Not authenticated\" } Send your username and password to the API server through HTTP Basic Auth: $ curl --user john.doe@example.com:PASSWORD http://localhost:8100/whoami < HTTP/1.1 200 OK < { \"username\" : \"john.doe@example.com\" , \"scopes\" : [ \"authenticated\" , \"example_scope\" ]}","title":"API"},{"location":"api/#api_server","text":"Ralph comes with an API server that aims to implement the LRS specification (still a work in progress).","title":"API Server"},{"location":"api/#getting_started","text":"The API server can be started up with the following command: $ ralph runserver Before you can start your API server and make requests against it, you need to set up your credentials.","title":"Getting started"},{"location":"api/#creating_a_credentials_file","text":"The credentials file is expected to be a valid JSON file. Its location is specified by the RALPH_AUTH_FILE configuration value. By default, ralph will look for the auth.json file in the application directory (see click documentation for details ). The expected format is a list of entries (JSON objects) each containing the username, the user\u2019s bcrypt hashed+salted password and scopes they can access: [ { \"username\" : \"john.doe@example.com\" , \"hash\" : \"$2b$12$yBXrzIuRIk6yaft5KUgVFOIPv0PskCCh9PXmF2t7pno.qUZ5LK0D2\" , \"scopes\" : [ \"example_scope\" ] }, { \"username\" : \"simon.says@example.com\" , \"hash\" : \"$2b$12$yBXrzIuRIk6yaft5KUgVFOIPv0PskCCh9PXmF2t7pno.qUZ5LK0D2\" , \"scopes\" : [ \"second_scope\" , \"third_scope\" ] } ] The hash can be generated with a python script executed directly in the command line: # Install bcrypt $ python3 -m pip install bcrypt # Generate the hash and print it to console $ python3 -c 'import bcrypt; print(bcrypt.hashpw(b\"PASSWORD\", bcrypt.gensalt()).decode(\"ascii\"))'","title":"Creating a credentials file"},{"location":"api/#making_a_get_request","text":"The first request that can be answered by the ralph API server is a whoami request, which checks if the user is authenticated and returns their username and permission scopes. Use curl to get http://localhost:8100/whoami : $ curl http://localhost:8100/whoami < HTTP/1.1 401 Unauthorized < { \"error\" : \"Not authenticated\" } Send your username and password to the API server through HTTP Basic Auth: $ curl --user john.doe@example.com:PASSWORD http://localhost:8100/whoami < HTTP/1.1 200 OK < { \"username\" : \"john.doe@example.com\" , \"scopes\" : [ \"authenticated\" , \"example_scope\" ]}","title":"Making a GET request"},{"location":"backends/","text":"Backends \u00b6 Ralph supports various storage and database backends that can be accessed to read from or write learning events to. Implemented backends are listed below along with their configuration parameters. If your favourite backend is missing to the list, feel free to submit your implementation or get in touch! Key concepts \u00b6 We distinguish storage from database backends as the semantic and concepts are quite different in terms of code, but those two types of backends can be considered as \u201cbackends\u201d from a Ralph user perspective as the CLI can use both in most of its commands. Each backend has its own parameters that are required to use it. Those parameters can be set as command line options or environment variables; the later is the recommended solution for sensible data such as service credentials. If we consider the os_username (OpenStack user name) parameter of the OpenStack Swift backend, it can be set as a command line option using swift as the option prefix (and replacing underscores in its name by dashes): $ ralph list --backend swift --swift-os-username johndoe # [...] more options Alternatively, this parameter can be set as an environment variable (in upper case, prefixed by the program name, e.g. RALPH_ ): $ export RALPH_SWIFT_OS_USERNAME = \"johndoe\" $ ralph list --backend swift # [...] more options The general patterns for backend parameters are: --{{ backend_name }}-{{ parameter | underscore_to_dash }} for command options, and, RALPH_{{ backend_name | uppercase }}_{{ parameter | uppercase }} for environment variables. Storage backends \u00b6 OVH - Log Data Platform (LDP) \u00b6 LDP is a nice service built by OVH on top of Graylog to follow, analyse and store your logs. Learning events ( aka tracking logs) can be stored in GELF format using this backend. For now the LDP backend is read-only as we consider that it is mostly used to collect primary logs and not as a Ralph target. Feel free to get in touch to prove us wrong, or better: submit your proposal for the write method implementation. Backend parameters \u00b6 To access OVH\u2019s LDP API, you need to register Ralph as an authorized application and generate an application key, an application secret and a consumer key. While filling the registration form available at: eu.api.ovh.com/createToken/ , be sure to give an appropriate validity time span to your token and allow only GET requests on the /dbaas/logs/* path. endpoint : the API endpoint ( e.g. ovh-eu ) application_key : use generated application key application_secret : use generated application secret consumer_key : use generated consumer key The following parameters are required to fetch archives from an LDP account stream: service_name : the LDP account name ( e.g. ldp-xx-xxxxx ) stream_id : the identifier of the stream you are querying ( e.g. a UUID hex representation: 77ec6e4a-ac15-4bcf-8043-7429bf275e49 ) For more information about OVH\u2019s API client parameters, please refer to the project\u2019s documentation: github.com/ovh/python-ovh . OpenStack Swift \u00b6 Swift is the OpenStack object storage service. This storage backend is fully supported (read and write operations) to stream and store log archives. Backend parameters \u00b6 Primarily required parameters correspond to a standard authentication using OpenStack Keystone service: os_identity_api_version : keystone API version you will authenticate to (defaults to 3 ) os_auth_url : the authentication URL (defaults to OVH\u2019s Swift https://auth.cloud.ovh.net/ ) os_project_domain_name : the project domain name (defaults to Default ) os_user_domain_name : the user domain name (defaults to Default ) os_username : the name of your openstack swift user os_password : the password of your openstack swift user Secondary parameters are required to work with the target container: os_storage_url : the URL of the target container os_region_name : the region where your container is os_tenant_name : the name of the tenant of your container os_tenant_id : the identifier of the tenant of your container File system \u00b6 The file system backend is a dummy template that can be used to develop your own backend. It\u2019s a \u201cdummy\u201d backend as it\u2019s not required in a UNIX Shell context, the ls and cat commands used along with UNIX streams will do a better job. Backend parameters \u00b6 The only required parameter is the path we want to list or stream content from. WebSocket \u00b6 The webSocket backend is read-only and can be used to get real-time events. If you use OVH\u2019s Logs Data Platform (LDP), you can retrieve a WebSocket URI to test your data stream by following instructions from the official documentation . Backend parameters \u00b6 ws_uri : the WebSocket uri ( e.g. wss://example.com/websocket ) Database backends \u00b6 Elasticsearch \u00b6 Elasticsearch backend is mostly used for indexation purpose (as a datalake) but it can also be used to fetch indexed data from it. Backend parameters \u00b6 Elasticsearch backend parameters required to connect to a cluster are: hosts : a list of cluster hosts to connect to ( e.g. [\"http://elasticsearch-node:9200\"] ) index : the elasticsearch index where to get/put documents client_options : all options from the official client are supported and can be specified as a python dict object ( e.g. {'use_ssl': True, 'verify_certs': True} ) For a complete list of supported client_options , please refer to the official client\u2019s documentation .","title":"Backends"},{"location":"backends/#backends","text":"Ralph supports various storage and database backends that can be accessed to read from or write learning events to. Implemented backends are listed below along with their configuration parameters. If your favourite backend is missing to the list, feel free to submit your implementation or get in touch!","title":"Backends"},{"location":"backends/#key_concepts","text":"We distinguish storage from database backends as the semantic and concepts are quite different in terms of code, but those two types of backends can be considered as \u201cbackends\u201d from a Ralph user perspective as the CLI can use both in most of its commands. Each backend has its own parameters that are required to use it. Those parameters can be set as command line options or environment variables; the later is the recommended solution for sensible data such as service credentials. If we consider the os_username (OpenStack user name) parameter of the OpenStack Swift backend, it can be set as a command line option using swift as the option prefix (and replacing underscores in its name by dashes): $ ralph list --backend swift --swift-os-username johndoe # [...] more options Alternatively, this parameter can be set as an environment variable (in upper case, prefixed by the program name, e.g. RALPH_ ): $ export RALPH_SWIFT_OS_USERNAME = \"johndoe\" $ ralph list --backend swift # [...] more options The general patterns for backend parameters are: --{{ backend_name }}-{{ parameter | underscore_to_dash }} for command options, and, RALPH_{{ backend_name | uppercase }}_{{ parameter | uppercase }} for environment variables.","title":"Key concepts"},{"location":"backends/#storage_backends","text":"","title":"Storage backends"},{"location":"backends/#ovh_-_log_data_platform_ldp","text":"LDP is a nice service built by OVH on top of Graylog to follow, analyse and store your logs. Learning events ( aka tracking logs) can be stored in GELF format using this backend. For now the LDP backend is read-only as we consider that it is mostly used to collect primary logs and not as a Ralph target. Feel free to get in touch to prove us wrong, or better: submit your proposal for the write method implementation.","title":"OVH - Log Data Platform (LDP)"},{"location":"backends/#backend_parameters","text":"To access OVH\u2019s LDP API, you need to register Ralph as an authorized application and generate an application key, an application secret and a consumer key. While filling the registration form available at: eu.api.ovh.com/createToken/ , be sure to give an appropriate validity time span to your token and allow only GET requests on the /dbaas/logs/* path. endpoint : the API endpoint ( e.g. ovh-eu ) application_key : use generated application key application_secret : use generated application secret consumer_key : use generated consumer key The following parameters are required to fetch archives from an LDP account stream: service_name : the LDP account name ( e.g. ldp-xx-xxxxx ) stream_id : the identifier of the stream you are querying ( e.g. a UUID hex representation: 77ec6e4a-ac15-4bcf-8043-7429bf275e49 ) For more information about OVH\u2019s API client parameters, please refer to the project\u2019s documentation: github.com/ovh/python-ovh .","title":"Backend parameters"},{"location":"backends/#openstack_swift","text":"Swift is the OpenStack object storage service. This storage backend is fully supported (read and write operations) to stream and store log archives.","title":"OpenStack Swift"},{"location":"backends/#backend_parameters_1","text":"Primarily required parameters correspond to a standard authentication using OpenStack Keystone service: os_identity_api_version : keystone API version you will authenticate to (defaults to 3 ) os_auth_url : the authentication URL (defaults to OVH\u2019s Swift https://auth.cloud.ovh.net/ ) os_project_domain_name : the project domain name (defaults to Default ) os_user_domain_name : the user domain name (defaults to Default ) os_username : the name of your openstack swift user os_password : the password of your openstack swift user Secondary parameters are required to work with the target container: os_storage_url : the URL of the target container os_region_name : the region where your container is os_tenant_name : the name of the tenant of your container os_tenant_id : the identifier of the tenant of your container","title":"Backend parameters"},{"location":"backends/#file_system","text":"The file system backend is a dummy template that can be used to develop your own backend. It\u2019s a \u201cdummy\u201d backend as it\u2019s not required in a UNIX Shell context, the ls and cat commands used along with UNIX streams will do a better job.","title":"File system"},{"location":"backends/#backend_parameters_2","text":"The only required parameter is the path we want to list or stream content from.","title":"Backend parameters"},{"location":"backends/#websocket","text":"The webSocket backend is read-only and can be used to get real-time events. If you use OVH\u2019s Logs Data Platform (LDP), you can retrieve a WebSocket URI to test your data stream by following instructions from the official documentation .","title":"WebSocket"},{"location":"backends/#backend_parameters_3","text":"ws_uri : the WebSocket uri ( e.g. wss://example.com/websocket )","title":"Backend parameters"},{"location":"backends/#database_backends","text":"","title":"Database backends"},{"location":"backends/#elasticsearch","text":"Elasticsearch backend is mostly used for indexation purpose (as a datalake) but it can also be used to fetch indexed data from it.","title":"Elasticsearch"},{"location":"backends/#backend_parameters_4","text":"Elasticsearch backend parameters required to connect to a cluster are: hosts : a list of cluster hosts to connect to ( e.g. [\"http://elasticsearch-node:9200\"] ) index : the elasticsearch index where to get/put documents client_options : all options from the official client are supported and can be specified as a python dict object ( e.g. {'use_ssl': True, 'verify_certs': True} ) For a complete list of supported client_options , please refer to the official client\u2019s documentation .","title":"Backend parameters"},{"location":"commands/","text":"Commands \u00b6 ralph \u00b6 Ralph is a stream-based tool to play with your logs. Usage: ralph [OPTIONS] COMMAND [ARGS]... Options: -v, --verbosity LVL Either CRITICAL, ERROR, WARNING, INFO (default) or DEBUG --help Show this message and exit. ralph convert \u00b6 Converts input events to a given format. Usage: ralph convert [OPTIONS] Options: From edX to xAPI converter options: -u, --uuid-namespace TEXT The UUID namespace to use for the `ID` field generation -p, --platform-url TEXT The `actor.accou nt.homePage` to use in the xAPI statements [required] -f, --from [edx] Input events format to convert [required] -t, --to [xapi] Output events format [required] -I, --ignore-errors Continue writing regardless of raised errors -F, --fail-on-unknown Stop converting at first unknown event --help Show this message and exit. ralph extract \u00b6 Extracts input events from a container format using a dedicated parser. Usage: ralph extract [OPTIONS] Options: -p, --parser [gelf|es] Container format parser used to extract events [required] --help Show this message and exit. ralph fetch \u00b6 Fetch an archive or records from a configured backend. Usage: ralph fetch [OPTIONS] [ARCHIVE] Options: ws backend: --ws-uri TEXT swift backend: --swift-os-identity-api-version TEXT --swift-os-auth-url TEXT --swift-os-project-domain-name TEXT --swift-os-user-domain-name TEXT --swift-os-storage-url TEXT --swift-os-region-name TEXT --swift-os-password TEXT --swift-os-username TEXT --swift-os-tenant-name TEXT --swift-os-tenant-id TEXT fs backend: --fs-path TEXT ldp backend: --ldp-stream-id TEXT --ldp-service-name TEXT --ldp-consumer-key TEXT --ldp-application-secret TEXT --ldp-application-key TEXT --ldp-endpoint TEXT mongo backend: --mongo-client-options KEY=VALUE,KEY=VALUE --mongo-collection TEXT --mongo-database TEXT --mongo-connection-uri TEXT es backend: --es-op-type TEXT --es-client-options KEY=VALUE,KEY=VALUE --es-index TEXT --es-hosts TEXT -b, --backend [es|mongo|ldp|fs|swift|ws] Backend [required] -c, --chunk-size INTEGER Get events by chunks of size # -q, --query '{\"KEY\": \"VALUE\", \"KEY\": \"VALUE\"}' Query object as a JSON string (database backends ONLY) --help Show this message and exit. ralph list \u00b6 List available archives from a configured storage backend. Usage: ralph list [OPTIONS] Options: swift backend: --swift-os-identity-api-version TEXT --swift-os-auth-url TEXT --swift-os-project-domain-name TEXT --swift-os-user-domain-name TEXT --swift-os-storage-url TEXT --swift-os-region-name TEXT --swift-os-password TEXT --swift-os-username TEXT --swift-os-tenant-name TEXT --swift-os-tenant-id TEXT fs backend: --fs-path TEXT ldp backend: --ldp-stream-id TEXT --ldp-service-name TEXT --ldp-consumer-key TEXT --ldp-application-secret TEXT --ldp-application-key TEXT --ldp-endpoint TEXT -b, --backend [ldp|fs|swift] Backend [required] -n, --new / -a, --all List not fetched (or all) archives -D, --details / -I, --ids Get archives detailed output (JSON) --help Show this message and exit. ralph push \u00b6 Push an archive to a configured backend. Usage: ralph push [OPTIONS] [ARCHIVE] Options: swift backend: --swift-os-identity-api-version TEXT --swift-os-auth-url TEXT --swift-os-project-domain-name TEXT --swift-os-user-domain-name TEXT --swift-os-storage-url TEXT --swift-os-region-name TEXT --swift-os-password TEXT --swift-os-username TEXT --swift-os-tenant-name TEXT --swift-os-tenant-id TEXT fs backend: --fs-path TEXT ldp backend: --ldp-stream-id TEXT --ldp-service-name TEXT --ldp-consumer-key TEXT --ldp-application-secret TEXT --ldp-application-key TEXT --ldp-endpoint TEXT mongo backend: --mongo-client-options KEY=VALUE,KEY=VALUE --mongo-collection TEXT --mongo-database TEXT --mongo-connection-uri TEXT es backend: --es-op-type TEXT --es-client-options KEY=VALUE,KEY=VALUE --es-index TEXT --es-hosts TEXT -b, --backend [es|mongo|ldp|fs|swift] Backend [required] -c, --chunk-size INTEGER Get events by chunks of size # -f, --force Overwrite existing archives or records -I, --ignore-errors Continue writing regardless of raised errors --help Show this message and exit. ralph runserver \u00b6 Run the API server for the development environment. Starting uvicorn programmatically for convenience and documentation. Usage: ralph runserver [OPTIONS] Options: --help Show this message and exit. ralph validate \u00b6 Validates input events of given format. Usage: ralph validate [OPTIONS] Options: -f, --format [edx|xapi] Input events format to validate [required] -I, --ignore-errors Continue validating regardless of raised errors -F, --fail-on-unknown Stop validating at first unknown event --help Show this message and exit.","title":"Commands"},{"location":"commands/#commands","text":"","title":"Commands"},{"location":"commands/#ralph","text":"Ralph is a stream-based tool to play with your logs. Usage: ralph [OPTIONS] COMMAND [ARGS]... Options: -v, --verbosity LVL Either CRITICAL, ERROR, WARNING, INFO (default) or DEBUG --help Show this message and exit.","title":"ralph"},{"location":"commands/#ralph-convert","text":"Converts input events to a given format. Usage: ralph convert [OPTIONS] Options: From edX to xAPI converter options: -u, --uuid-namespace TEXT The UUID namespace to use for the `ID` field generation -p, --platform-url TEXT The `actor.accou nt.homePage` to use in the xAPI statements [required] -f, --from [edx] Input events format to convert [required] -t, --to [xapi] Output events format [required] -I, --ignore-errors Continue writing regardless of raised errors -F, --fail-on-unknown Stop converting at first unknown event --help Show this message and exit.","title":"convert"},{"location":"commands/#ralph-extract","text":"Extracts input events from a container format using a dedicated parser. Usage: ralph extract [OPTIONS] Options: -p, --parser [gelf|es] Container format parser used to extract events [required] --help Show this message and exit.","title":"extract"},{"location":"commands/#ralph-fetch","text":"Fetch an archive or records from a configured backend. Usage: ralph fetch [OPTIONS] [ARCHIVE] Options: ws backend: --ws-uri TEXT swift backend: --swift-os-identity-api-version TEXT --swift-os-auth-url TEXT --swift-os-project-domain-name TEXT --swift-os-user-domain-name TEXT --swift-os-storage-url TEXT --swift-os-region-name TEXT --swift-os-password TEXT --swift-os-username TEXT --swift-os-tenant-name TEXT --swift-os-tenant-id TEXT fs backend: --fs-path TEXT ldp backend: --ldp-stream-id TEXT --ldp-service-name TEXT --ldp-consumer-key TEXT --ldp-application-secret TEXT --ldp-application-key TEXT --ldp-endpoint TEXT mongo backend: --mongo-client-options KEY=VALUE,KEY=VALUE --mongo-collection TEXT --mongo-database TEXT --mongo-connection-uri TEXT es backend: --es-op-type TEXT --es-client-options KEY=VALUE,KEY=VALUE --es-index TEXT --es-hosts TEXT -b, --backend [es|mongo|ldp|fs|swift|ws] Backend [required] -c, --chunk-size INTEGER Get events by chunks of size # -q, --query '{\"KEY\": \"VALUE\", \"KEY\": \"VALUE\"}' Query object as a JSON string (database backends ONLY) --help Show this message and exit.","title":"fetch"},{"location":"commands/#ralph-list","text":"List available archives from a configured storage backend. Usage: ralph list [OPTIONS] Options: swift backend: --swift-os-identity-api-version TEXT --swift-os-auth-url TEXT --swift-os-project-domain-name TEXT --swift-os-user-domain-name TEXT --swift-os-storage-url TEXT --swift-os-region-name TEXT --swift-os-password TEXT --swift-os-username TEXT --swift-os-tenant-name TEXT --swift-os-tenant-id TEXT fs backend: --fs-path TEXT ldp backend: --ldp-stream-id TEXT --ldp-service-name TEXT --ldp-consumer-key TEXT --ldp-application-secret TEXT --ldp-application-key TEXT --ldp-endpoint TEXT -b, --backend [ldp|fs|swift] Backend [required] -n, --new / -a, --all List not fetched (or all) archives -D, --details / -I, --ids Get archives detailed output (JSON) --help Show this message and exit.","title":"list"},{"location":"commands/#ralph-push","text":"Push an archive to a configured backend. Usage: ralph push [OPTIONS] [ARCHIVE] Options: swift backend: --swift-os-identity-api-version TEXT --swift-os-auth-url TEXT --swift-os-project-domain-name TEXT --swift-os-user-domain-name TEXT --swift-os-storage-url TEXT --swift-os-region-name TEXT --swift-os-password TEXT --swift-os-username TEXT --swift-os-tenant-name TEXT --swift-os-tenant-id TEXT fs backend: --fs-path TEXT ldp backend: --ldp-stream-id TEXT --ldp-service-name TEXT --ldp-consumer-key TEXT --ldp-application-secret TEXT --ldp-application-key TEXT --ldp-endpoint TEXT mongo backend: --mongo-client-options KEY=VALUE,KEY=VALUE --mongo-collection TEXT --mongo-database TEXT --mongo-connection-uri TEXT es backend: --es-op-type TEXT --es-client-options KEY=VALUE,KEY=VALUE --es-index TEXT --es-hosts TEXT -b, --backend [es|mongo|ldp|fs|swift] Backend [required] -c, --chunk-size INTEGER Get events by chunks of size # -f, --force Overwrite existing archives or records -I, --ignore-errors Continue writing regardless of raised errors --help Show this message and exit.","title":"push"},{"location":"commands/#ralph-runserver","text":"Run the API server for the development environment. Starting uvicorn programmatically for convenience and documentation. Usage: ralph runserver [OPTIONS] Options: --help Show this message and exit.","title":"runserver"},{"location":"commands/#ralph-validate","text":"Validates input events of given format. Usage: ralph validate [OPTIONS] Options: -f, --format [edx|xapi] Input events format to validate [required] -I, --ignore-errors Continue validating regardless of raised errors -F, --fail-on-unknown Stop validating at first unknown event --help Show this message and exit.","title":"validate"},{"location":"contribute/","text":"Contribute \u00b6 Ralph\u2019s core \u00b6 To start playing with ralph , you should build it using the bootstrap Make target: $ make bootstrap Once the project has been bootstrapped, you may want to edit generated .env file to set up available backends parameters that will be injected in the running container as environment variables to configure Ralph (see backends documentation ): # Elasticsearch backend RALPH_ES_HOSTS=http://elasticsearch:9200 RALPH_ES_INDEX=statements RALPH_ES_TEST_HOSTS=http://elasticsearch:9200 RALPH_ES_TEST_INDEX=test-index # [...] Note that lines starting with a # are considered as commented and thus will have no effect while running Ralph. Now you can start playing the CLI: $ bin/ralph --help To lint your code, either use the lint meta target or one of the linting tools we use: # Run all linters $ make lint # Run pylint $ make lint-pylint # List available linters $ make help | grep lint- To run tests on your code, either use the test Make target or the bin/pytest script to pass specific arguments to the test runner: # Run all tests $ make test # Run pytest with options $ bin/pytest -x -k mixins Working with local backends \u00b6 Not all backends are accessible in a local environment development; for now only elasticsearch and swift services are accessible as docker containers (see docker-compose.yml services). To configure those backends, we provide default parameters in the .env.dist template, you can copy/paste them in your .env file (and uncomment them so that they are properly injected in running containers). Once configured, start available backends using: $ make run- [ BACKEND ] Substitute [BACKEND] by the backend name, e.g. es for Elasticsearch or swift for OpenStack Swift: # Start Elasticsearch local backend $ make run-es # Start Swift local backend $ make run-swift # Start all local backends $ make run-all Now that you have started at least the elasticsearch and swift backends, it\u2019s time to play with them: # Store a JSON file in the Swift backend $ echo '{\"id\": 1, \"foo\": \"bar\"}' | \\ ./bin/ralph push -b swift -f foo.json # Check that we have created a new JSON file in the Swift backend $ bin/ralph list -b swift foo.json # Fetch the content of the JSON file and index it in Elasticsearch $ bin/ralph fetch -b swift foo.json | \\ bin/ralph push -b es # Check that we have properly indexed the JSON file in Elasticsearch $ bin/ralph fetch -b es { \"id\" : 1 , \"foo\" : \"bar\" } Ralph\u2019s tray \u00b6 Ralph is distributed along with its tray (a deployable package for Kubernetes clusters using Arnold ). If you intend to work on this tray, please refer to Arnold\u2019s documentation.","title":"Contribute"},{"location":"contribute/#contribute","text":"","title":"Contribute"},{"location":"contribute/#ralphs_core","text":"To start playing with ralph , you should build it using the bootstrap Make target: $ make bootstrap Once the project has been bootstrapped, you may want to edit generated .env file to set up available backends parameters that will be injected in the running container as environment variables to configure Ralph (see backends documentation ): # Elasticsearch backend RALPH_ES_HOSTS=http://elasticsearch:9200 RALPH_ES_INDEX=statements RALPH_ES_TEST_HOSTS=http://elasticsearch:9200 RALPH_ES_TEST_INDEX=test-index # [...] Note that lines starting with a # are considered as commented and thus will have no effect while running Ralph. Now you can start playing the CLI: $ bin/ralph --help To lint your code, either use the lint meta target or one of the linting tools we use: # Run all linters $ make lint # Run pylint $ make lint-pylint # List available linters $ make help | grep lint- To run tests on your code, either use the test Make target or the bin/pytest script to pass specific arguments to the test runner: # Run all tests $ make test # Run pytest with options $ bin/pytest -x -k mixins","title":"Ralph's core"},{"location":"contribute/#working_with_local_backends","text":"Not all backends are accessible in a local environment development; for now only elasticsearch and swift services are accessible as docker containers (see docker-compose.yml services). To configure those backends, we provide default parameters in the .env.dist template, you can copy/paste them in your .env file (and uncomment them so that they are properly injected in running containers). Once configured, start available backends using: $ make run- [ BACKEND ] Substitute [BACKEND] by the backend name, e.g. es for Elasticsearch or swift for OpenStack Swift: # Start Elasticsearch local backend $ make run-es # Start Swift local backend $ make run-swift # Start all local backends $ make run-all Now that you have started at least the elasticsearch and swift backends, it\u2019s time to play with them: # Store a JSON file in the Swift backend $ echo '{\"id\": 1, \"foo\": \"bar\"}' | \\ ./bin/ralph push -b swift -f foo.json # Check that we have created a new JSON file in the Swift backend $ bin/ralph list -b swift foo.json # Fetch the content of the JSON file and index it in Elasticsearch $ bin/ralph fetch -b swift foo.json | \\ bin/ralph push -b es # Check that we have properly indexed the JSON file in Elasticsearch $ bin/ralph fetch -b es { \"id\" : 1 , \"foo\" : \"bar\" }","title":"Working with local backends"},{"location":"contribute/#ralphs_tray","text":"Ralph is distributed along with its tray (a deployable package for Kubernetes clusters using Arnold ). If you intend to work on this tray, please refer to Arnold\u2019s documentation.","title":"Ralph's tray"},{"location":"models/","text":"Ralph can be considered versatile since at some point it is log-content-agnostic: most commands will work as expected without transforming logged events content or format. But on the other side, Ralph is a tool dedicated to learning events processing so we\u2019ve implemented key features related to learning events validation and conversion. For now, we mostly focus on two learning events standards: Open edX and xAPI . Data validation and serialisation/de-serialisation are achieved using pydantics models that are documented in the following subsections: Open edX xAPI (work in progress)","title":"Rationale"},{"location":"models/edx/","text":"edX pydantic models base \u00b6 Base event model definitions AbstractBaseEventField ( BaseModelWithConfig ) pydantic-model \u00b6 Represents the base model inherited by all event fields. The base model does not have any attributes as event field does not have common sub-fields. Source code in ralph/models/edx/base.py class AbstractBaseEventField ( BaseModelWithConfig ): \"\"\"Represents the base model inherited by all `event` fields. The base model does not have any attributes as event field does not have common sub-fields. \"\"\" BaseContextField ( BaseModelWithConfig ) pydantic-model \u00b6 Represents the base model inherited by all event context fields. Attributes: Name Type Description course_user_tags dict of str Content from user_api_usercoursetag table. Retrieved with: dict( UserCourseTag.objects.filter( user=request.user.pk, course_id=course_key ).values_list('key', 'value') ) Note: Is only present when a course page is requested. Is an empty dictionary when the user is not logged in or not found in the user_api_usercoursetag table. user_id int or str or None Consists of the ID of the authenticated user. Retrieved with: request.user.pk querying the auth_user table. Note: Is an integer when the user is found in the auth_user table. Is an empty string when an exception is raised while retrieving the ID. Is None when the user is not logged in. org_id str Consists of the organization name that lists the course. Retrieved with: course_id.org where course_id is an opaque_keys.edx.locator.CourseLocator which is created using the URL of the requested page. Note: Is an empty string when the requested page is not a course page. course_id str Consists of the unique identifier for the visited course page. Retrieved with: course_id.to_deprecated_string() where course_id is an opaque_keys.edx.locator.CourseLocator which is created using the URL of the requested page. Note: Is an empty string when the requested page is not a course page. path Path Consist of the relative URL (without the hostname) of the requested page. Retrieved with: request.META['PATH_INFO'] Source code in ralph/models/edx/base.py class BaseContextField ( BaseModelWithConfig ): \"\"\"Represents the base model inherited by all event `context` fields. Attributes: course_user_tags (dict of str): Content from `user_api_usercoursetag` table. Retrieved with: `dict( UserCourseTag.objects.filter( user=request.user.pk, course_id=course_key ).values_list('key', 'value') )` Note: Is only present when a course page is requested. Is an empty dictionary when the user is not logged in or not found in the `user_api_usercoursetag` table. user_id (int or str or None): Consists of the ID of the authenticated user. Retrieved with: `request.user.pk` querying the `auth_user` table. Note: Is an integer when the user is found in the `auth_user` table. Is an empty string when an exception is raised while retrieving the ID. Is `None` when the user is not logged in. org_id (str): Consists of the organization name that lists the course. Retrieved with: `course_id.org` where `course_id` is an `opaque_keys.edx.locator.CourseLocator` which is created using the URL of the requested page. Note: Is an empty string when the requested page is not a course page. course_id (str): Consists of the unique identifier for the visited course page. Retrieved with: `course_id.to_deprecated_string()` where `course_id` is an `opaque_keys.edx.locator.CourseLocator` which is created using the URL of the requested page. Note: Is an empty string when the requested page is not a course page. path (Path): Consist of the relative URL (without the hostname) of the requested page. Retrieved with: `request.META['PATH_INFO']` \"\"\" course_id : constr ( regex = r \"^$|^course-v1:.+\\+.+\\+.+$\" ) # noqa:F722 course_user_tags : Optional [ dict [ str , str ]] module : Optional [ ContextModuleField ] org_id : str path : Path user_id : Union [ int , Literal [ \"\" ], None ] BaseEdxModel ( BaseModelWithConfig ) pydantic-model \u00b6 Represents the base model all statements inherit from. WARNING: it does not define the event , event_type and event_source fields. Attributes: Name Type Description username str Consists of the unique username identifying the logged in user. Retrieved with: request.user.username querying the auth_user table. Note: Is an empty string when the user is not logged in. If an exception is raised when retrieving the username from the table then the value is anonymous . Usernames are made of 2-30 ASCII letters / numbers / underscores (_) / hyphens (-) ip IPv4Address or str Consists of the public IPv4 address of the user. Retrieved with: get_ip(request) cf. https://github.com/un33k/django-ipware/tree/1.1.0 Note: Can be an empty string if the IP address is not found. agent str Consists of the User-Agent HTTP request header. Retrieved with: request.META[HTTP_USER_AGENT] Note: Can be an empty string if the header is not present in the request. Contains information about: Browser name and version Operating system name and version Default language host str Consists of the hostname of the server. Retrieved with: request.META[SERVER_NAME] referer Path Consists of the Referer HTTP request header. Retrieved with: request.META[HTTP_REFERER] Note: Can be an empty string if the header is not present in the request. Contains the referring URL (previous URL visited by the user). accept_language str Consists of the Accept-Language HTTP request header. Retrieved with: request.META[HTTP_ACCEPT_LANGUAGE] Note: Can be an empty string if the header is not present in the request. Contains the default language settings of the user. context BaseContextField see BaseContextField. time datetime Consists of the UTC time in ISO format at which the event was emitted. Retrieved with: datetime.datetime.utcnow() page None Consists of the value None Note: In JSON the value is null instead of None . Source code in ralph/models/edx/base.py class BaseEdxModel ( BaseModelWithConfig ): \"\"\"Represents the base model all statements inherit from. WARNING: it does not define the `event`, `event_type` and `event_source` fields. Attributes: username (str): Consists of the unique username identifying the logged in user. Retrieved with: `request.user.username` querying the `auth_user` table. Note: Is an empty string when the user is not logged in. If an exception is raised when retrieving the username from the table then the value is `anonymous`. Usernames are made of 2-30 ASCII letters / numbers / underscores (_) / hyphens (-) ip (IPv4Address or str): Consists of the public IPv4 address of the user. Retrieved with: `get_ip(request)` cf. https://github.com/un33k/django-ipware/tree/1.1.0 Note: Can be an empty string if the IP address is not found. agent (str): Consists of the `User-Agent` HTTP request header. Retrieved with: `request.META[HTTP_USER_AGENT]` Note: Can be an empty string if the header is not present in the request. Contains information about: Browser name and version Operating system name and version Default language host (str): Consists of the hostname of the server. Retrieved with: `request.META[SERVER_NAME]` referer (Path): Consists of the `Referer` HTTP request header. Retrieved with: `request.META[HTTP_REFERER]` Note: Can be an empty string if the header is not present in the request. Contains the referring URL (previous URL visited by the user). accept_language (str): Consists of the `Accept-Language` HTTP request header. Retrieved with: `request.META[HTTP_ACCEPT_LANGUAGE]` Note: Can be an empty string if the header is not present in the request. Contains the default language settings of the user. context (BaseContextField): see BaseContextField. time (datetime): Consists of the UTC time in ISO format at which the event was emitted. Retrieved with: `datetime.datetime.utcnow()` page (None): Consists of the value `None` Note: In JSON the value is `null` instead of `None`. \"\"\" username : Union [ constr ( min_length = 2 , max_length = 30 ), Literal [ \"\" ]] ip : Union [ IPv4Address , Literal [ \"\" ]] agent : str host : str referer : Union [ AnyHttpUrl , Literal [ \"\" ]] accept_language : str context : BaseContextField time : datetime page : None BaseModelWithConfig ( BaseModel ) pydantic-model \u00b6 Base model defining configuration shared among all models. Source code in ralph/models/edx/base.py class BaseModelWithConfig ( BaseModel ): \"\"\"Base model defining configuration shared among all models.\"\"\" class Config : # pylint: disable=missing-class-docstring extra = \"forbid\" ContextModuleField ( BaseModelWithConfig ) pydantic-model \u00b6 Represents the context module field. Attributes: Name Type Description usage_key str Consists of a block ID of the current component. display_name str Consists of a short description or title of the component. Source code in ralph/models/edx/base.py class ContextModuleField ( BaseModelWithConfig ): \"\"\"Represents the context `module` field. Attributes: usage_key (str): Consists of a block ID of the current component. display_name (str): Consists of a short description or title of the component. \"\"\" usage_key : constr ( regex = r \"^block-v1:.+\\+.+\\+.+type@.+@[a-f0-9] {32} $\" ) # noqa:F722 display_name : str original_usage_key : Optional [ constr ( regex = r \"^block-v1:.+\\+.+\\+.+type@problem\\+block@[a-f0-9] {32} $\" # noqa:F722 ) ] original_usage_version : Optional [ str ] browser \u00b6 Browser event model definitions BaseBrowserModel ( BaseEdxModel ) pydantic-model \u00b6 Represents the base model all browser statements inherit from. This type of event is triggered on (XHR) POST/GET requests to the /event URL. Attributes: Name Type Description event_source str Consists of the value browser . page AnyUrl Consists of the URL (with hostname) of the visited page. Retrieved with: window.location.href from the JavaScript front-end. session str Consists of the md5 encrypted Django session key or an empty string. Source code in ralph/models/edx/browser.py class BaseBrowserModel ( BaseEdxModel ): \"\"\"Represents the base model all browser statements inherit from. This type of event is triggered on (XHR) POST/GET requests to the `/event` URL. Attributes: event_source (str): Consists of the value `browser`. page (AnyUrl): Consists of the URL (with hostname) of the visited page. Retrieved with: `window.location.href` from the JavaScript front-end. session (str): Consists of the md5 encrypted Django session key or an empty string. \"\"\" event_source : Literal [ \"browser\" ] page : AnyUrl session : Union [ constr ( regex = r \"^[a-f0-9] {32} $\" ), Literal [ \"\" ]] # noqa: F722 converters special \u00b6 xapi special \u00b6 edX to xAPI conversion sets base \u00b6 Base xAPI Converter BaseXapiConverter ( BaseConversionSet ) \u00b6 Base xAPI Converter. WARNING: The converter may not include the following edX fields: - context.org_id: When org_id is an empty string. - context.course_id: When course_id is an empty string. WARNING: The converter should not include the following edX fields as they may contain sensitive data: username , referer , event , event_source , ip , agent , accept_language: , context.course_user_tags . Source code in ralph/models/edx/converters/xapi/base.py class BaseXapiConverter ( BaseConversionSet ): \"\"\"Base xAPI Converter. WARNING: The converter may not include the following edX fields: - context.org_id: When `org_id` is an empty string. - context.course_id: When `course_id` is an empty string. WARNING: The converter should not include the following edX fields as they may contain sensitive data: `username`, `referer`, `event`, `event_source`, `ip`, `agent`, `accept_language:`, `context.course_user_tags`. \"\"\" def __init__ ( self , uuid_namespace : str , platform_url : str ): \"\"\"Initializes BaseXapiConverter.\"\"\" self . platform_url = platform_url try : self . uuid_namespace = UUID ( uuid_namespace ) except ( TypeError , ValueError , AttributeError ) as err : raise ConfigurationException ( \"Invalid UUID namespace\" ) from err super () . __init__ () def _get_conversion_items ( self ): \"\"\"Returns a set of ConversionItems used for conversion.\"\"\" return { ConversionItem ( \"id\" , None , lambda event_str : str ( uuid5 ( self . uuid_namespace , event_str )), True , ), ConversionItem ( \"actor__account__homePage\" , transformers = lambda _ : self . platform_url ), ConversionItem ( \"actor__account__name\" , \"context__user_id\" , lambda user_id : str ( user_id ) if user_id else \"anonymous\" , ), ConversionItem ( \"object__definition__extensions__\" + EXTENSION_SCHOOL_ID , \"context__org_id\" , ), ConversionItem ( \"object__definition__extensions__\" + EXTENSION_COURSE_ID , \"context__course_id\" , ( self . parse_course_id , lambda x : x [ \"course\" ]), ), ConversionItem ( \"object__definition__extensions__\" + EXTENSION_MODULE_ID , \"context__course_id\" , ( self . parse_course_id , lambda x : x [ \"module\" ]), ), ConversionItem ( \"timestamp\" , \"time\" ), } @staticmethod def parse_course_id ( course_id : str ): \"\"\"Returns a dictionary with `course` and `module` of edX event's `context.course_id`. \"\"\" match = re . match ( r \"^course-v1:.+\\+(.+)\\+(.+)$\" , course_id ) if not match : return { \"course\" : None , \"module\" : None } return { \"course\" : match . group ( 1 ), \"module\" : match . group ( 2 )} __init__ ( self , uuid_namespace , platform_url ) special \u00b6 Initializes BaseXapiConverter. Source code in ralph/models/edx/converters/xapi/base.py def __init__ ( self , uuid_namespace : str , platform_url : str ): \"\"\"Initializes BaseXapiConverter.\"\"\" self . platform_url = platform_url try : self . uuid_namespace = UUID ( uuid_namespace ) except ( TypeError , ValueError , AttributeError ) as err : raise ConfigurationException ( \"Invalid UUID namespace\" ) from err super () . __init__ () parse_course_id ( course_id ) staticmethod \u00b6 Returns a dictionary with course and module of edX event\u2019s context.course_id . Source code in ralph/models/edx/converters/xapi/base.py @staticmethod def parse_course_id ( course_id : str ): \"\"\"Returns a dictionary with `course` and `module` of edX event's `context.course_id`. \"\"\" match = re . match ( r \"^course-v1:.+\\+(.+)\\+(.+)$\" , course_id ) if not match : return { \"course\" : None , \"module\" : None } return { \"course\" : match . group ( 1 ), \"module\" : match . group ( 2 )} navigational \u00b6 Navigational event xAPI Converter UIPageCloseToPageTerminated ( BaseXapiConverter ) \u00b6 Converts a common edX page_close event to xAPI. Example Statement: John terminated https://www.fun-mooc.fr/ page. WARNING: The converter does not use the self.platform_url in the object__id because the platform_url is present in the edX\u2019s event page field. Source code in ralph/models/edx/converters/xapi/navigational.py class UIPageCloseToPageTerminated ( BaseXapiConverter ): \"\"\"Converts a common edX `page_close` event to xAPI. Example Statement: John terminated https://www.fun-mooc.fr/ page. WARNING: The converter does not use the `self.platform_url` in the `object__id` because the `platform_url` is present in the edX's event `page` field. \"\"\" __src__ = UIPageClose __dest__ = PageTerminated def _get_conversion_items ( self ): \"\"\"Returns a set of ConversionItems used for conversion.\"\"\" conversion_items = super () . _get_conversion_items () return conversion_items . union ({ ConversionItem ( \"object__id\" , \"page\" )}) __dest__ ( BaseXapiModel ) pydantic-model \u00b6 Represents a page terminated xAPI statement. Example: John terminated the https://www.fun-mooc.fr/ page. Attributes: Name Type Description object PageObjectField See PageObjectField. verb PageTerminatedVerbField See PageTerminatedVerbField. Source code in ralph/models/edx/converters/xapi/navigational.py class PageTerminated ( BaseXapiModel ): \"\"\"Represents a page terminated xAPI statement. Example: John terminated the https://www.fun-mooc.fr/ page. Attributes: object (PageObjectField): See PageObjectField. verb (PageTerminatedVerbField): See PageTerminatedVerbField. \"\"\" __selector__ = selector ( object__definition__type = \"http://activitystrea.ms/schema/1.0/page\" , verb__id = \"http://adlnet.gov/expapi/verbs/terminated\" , ) object : PageObjectField verb : TerminatedVerbField = TerminatedVerbField () __src__ ( BaseBrowserModel ) pydantic-model \u00b6 Represents the page_close browser statement. This type of statement is triggered when the user navigates to the next page or closes the browser window (when the JavaScript window.onunload event is called). Attributes: Name Type Description event str Consists of the string value {} . event_type str Consists of the value page_close . name str Consists of the value page_close . Source code in ralph/models/edx/converters/xapi/navigational.py class UIPageClose ( BaseBrowserModel ): \"\"\"Represents the `page_close` browser statement. This type of statement is triggered when the user navigates to the next page or closes the browser window (when the JavaScript `window.onunload` event is called). Attributes: event (str): Consists of the string value `{}`. event_type (str): Consists of the value `page_close`. name (str): Consists of the value `page_close`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"page_close\" ) # pylint: disable=unsubscriptable-object event : Literal [ \" {} \" ] event_type : Literal [ \"page_close\" ] name : Literal [ \"page_close\" ] server \u00b6 Server event xAPI Converter ServerEventToPageViewed ( BaseXapiConverter ) \u00b6 Converts a common edX server event to xAPI. Example Statement: John viewed https://www.fun-mooc.fr/ page. Source code in ralph/models/edx/converters/xapi/server.py class ServerEventToPageViewed ( BaseXapiConverter ): \"\"\"Converts a common edX server event to xAPI. Example Statement: John viewed https://www.fun-mooc.fr/ page. \"\"\" __src__ = Server __dest__ = PageViewed def _get_conversion_items ( self ): \"\"\"Returns a set of ConversionItems used for conversion.\"\"\" conversion_items = super () . _get_conversion_items () return conversion_items . union ( { ConversionItem ( \"object__id\" , \"event_type\" , lambda event_type : self . platform_url + event_type , ), } ) __dest__ ( BaseXapiModel ) pydantic-model \u00b6 Represents a page viewed xAPI statement. Example: John viewed the https://www.fun-mooc.fr/ page. Attributes: Name Type Description object PageObjectField See PageObjectField. verb PageViewedVerbField See PageViewedVerbField. Source code in ralph/models/edx/converters/xapi/server.py class PageViewed ( BaseXapiModel ): \"\"\"Represents a page viewed xAPI statement. Example: John viewed the https://www.fun-mooc.fr/ page. Attributes: object (PageObjectField): See PageObjectField. verb (PageViewedVerbField): See PageViewedVerbField. \"\"\" __selector__ = selector ( object__definition__type = \"http://activitystrea.ms/schema/1.0/page\" , verb__id = \"http://id.tincanapi.com/verb/viewed\" , ) object : PageObjectField verb : ViewedVerbField = ViewedVerbField () __src__ ( BaseServerModel ) pydantic-model \u00b6 Represents a common server statement. This type of event is triggered from the django middleware on each request excluding: /event , login , heartbeat , /segmentio/event and /performance . Attributes: Name Type Description event_type str Consist of the relative URL (without the hostname) of the requested page. Retrieved with: request.META['PATH_INFO'] event str Consist of a JSON string holding the content of the GET or POST request. Retrieved with: json.dumps( { 'GET': dict(request.GET), 'POST': dict(request.POST) } )[:512] Note: Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019, \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by ******** . The JSON string is truncated at 512 characters resulting in invalid JSON. Source code in ralph/models/edx/converters/xapi/server.py class Server ( BaseServerModel ): \"\"\"Represents a common server statement. This type of event is triggered from the django middleware on each request excluding: `/event`, `login`, `heartbeat`, `/segmentio/event` and `/performance`. Attributes: event_type (str): Consist of the relative URL (without the hostname) of the requested page. Retrieved with: `request.META['PATH_INFO']` event (str): Consist of a JSON string holding the content of the GET or POST request. Retrieved with: ```json.dumps( { 'GET': dict(request.GET), 'POST': dict(request.POST) } )[:512]``` Note: Values for ['password', 'newpassword', 'new_password', 'oldpassword', 'old_password', 'new_password1', 'new_password2'] are replaced by `********`. The JSON string is truncated at 512 characters resulting in invalid JSON. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = LazyModelField ( \"context__path\" ) ) # pylint: disable=unsubscriptable-object event_type : Path event : Union [ Json [ ServerEventField ], ServerEventField ] enrollment special \u00b6 fields special \u00b6 contexts \u00b6 Enrollment event models context fields definitions EdxCourseEnrollmentUpgradeClickedContextField ( BaseContextField ) pydantic-model \u00b6 Represents the context field of the edx.course.enrollment.upgrade_clicked server statement. In addition to the common context member fields, this statement also comprises the mode context member field. Attributes: Name Type Description mode str Consists of either the audit or honor value. It identifies the enrollment mode when the user clicked Challenge Yourself . Source code in ralph/models/edx/enrollment/fields/contexts.py class EdxCourseEnrollmentUpgradeClickedContextField ( BaseContextField ): \"\"\"Represents the `context` field of the `edx.course.enrollment.upgrade_clicked` server statement. In addition to the common context member fields, this statement also comprises the `mode` context member field. Attributes: mode (str): Consists of either the `audit` or `honor` value. It identifies the enrollment mode when the user clicked <kbd>Challenge Yourself</kbd>. \"\"\" mode : Union [ Literal [ \"audit\" ], Literal [ \"honor\" ]] EdxCourseEnrollmentUpgradeSucceededContextField ( BaseContextField ) pydantic-model \u00b6 Represents the context field of the edx.course.enrollment.upgrade.succeeded server statement. In addition to the common context member fields, this statement also comprises the mode context member field. Attributes: Name Type Description mode str Consists of the verified value. Source code in ralph/models/edx/enrollment/fields/contexts.py class EdxCourseEnrollmentUpgradeSucceededContextField ( BaseContextField ): \"\"\"Represents the `context` field of the `edx.course.enrollment.upgrade.succeeded` server statement. In addition to the common context member fields, this statement also comprises the `mode` context member field. Attributes: mode (str): Consists of the `verified` value. \"\"\" mode : Literal [ \"verified\" ] events \u00b6 Enrollment models event field definition EnrollmentEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field for enrollment statements. Note: Only server enrollment statements require an event field. Attributes: Name Type Description course_id str Consists in the course in which the student was enrolled or unenrolled. mode str Takes either audit , honor , professional or verified value. It identifies the student\u2019s enrollment mode. user_id int Identifies the student who was enrolled or unenrolled. Source code in ralph/models/edx/enrollment/fields/events.py class EnrollmentEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field for enrollment statements. Note: Only server enrollment statements require an `event` field. Attributes: course_id (str): Consists in the course in which the student was enrolled or unenrolled. mode (str): Takes either `audit`, `honor`, `professional` or `verified` value. It identifies the student\u2019s enrollment mode. user_id (int): Identifies the student who was enrolled or unenrolled. \"\"\" course_id : str mode : Union [ Literal [ \"audit\" ], Literal [ \"honor\" ], Literal [ \"professional\" ], Literal [ \"verified\" ] ] user_id : Union [ int , Literal [ \"\" ], None ] statements \u00b6 Enrollment event model definitions EdxCourseEnrollmentActivated ( BaseServerModel ) pydantic-model \u00b6 Represents the edx.course.enrollment.activated server statement. The server emits it when a student enrolls in a course. Attributes: Name Type Description event EnrollmentEventField See EnrollmentEventField. event_type str Consists of the value edx.course.enrollment.activated . name str Consists of the value edx.course.enrollment.activated . Source code in ralph/models/edx/enrollment/statements.py class EdxCourseEnrollmentActivated ( BaseServerModel ): \"\"\"Represents the `edx.course.enrollment.activated` server statement. The server emits it when a student enrolls in a course. Attributes: event (EnrollmentEventField): See EnrollmentEventField. event_type (str): Consists of the value `edx.course.enrollment.activated`. name (str): Consists of the value `edx.course.enrollment.activated`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"edx.course.enrollment.activated\" ) event : Union [ Json [ EnrollmentEventField ], # pylint: disable=unsubscriptable-object EnrollmentEventField , ] event_type : Literal [ \"edx.course.enrollment.activated\" ] name : Literal [ \"edx.course.enrollment.activated\" ] EdxCourseEnrollmentDeactivated ( BaseServerModel ) pydantic-model \u00b6 Represents the edx.course.enrollment.deactivated server statement. The server emits it when a student unenrolls from a course. Attributes: Name Type Description event EnrollmentEventField See EnrollmentEventField. event_type str Consists of the value edx.course.enrollment.deactivated . name str Consists of the value edx.course.enrollment.deactivated . Source code in ralph/models/edx/enrollment/statements.py class EdxCourseEnrollmentDeactivated ( BaseServerModel ): \"\"\"Represents the `edx.course.enrollment.deactivated` server statement. The server emits it when a student unenrolls from a course. Attributes: event (EnrollmentEventField): See EnrollmentEventField. event_type (str): Consists of the value `edx.course.enrollment.deactivated`. name (str): Consists of the value `edx.course.enrollment.deactivated`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"edx.course.enrollment.deactivated\" ) event : Union [ Json [ EnrollmentEventField ], # pylint: disable=unsubscriptable-object EnrollmentEventField , ] event_type : Literal [ \"edx.course.enrollment.deactivated\" ] name : Literal [ \"edx.course.enrollment.deactivated\" ] EdxCourseEnrollmentModeChanged ( BaseServerModel ) pydantic-model \u00b6 Represents the edx.course.enrollment.mode_changed server statement. The server emits it when the process of changing a student\u2019s student_courseenrollment.mode to a different mode is complete. Attributes: Name Type Description event EnrollmentEventField See EnrollmentEventField. event_type str Consists of the value edx.course.enrollment.mode_changed . name str Consists of the value edx.course.enrollment.mode_changed . Source code in ralph/models/edx/enrollment/statements.py class EdxCourseEnrollmentModeChanged ( BaseServerModel ): \"\"\"Represents the `edx.course.enrollment.mode_changed` server statement. The server emits it when the process of changing a student\u2019s student_courseenrollment.mode to a different mode is complete. Attributes: event (EnrollmentEventField): See EnrollmentEventField. event_type (str): Consists of the value `edx.course.enrollment.mode_changed`. name (str): Consists of the value `edx.course.enrollment.mode_changed`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"edx.course.enrollment.mode_changed\" ) event : Union [ Json [ EnrollmentEventField ], # pylint: disable=unsubscriptable-object EnrollmentEventField , ] event_type : Literal [ \"edx.course.enrollment.mode_changed\" ] name : Literal [ \"edx.course.enrollment.mode_changed\" ] EdxCourseEnrollmentUpgradeSucceeded ( BaseServerModel ) pydantic-model \u00b6 Represents the edx.course.enrollment.upgrade.succeeded server statement. The server emits it when the process of upgrading a student\u2019s student_courseenrollment.mode from audit or honor to verified is complete. Attributes: Name Type Description context EdxCourseEnrollmentUpgradeSucceededContextField See EdxCourseEnrollmentUpgradeSucceededContextField. event_type str Consists of the value edx.course.enrollment.upgrade.succeeded . name str Consists of the value edx.course.enrollment.upgrade.succeeded . Source code in ralph/models/edx/enrollment/statements.py class EdxCourseEnrollmentUpgradeSucceeded ( BaseServerModel ): \"\"\"Represents the `edx.course.enrollment.upgrade.succeeded` server statement. The server emits it when the process of upgrading a student\u2019s student_courseenrollment.mode from `audit` or `honor` to `verified` is complete. Attributes: context (EdxCourseEnrollmentUpgradeSucceededContextField): See EdxCourseEnrollmentUpgradeSucceededContextField. event_type (str): Consists of the value `edx.course.enrollment.upgrade.succeeded`. name (str): Consists of the value `edx.course.enrollment.upgrade.succeeded`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"edx.course.enrollment.upgrade.succeeded\" ) context : EdxCourseEnrollmentUpgradeSucceededContextField event_type : Literal [ \"edx.course.enrollment.upgrade.succeeded\" ] name : Literal [ \"edx.course.enrollment.upgrade.succeeded\" ] UIEdxCourseEnrollmentUpgradeClicked ( BaseBrowserModel ) pydantic-model \u00b6 Represents the edx.course.enrollment.upgrade_clicked browser statement. The browser emits it when a student clicks ChallengeYourself option, and the process of upgrading the student_courseenrollment.mode for the student to verified begins. Attributes: Name Type Description context EdxCourseEnrollmentUpgradeClickedContextField See EdxCourseEnrollmentUpgradeClickedContextField. event_type str Consists of the value edx.course.enrollment.upgrade_clicked . name str Consists of the value edx.course.enrollment.upgrade_clicked . Source code in ralph/models/edx/enrollment/statements.py class UIEdxCourseEnrollmentUpgradeClicked ( BaseBrowserModel ): \"\"\"Represents the `edx.course.enrollment.upgrade_clicked` browser statement. The browser emits it when a student clicks <kbd>ChallengeYourself</kbd> option, and the process of upgrading the student_courseenrollment.mode for the student to `verified` begins. Attributes: context (EdxCourseEnrollmentUpgradeClickedContextField): See EdxCourseEnrollmentUpgradeClickedContextField. event_type (str): Consists of the value `edx.course.enrollment.upgrade_clicked`. name (str): Consists of the value `edx.course.enrollment.upgrade_clicked`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"edx.course.enrollment.upgrade_clicked\" ) context : EdxCourseEnrollmentUpgradeClickedContextField event_type : Literal [ \"edx.course.enrollment.upgrade_clicked\" ] name : Literal [ \"edx.course.enrollment.upgrade_clicked\" ] navigational special \u00b6 fields special \u00b6 events \u00b6 Navigational event field definition NavigationalEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of navigational statements. Note: All navigational statements are emitted from the browser. Attributes: Name Type Description id str Consists of the edX ID of the sequence. old int For seq_goto , it consists of the index of the unit being jumped to. For seq_next and seq_prev , it consists of the index of the unit being navigated to. new int For seq_goto , it consists of the index of the unit being jumped from. For seq_next and seq_prev , it consists of the index of the unit being navigated away from. Source code in ralph/models/edx/navigational/fields/events.py class NavigationalEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of navigational statements. Note: All navigational statements are emitted from the browser. Attributes: id (str): Consists of the edX ID of the sequence. old (int): For `seq_goto`, it consists of the index of the unit being jumped to. For `seq_next` and `seq_prev`, it consists of the index of the unit being navigated to. new (int): For `seq_goto`, it consists of the index of the unit being jumped from. For `seq_next` and `seq_prev`, it consists of the index of the unit being navigated away from. \"\"\" id : constr ( regex = ( r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type\" # noqa : F722 r \"@sequential\\+block@[a-f0-9] {32} $\" # noqa : F722 ) ) new : int old : int statements \u00b6 Navigational event model definitions UIPageClose ( BaseBrowserModel ) pydantic-model \u00b6 Represents the page_close browser statement. This type of statement is triggered when the user navigates to the next page or closes the browser window (when the JavaScript window.onunload event is called). Attributes: Name Type Description event str Consists of the string value {} . event_type str Consists of the value page_close . name str Consists of the value page_close . Source code in ralph/models/edx/navigational/statements.py class UIPageClose ( BaseBrowserModel ): \"\"\"Represents the `page_close` browser statement. This type of statement is triggered when the user navigates to the next page or closes the browser window (when the JavaScript `window.onunload` event is called). Attributes: event (str): Consists of the string value `{}`. event_type (str): Consists of the value `page_close`. name (str): Consists of the value `page_close`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"page_close\" ) # pylint: disable=unsubscriptable-object event : Literal [ \" {} \" ] event_type : Literal [ \"page_close\" ] name : Literal [ \"page_close\" ] UISeqGoto ( BaseBrowserModel ) pydantic-model \u00b6 Represents the seq_goto browser statement. The browser emits such statement when a user selects a navigational control. seq_goto is emitted when a user jumps between units in a sequence. Attributes: Name Type Description event obj Consists of member fields that identify specifics triggered event. event_type str Consists of the value seq_goto . name str Consists of the value seq_goto . Source code in ralph/models/edx/navigational/statements.py class UISeqGoto ( BaseBrowserModel ): \"\"\"Represents the `seq_goto` browser statement. The browser emits such statement when a user selects a navigational control. `seq_goto` is emitted when a user jumps between units in a sequence. Attributes: event (obj): Consists of member fields that identify specifics triggered event. event_type (str): Consists of the value `seq_goto`. name (str): Consists of the value `seq_goto`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"seq_goto\" ) # pylint: disable=unsubscriptable-object event : Union [ Json [ NavigationalEventField ], NavigationalEventField ] event_type : Literal [ \"seq_goto\" ] name : Literal [ \"seq_goto\" ] UISeqNext ( BaseBrowserModel ) pydantic-model \u00b6 Represents the seq_next browser statement. The browser emits such statement when a user selects a navigational control. seq_next is emitted when a user navigates to the next unit in a sequence. Attributes: Name Type Description event obj Consists of member fields that identify specifics triggered event. event_type str Consists of the value seq_next . name str Consists of the value seq_next . Source code in ralph/models/edx/navigational/statements.py class UISeqNext ( BaseBrowserModel ): \"\"\"Represents the `seq_next` browser statement. The browser emits such statement when a user selects a navigational control. `seq_next` is emitted when a user navigates to the next unit in a sequence. Attributes: event (obj): Consists of member fields that identify specifics triggered event. event_type (str): Consists of the value `seq_next`. name (str): Consists of the value `seq_next`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"seq_next\" ) # pylint: disable=unsubscriptable-object event : Union [ Json [ NavigationalEventField ], NavigationalEventField ] event_type : Literal [ \"seq_next\" ] name : Literal [ \"seq_next\" ] @validator ( \"event\" ) @classmethod def validate_next_jump_event_field ( cls , value ): \"\"\"Checks that event.new is equal to event.old + 1.\"\"\" if value . new != value . old + 1 : raise ValueError ( \"event.new - event.old should be equal to 1\" ) return value validate_next_jump_event_field ( value ) classmethod \u00b6 Checks that event.new is equal to event.old + 1. Source code in ralph/models/edx/navigational/statements.py @validator ( \"event\" ) @classmethod def validate_next_jump_event_field ( cls , value ): \"\"\"Checks that event.new is equal to event.old + 1.\"\"\" if value . new != value . old + 1 : raise ValueError ( \"event.new - event.old should be equal to 1\" ) return value UISeqPrev ( BaseBrowserModel ) pydantic-model \u00b6 Represents the seq_prev browser statement. The browser emits such statement when a user selects a navigational control. seq_prev is emitted when a user navigates to the previous unit in a sequence. Attributes: Name Type Description event obj Consists of member fields that identify specifics triggered event. event_type str Consists of the value seq_prev . name str Consists of the value seq_prev . Source code in ralph/models/edx/navigational/statements.py class UISeqPrev ( BaseBrowserModel ): \"\"\"Represents the `seq_prev` browser statement. The browser emits such statement when a user selects a navigational control. `seq_prev` is emitted when a user navigates to the previous unit in a sequence. Attributes: event (obj): Consists of member fields that identify specifics triggered event. event_type (str): Consists of the value `seq_prev`. name (str): Consists of the value `seq_prev`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"seq_prev\" ) # pylint: disable=unsubscriptable-object event : Union [ Json [ NavigationalEventField ], NavigationalEventField ] event_type : Literal [ \"seq_prev\" ] name : Literal [ \"seq_prev\" ] @validator ( \"event\" ) @classmethod def validate_prev_jump_event_field ( cls , value ): \"\"\"Checks that event.new is equal to event.old - 1.\"\"\" if value . new != value . old - 1 : raise ValueError ( \"event.old - event.new should be equal to 1\" ) return value validate_prev_jump_event_field ( value ) classmethod \u00b6 Checks that event.new is equal to event.old - 1. Source code in ralph/models/edx/navigational/statements.py @validator ( \"event\" ) @classmethod def validate_prev_jump_event_field ( cls , value ): \"\"\"Checks that event.new is equal to event.old - 1.\"\"\" if value . new != value . old - 1 : raise ValueError ( \"event.old - event.new should be equal to 1\" ) return value problem_interaction special \u00b6 fields special \u00b6 events \u00b6 Problem interaction events model event fields definitions CorrectMap ( BaseModelWithConfig ) pydantic-model \u00b6 Represents the correct_map sub-field. Attributes: Name Type Description answervariable str Consists of the variable chosen in answer in the case of optionresponse provided with variables. correctness str Consists either of the correct or incorrect value. hint str Consists of optional hint. hint_mode str Consists either of the value on_request or always value. msg str Consists of extra message response. npoints int Consists of awarded points. queuestate json see QueueStateField. Source code in ralph/models/edx/problem_interaction/fields/events.py class CorrectMap ( BaseModelWithConfig ): \"\"\"Represents the `correct_map` sub-field. Attributes: answervariable (str): Consists of the variable chosen in answer in the case of optionresponse provided with variables. correctness (str): Consists either of the `correct` or `incorrect` value. hint (str): Consists of optional hint. hint_mode (str): Consists either of the value `on_request` or `always` value. msg (str): Consists of extra message response. npoints (int): Consists of awarded points. queuestate (json): see QueueStateField. \"\"\" answervariable : Union [ Literal [ None ], None , str ] correctness : Union [ Literal [ \"correct\" ], Literal [ \"incorrect\" ]] hint : Optional [ str ] hintmode : Optional [ Union [ Literal [ \"on_request\" ], Literal [ \"always\" ]]] msg : str npoints : Optional [ int ] queuestate : Optional [ QueueState ] EdxProblemHintDemandhintDisplayedEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of EdxProblemHintDemandhintDisplayed model. Attributes: Name Type Description hint_index int Consists of the identifier for the hint that was displayed to the user. hint_len int Consists of the total number of hints defined for this problem. hint_text str Consists of the text of the hint that was displayed to the user. module_id str Consists of the identifier for the problem component for which the user requested the hint. Source code in ralph/models/edx/problem_interaction/fields/events.py class EdxProblemHintDemandhintDisplayedEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `EdxProblemHintDemandhintDisplayed` model. Attributes: hint_index (int): Consists of the identifier for the hint that was displayed to the user. hint_len (int): Consists of the total number of hints defined for this problem. hint_text (str): Consists of the text of the hint that was displayed to the user. module_id (str): Consists of the identifier for the problem component for which the user requested the hint. \"\"\" hint_index : int hint_len : int hint_text : str module_id : str EdxProblemHintFeedbackDisplayedEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of EdxProblemHintFeedbackDisplayed model. Attributes: Name Type Description choice_all list Lists all of the answer choices for problems with multiple possible answers defined. correctness bool True if the student_answer value is correct, else False . hint_label str Consists of the feedback message given for the answer correctness. hints list Consists of a text member field with the given feedback string. module_id str Consists of the identifier for the problem component for which the user received the feedback. problem_part_id str Consists of the specific problem for which the user received feedback. question_type str Consists of the XML tag that identifies the problem type. student_answer list Consists of the answer value(s) selected or supplied by the user. trigger_type str Identifies the type of feedback obtained by the student_answer response. Consists either of single or compound value. Source code in ralph/models/edx/problem_interaction/fields/events.py class EdxProblemHintFeedbackDisplayedEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `EdxProblemHintFeedbackDisplayed` model. Attributes: choice_all (list): Lists all of the answer choices for problems with multiple possible answers defined. correctness (bool): `True` if the `student_answer` value is correct, else `False`. hint_label (str): Consists of the feedback message given for the answer correctness. hints (list): Consists of a text member field with the given feedback string. module_id (str): Consists of the identifier for the problem component for which the user received the feedback. problem_part_id (str): Consists of the specific problem for which the user received feedback. question_type (str): Consists of the XML tag that identifies the problem type. student_answer (list): Consists of the answer value(s) selected or supplied by the user. trigger_type (str): Identifies the type of feedback obtained by the `student_answer` response. Consists either of `single` or `compound` value. \"\"\" choice_all : Optional [ list [ str ]] correctness : bool hint_label : str hints : list [ dict ] module_id : str problem_part_id : str question_type : Union [ Literal [ \"stringresponse\" ], Literal [ \"choiceresponse\" ], Literal [ \"multiplechoiceresponse\" ], Literal [ \"numericalresponse\" ], Literal [ \"optionresponse\" ], ] student_answer : list [ str ] trigger_type : Union [ Literal [ \"single\" ], Literal [ \"compound\" ]] ProblemCheckEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of ProblemCheck model. Attributes: Name Type Description answers dict Consists of a dictionary of problem ID and the corresponding internal answer identifier for each problem. attempts int Consists of the number of times the user attempted to answer the problem. correct_map dict Consists of the evaluation data for each answer. grade int Consists of the current grade value. max_grade int Consists of the maximum possible grade value. problem_id str Consists of the ID of the problem that was checked. state json Consists of the current problem state. submission dict Consists of a dictionnary of data about the given answer. success str Consists of either the correct or incorrect value. Source code in ralph/models/edx/problem_interaction/fields/events.py class ProblemCheckEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ProblemCheck` model. Attributes: answers (dict): Consists of a dictionary of problem ID and the corresponding internal answer identifier for each problem. attempts (int): Consists of the number of times the user attempted to answer the problem. correct_map (dict): Consists of the evaluation data for each answer. grade (int): Consists of the current grade value. max_grade (int): Consists of the maximum possible grade value. problem_id (str): Consists of the ID of the problem that was checked. state (json): Consists of the current problem state. submission (dict): Consists of a dictionnary of data about the given answer. success (str): Consists of either the `correct` or `incorrect` value. \"\"\" answers : dict [ constr ( regex = r \"^[a-f0-9] {32} _[0-9]_[0-9]$\" ), # noqa : F722 Union [ list [ str ], str ], ] attempts : int correct_map : dict [ constr ( regex = r \"^[a-f0-9] {32} _[0-9]_[0-9]$\" ), # noqa : F722 CorrectMap , ] grade : int max_grade : int problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) state : State submission : dict [ constr ( regex = r \"^[a-f0-9] {32} _[0-9]_[0-9]$\" ), # noqa : F722 SubmissionAnswerField , ] success : Union [ Literal [ \"correct\" ], Literal [ \"incorrect\" ]] ProblemCheckFailEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of ProblemCheckFail model. Attributes: Name Type Description answers dict Consists of a dictionary of problem ID and the internal answer identifier for each problem. failure str Consists either of the closed or unreset value. problem_id str Consists of the ID of the problem that was checked. state dict Consists of the current problem state. Source code in ralph/models/edx/problem_interaction/fields/events.py class ProblemCheckFailEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ProblemCheckFail` model. Attributes: answers (dict): Consists of a dictionary of problem ID and the internal answer identifier for each problem. failure (str): Consists either of the `closed` or `unreset` value. problem_id (str): Consists of the ID of the problem that was checked. state (dict): Consists of the current problem state. \"\"\" answers : dict [ constr ( regex = r \"^[a-f0-9] {32} _[0-9]_[0-9]$\" ), # noqa : F722 Union [ list [ str ], str ], ] failure : Union [ Literal [ \"closed\" ], Literal [ \"unreset\" ]] problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) state : State ProblemRescoreEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of ProblemRescore model. Attributes: Name Type Description attempts int Consists of the number of attempts of rescoring. correct_map json see CorrectMapSubFields. new_score int Consists of the new score obtained after rescoring. new_total int Consists of the new total summed after rescoring. orig_score int Consists of the original scored before rescoring. problem_id str Consists of the ID of the problem being rescored. state json see StateField. success str Consists either of the correct or incorrect value. Source code in ralph/models/edx/problem_interaction/fields/events.py class ProblemRescoreEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ProblemRescore` model. Attributes: attempts (int): Consists of the number of attempts of rescoring. correct_map (json): see CorrectMapSubFields. new_score (int): Consists of the new score obtained after rescoring. new_total (int): Consists of the new total summed after rescoring. orig_score (int): Consists of the original scored before rescoring. problem_id (str): Consists of the ID of the problem being rescored. state (json): see StateField. success (str): Consists either of the `correct` or `incorrect` value. \"\"\" attempts : int correct_map : CorrectMap new_score : int new_total : int orig_score : int orig_total : int problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) state : State success : Union [ Literal [ \"correct\" ], Literal [ \"incorrect\" ]] ProblemRescoreFailEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of ProblemRescoreFail model. Attributes: Name Type Description failure str Consists either of the closed or unreset value. problem_id str Consists of the ID of the problem being checked. state json see StateField. Source code in ralph/models/edx/problem_interaction/fields/events.py class ProblemRescoreFailEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ProblemRescoreFail` model. Attributes: failure (str): Consists either of the `closed` or `unreset` value. problem_id (str): Consists of the ID of the problem being checked. state (json): see StateField. \"\"\" failure : Union [ Literal [ \"closed\" ], Literal [ \"unreset\" ]] problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) state : State QueueState ( BaseModelWithConfig ) pydantic-model \u00b6 Represents the queuestate sub-field. Attributes: Name Type Description key str Consists of a secret string. time str Consists of a string dump of a DateTime object in the format \u2018%Y%m%d%H%M%S\u2019. Source code in ralph/models/edx/problem_interaction/fields/events.py class QueueState ( BaseModelWithConfig ): \"\"\"Represents the `queuestate` sub-field. Attributes: key (str): Consists of a secret string. time (str): Consists of a string dump of a DateTime object in the format '%Y%m%d%H%M%S'. \"\"\" key : str time : datetime ResetProblemEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of ResetProblem model. Attributes: Name Type Description new_state json see StateField. old_state json see StateField. problem_id str Consists of the ID of the problem being reset. Source code in ralph/models/edx/problem_interaction/fields/events.py class ResetProblemEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ResetProblem` model. Attributes: new_state (json): see StateField. old_state (json): see StateField. problem_id (str): Consists of the ID of the problem being reset. \"\"\" new_state : State old_state : State problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) ResetProblemFailEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of ResetProblemFail model. Attributes: Name Type Description failure str Consists either of closed or not_done value. old_state json see StateField. problem_id str Consists of the ID of the problem being reset. Source code in ralph/models/edx/problem_interaction/fields/events.py class ResetProblemFailEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ResetProblemFail` model. Attributes: failure (str): Consists either of `closed` or `not_done` value. old_state (json): see StateField. problem_id (str): Consists of the ID of the problem being reset. \"\"\" failure : Union [ Literal [ \"closed\" ], Literal [ \"not_done\" ]] old_state : State problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) SaveProblemFailEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of SaveProblemFail model. Attributes: Name Type Description answers dict Consists of a dict of the answer string or a list or a dict of the answer strings if multiple choices are allowed. failure str Consists either of closed or done value. problem_id str Consists of the ID of the problem being saved. state json see StateField. Source code in ralph/models/edx/problem_interaction/fields/events.py class SaveProblemFailEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `SaveProblemFail` model. Attributes: answers (dict): Consists of a dict of the answer string or a list or a dict of the answer strings if multiple choices are allowed. failure (str): Consists either of `closed` or `done` value. problem_id (str): Consists of the ID of the problem being saved. state (json): see StateField. \"\"\" answers : dict [ str , Union [ int , str , list , dict ]] failure : Union [ Literal [ \"closed\" ], Literal [ \"done\" ]] problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) state : State SaveProblemSuccessEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of SaveProblemSuccess model. Attributes: Name Type Description answers dict Consists of a dict of the answer string or a list or a dict of the answer strings if multiple choices are allowed. problem_id str Consists of the ID of the problem being saved. state json see StateField. Source code in ralph/models/edx/problem_interaction/fields/events.py class SaveProblemSuccessEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `SaveProblemSuccess` model. Attributes: answers (dict): Consists of a dict of the answer string or a list or a dict of the answer strings if multiple choices are allowed. problem_id (str): Consists of the ID of the problem being saved. state (json): see StateField. \"\"\" answers : dict [ str , Union [ int , str , list , dict ]] problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) state : State ShowAnswerEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of ShowAnswer model. Attributes: Name Type Description problem_id str Consists of the ID of the problem being shown. Source code in ralph/models/edx/problem_interaction/fields/events.py class ShowAnswerEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ShowAnswer` model. Attributes: problem_id (str): Consists of the ID of the problem being shown. \"\"\" problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) State ( BaseModelWithConfig ) pydantic-model \u00b6 Represents the state sub-field. Attributes: Name Type Description correct_map dict see CorrectMapSubFields. done bool True if the problem is answered, else False . input_state dict Consists of the state field given before answering. seed int Consists of the seed element for the current state. student_answers dict Consists of the answer(s) given by the user. Source code in ralph/models/edx/problem_interaction/fields/events.py class State ( BaseModelWithConfig ): \"\"\"Represents the `state` sub-field. Attributes: correct_map (dict): see CorrectMapSubFields. done (bool): `True` if the problem is answered, else `False`. input_state (dict): Consists of the state field given before answering. seed (int): Consists of the seed element for the current state. student_answers (dict): Consists of the answer(s) given by the user. \"\"\" correct_map : dict [ constr ( regex = r \"^[a-f0-9] {32} _[0-9]_[0-9]$\" ), # noqa : F722 CorrectMap , ] done : Optional [ bool ] input_state : dict seed : int student_answers : dict SubmissionAnswerField ( BaseModelWithConfig ) pydantic-model \u00b6 Represents the information in a problem of submission field. Attributes: Name Type Description answer str, list Consists of the answer string or a list of the answer strings if multiple choices are allorwed. correct bool True if the answer value is correct, else False . input_type str Consists of the type of value that the student supplies for the response_type . question str Consists of the question text. response_type str Consists of the type of problem. variant str Consists of the unique ID of the variant that was presented to this user. Source code in ralph/models/edx/problem_interaction/fields/events.py class SubmissionAnswerField ( BaseModelWithConfig ): \"\"\"Represents the information in a problem of `submission` field. Attributes: answer (str, list): Consists of the answer string or a list of the answer strings if multiple choices are allorwed. correct (bool): `True` if the `answer` value is correct, else `False`. input_type (str): Consists of the type of value that the student supplies for the `response_type`. question (str): Consists of the question text. response_type (str): Consists of the type of problem. variant (str): Consists of the unique ID of the variant that was presented to this user. \"\"\" answer : Union [ str , list [ str ]] correct : bool input_type : str question : str response_type : str variant : str UIProblemResetEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of ProblemReset model. Attributes: Name Type Description answers str, list Consists of the answer string or a list of the answer strings if multiple choices are allowed. Source code in ralph/models/edx/problem_interaction/fields/events.py class UIProblemResetEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ProblemReset` model. Attributes: answers (str, list): Consists of the answer string or a list of the answer strings if multiple choices are allowed. \"\"\" answers : Union [ str , list [ str ]] UIProblemShowEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of ProblemShow model. Attributes: Name Type Description problem str Consists of the optional name value that the course creators supply or the system-generated hash code for the problem being shown. Source code in ralph/models/edx/problem_interaction/fields/events.py class UIProblemShowEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ProblemShow` model. Attributes: problem (str): Consists of the optional name value that the course creators supply or the system-generated hash code for the problem being shown. \"\"\" problem : str statements \u00b6 Problem interaction events model definitions EdxProblemHintDemandhintDisplayed ( BaseServerModel ) pydantic-model \u00b6 Represents the edx.problem.hint.demandhint_displayed server event. This event is triggered when a user requests a hint for a problem. Attributes: Name Type Description event dict See EdxProblemHintDemandhintDisplayedEventField. event_type str Consists of the value edx.problem.hint.demandhint_displayed . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class EdxProblemHintDemandhintDisplayed ( BaseServerModel ): \"\"\"Represents the `edx.problem.hint.demandhint_displayed` server event. This event is triggered when a user requests a hint for a problem. Attributes: event (dict): See EdxProblemHintDemandhintDisplayedEventField. event_type (str): Consists of the value `edx.problem.hint.demandhint_displayed`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"edx.problem.hint.demandhint_displayed\" ) event : EdxProblemHintDemandhintDisplayedEventField event_type : Literal [ \"edx.problem.hint.demandhint_displayed\" ] page : Literal [ \"x_module\" ] EdxProblemHintFeedbackDisplayed ( BaseServerModel ) pydantic-model \u00b6 Represents the edx.problem.hint.feedback_displayed server event. This event is triggered when a user receives a hint after answering a problem. Attributes: Name Type Description event dict See EdxProblemHintFeedbackDisplayedEventField. event_type str Consists of the value edx.problem.hint.feedback_displayed . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class EdxProblemHintFeedbackDisplayed ( BaseServerModel ): \"\"\"Represents the `edx.problem.hint.feedback_displayed` server event. This event is triggered when a user receives a hint after answering a problem. Attributes: event (dict): See EdxProblemHintFeedbackDisplayedEventField. event_type (str): Consists of the value `edx.problem.hint.feedback_displayed`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"edx.problem.hint.feedback_displayed\" ) event : EdxProblemHintFeedbackDisplayedEventField event_type : Literal [ \"edx.problem.hint.feedback_displayed\" ] page : Literal [ \"x_module\" ] ProblemCheck ( BaseServerModel ) pydantic-model \u00b6 Represents the problem_check server event. This event is triggered when a user checks a problem. Attributes: Name Type Description event dict See ProblemCheckEventField. event_type str Consists of the value problem_check . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ProblemCheck ( BaseServerModel ): \"\"\"Represents the `problem_check` server event. This event is triggered when a user checks a problem. Attributes: event (dict): See ProblemCheckEventField. event_type (str): Consists of the value `problem_check`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"problem_check\" ) event : ProblemCheckEventField event_type : Literal [ \"problem_check\" ] page : Literal [ \"x_module\" ] ProblemCheckFail ( BaseServerModel ) pydantic-model \u00b6 Represents the problem_check_fail server event. This event is triggered when a user checks a problem and a failure prevents the problem from being checked successfully. Attributes: Name Type Description event dict See ProblemCheckFailEventField. event_type str Consists of the value problem_check_fail . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ProblemCheckFail ( BaseServerModel ): \"\"\"Represents the `problem_check_fail` server event. This event is triggered when a user checks a problem and a failure prevents the problem from being checked successfully. Attributes: event (dict): See ProblemCheckFailEventField. event_type (str): Consists of the value `problem_check_fail`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"problem_check_fail\" ) event : ProblemCheckFailEventField event_type : Literal [ \"problem_check_fail\" ] page : Literal [ \"x_module\" ] ProblemRescore ( BaseServerModel ) pydantic-model \u00b6 Represents the problem_rescore server event. Attributes: Name Type Description event dict See ProblemRescoreEventField. event_type str Consists of the value problem_rescore . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ProblemRescore ( BaseServerModel ): \"\"\"Represents the `problem_rescore` server event. Attributes: event (dict): See ProblemRescoreEventField. event_type (str): Consists of the value `problem_rescore`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"problem_rescore\" ) event : ProblemRescoreEventField event_type : Literal [ \"problem_rescore\" ] page : Literal [ \"x_module\" ] ProblemRescoreFail ( BaseServerModel ) pydantic-model \u00b6 Represents the problem_rescore_fail server event. Attributes: Name Type Description event dict See ProblemRescoreFailEventField. event_type str Consists of the value problem_rescore_fail . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ProblemRescoreFail ( BaseServerModel ): \"\"\"Represents the `problem_rescore_fail` server event. Attributes: event (dict): See ProblemRescoreFailEventField. event_type (str): Consists of the value `problem_rescore_fail`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"problem_rescore_fail\" ) event : ProblemRescoreFailEventField event_type : Literal [ \"problem_rescore_fail\" ] page : Literal [ \"x_module\" ] ResetProblem ( BaseServerModel ) pydantic-model \u00b6 Represents the reset_problem server event. Attributes: Name Type Description event dict See ResetProblemEventField. event_type str Consists of the value reset_problem . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ResetProblem ( BaseServerModel ): \"\"\"Represents the `reset_problem` server event. Attributes: event (dict): See ResetProblemEventField. event_type (str): Consists of the value `reset_problem`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"reset_problem\" ) event : ResetProblemEventField event_type : Literal [ \"reset_problem\" ] page : Literal [ \"x_module\" ] ResetProblemFail ( BaseServerModel ) pydantic-model \u00b6 Represents the reset_problem_fail server event. Attributes: Name Type Description event dict See ResetProblemFailEventField. event_type str Consists of the value reset_problem_fail . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ResetProblemFail ( BaseServerModel ): \"\"\"Represents the `reset_problem_fail` server event. Attributes: event (dict): See ResetProblemFailEventField. event_type (str): Consists of the value `reset_problem_fail`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"reset_problem_fail\" ) event : ResetProblemFailEventField event_type : Literal [ \"reset_problem_fail\" ] page : Literal [ \"x_module\" ] SaveProblemFail ( BaseServerModel ) pydantic-model \u00b6 Represents the save_problem_fail server event. Attributes: Name Type Description event dict See SaveProblemFailEventField. event_type str Consists of the value save_problem_fail . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class SaveProblemFail ( BaseServerModel ): \"\"\"Represents the `save_problem_fail` server event. Attributes: event (dict): See SaveProblemFailEventField. event_type (str): Consists of the value `save_problem_fail`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"save_problem_fail\" ) event : SaveProblemFailEventField event_type : Literal [ \"save_problem_fail\" ] page : Literal [ \"x_module\" ] SaveProblemSuccess ( BaseServerModel ) pydantic-model \u00b6 Represents the save_problem_success server event. Attributes: Name Type Description event dict See SaveProblemSuccessEventField. event_type str Consists of the value save_problem_success . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class SaveProblemSuccess ( BaseServerModel ): \"\"\"Represents the `save_problem_success` server event. Attributes: event (dict): See SaveProblemSuccessEventField. event_type (str): Consists of the value `save_problem_success`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"save_problem_success\" ) event : SaveProblemSuccessEventField event_type : Literal [ \"save_problem_success\" ] page : Literal [ \"x_module\" ] ShowAnswer ( BaseServerModel ) pydantic-model \u00b6 Represents the showanswer server event. Attributes: Name Type Description event dict See ShowAnswerEventField. event_type str Consists of the value showanswer . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ShowAnswer ( BaseServerModel ): \"\"\"Represents the `showanswer` server event. Attributes: event (dict): See ShowAnswerEventField. event_type (str): Consists of the value `showanswer`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"showanswer\" ) event : ShowAnswerEventField event_type : Literal [ \"showanswer\" ] page : Literal [ \"x_module\" ] UIProblemCheck ( BaseBrowserModel ) pydantic-model \u00b6 Represents the problem_check browser event. The browser emits this event when a user checks a problem. Attributes: Name Type Description event str Consists of values of problem being checked, styled as GET parameters. event_type str Consists of the value problem_check . name str Consists of the value problem_check . Source code in ralph/models/edx/problem_interaction/statements.py class UIProblemCheck ( BaseBrowserModel ): \"\"\"Represents the `problem_check` browser event. The browser emits this event when a user checks a problem. Attributes: event (str): Consists of values of problem being checked, styled as `GET` parameters. event_type (str): Consists of the value `problem_check`. name (str): Consists of the value `problem_check`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"problem_check\" ) event : str event_type : Literal [ \"problem_check\" ] name : Literal [ \"problem_check\" ] UIProblemGraded ( BaseBrowserModel ) pydantic-model \u00b6 Represents the problem_graded browser event. Attributes: Name Type Description event list See ProblemGradedEventField. event_type str Consists of the value problem_graded . name str Consists of the value problem_graded . Source code in ralph/models/edx/problem_interaction/statements.py class UIProblemGraded ( BaseBrowserModel ): \"\"\"Represents the `problem_graded` browser event. Attributes: event (list): See ProblemGradedEventField. event_type (str): Consists of the value `problem_graded`. name (str): Consists of the value `problem_graded`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"problem_graded\" ) event : list [ Union [ str , Literal [ None ], None ]] event_type : Literal [ \"problem_graded\" ] name : Literal [ \"problem_graded\" ] UIProblemReset ( BaseBrowserModel ) pydantic-model \u00b6 Represents the problem_reset browser event. Attributes: Name Type Description event json See ProblemResetEventField. event_type str Consists of the value problem_reset . name str Consists of the value problem_reset . Source code in ralph/models/edx/problem_interaction/statements.py class UIProblemReset ( BaseBrowserModel ): \"\"\"Represents the `problem_reset` browser event. Attributes: event (json): See ProblemResetEventField. event_type (str): Consists of the value `problem_reset`. name (str): Consists of the value `problem_reset`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"problem_reset\" ) event : Union [ str , Json [ UIProblemResetEventField ], # pylint: disable=unsubscriptable-object UIProblemResetEventField , ] event_type : Literal [ \"problem_reset\" ] name : Literal [ \"problem_reset\" ] UIProblemSave ( BaseBrowserModel ) pydantic-model \u00b6 Represents the problem_save browser event. Attributes: Name Type Description event str Consists of all the answers saved for the problem. event_type str Consists of the value problem_save . name str Consists of the value problem_save . Source code in ralph/models/edx/problem_interaction/statements.py class UIProblemSave ( BaseBrowserModel ): \"\"\"Represents the `problem_save` browser event. Attributes: event (str): Consists of all the answers saved for the problem. event_type (str): Consists of the value `problem_save`. name (str): Consists of the value `problem_save`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"problem_save\" ) event : str event_type : Literal [ \"problem_save\" ] name : Literal [ \"problem_save\" ] UIProblemShow ( BaseBrowserModel ) pydantic-model \u00b6 Represents the problem_show browser event. Attributes: Name Type Description event json See ProblemShowEventField. event_type str Consists of the value problem_save . name str Consists of the value problem_save . Source code in ralph/models/edx/problem_interaction/statements.py class UIProblemShow ( BaseBrowserModel ): \"\"\"Represents the `problem_show` browser event. Attributes: event (json): See ProblemShowEventField. event_type (str): Consists of the value `problem_save`. name (str): Consists of the value `problem_save`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"problem_show\" ) event : Union [ Json [ UIProblemShowEventField ], # pylint: disable=unsubscriptable-object UIProblemShowEventField , ] event_type : Literal [ \"problem_show\" ] name : Literal [ \"problem_show\" ] server \u00b6 Server event model definitions BaseServerModel ( BaseEdxModel ) pydantic-model \u00b6 Represents the base model all server statements inherit from. Source code in ralph/models/edx/server.py class BaseServerModel ( BaseEdxModel ): \"\"\"Represents the base model all server statements inherit from.\"\"\" event_source : Literal [ \"server\" ] Server ( BaseServerModel ) pydantic-model \u00b6 Represents a common server statement. This type of event is triggered from the django middleware on each request excluding: /event , login , heartbeat , /segmentio/event and /performance . Attributes: Name Type Description event_type str Consist of the relative URL (without the hostname) of the requested page. Retrieved with: request.META['PATH_INFO'] event str Consist of a JSON string holding the content of the GET or POST request. Retrieved with: json.dumps( { 'GET': dict(request.GET), 'POST': dict(request.POST) } )[:512] Note: Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019, \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by ******** . The JSON string is truncated at 512 characters resulting in invalid JSON. Source code in ralph/models/edx/server.py class Server ( BaseServerModel ): \"\"\"Represents a common server statement. This type of event is triggered from the django middleware on each request excluding: `/event`, `login`, `heartbeat`, `/segmentio/event` and `/performance`. Attributes: event_type (str): Consist of the relative URL (without the hostname) of the requested page. Retrieved with: `request.META['PATH_INFO']` event (str): Consist of a JSON string holding the content of the GET or POST request. Retrieved with: ```json.dumps( { 'GET': dict(request.GET), 'POST': dict(request.POST) } )[:512]``` Note: Values for ['password', 'newpassword', 'new_password', 'oldpassword', 'old_password', 'new_password1', 'new_password2'] are replaced by `********`. The JSON string is truncated at 512 characters resulting in invalid JSON. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = LazyModelField ( \"context__path\" ) ) # pylint: disable=unsubscriptable-object event_type : Path event : Union [ Json [ ServerEventField ], ServerEventField ] ServerEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field of the ServerEventModel. Source code in ralph/models/edx/server.py class ServerEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of the ServerEventModel.\"\"\" GET : dict POST : dict textbook_interaction special \u00b6 fields special \u00b6 events \u00b6 Textbook interaction event fields definitions BookEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the book event field. Attributes: Name Type Description chapter str Consists of the name of the PDF file. name str Consists of textbook.pdf.page.loaded if type is set to gotopage , textbook.pdf.page.navigatednext if type is set to prevpage , textbook.pdf.page.navigatednext if type is set to nextpage . new int Consists of the destination page number. old int Consists of the original page number. It applies to gotopage event types only. type str Consists of gotopage value when a page loads after the student manually enters its number, prevpage value when the next page button is clicked or nextpage value when the previous page button is clicked. Source code in ralph/models/edx/textbook_interaction/fields/events.py class BookEventField ( AbstractBaseEventField ): \"\"\"Represents the `book` event field. Attributes: chapter (str): Consists of the name of the PDF file. name (str): Consists of `textbook.pdf.page.loaded` if type is set to `gotopage`, `textbook.pdf.page.navigatednext` if type is set to `prevpage`, `textbook.pdf.page.navigatednext` if type is set to `nextpage`. new (int): Consists of the destination page number. old (int): Consists of the original page number. It applies to `gotopage` event types only. type (str): Consists of `gotopage` value when a page loads after the student manually enters its number, `prevpage` value when the next page button is clicked or `nextpage` value when the previous page button is clicked. \"\"\" chapter : constr ( regex = ( r \"^\\/asset-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type@asset\\+block.+$\" # noqa ) ) name : Union [ Literal [ \"textbook.pdf.page.loaded\" ], Literal [ \"textbook.pdf.page.navigatednext\" ] ] new : int old : Optional [ int ] type : Union [ Literal [ \"gotopage\" ], Literal [ \"prevpage\" ], Literal [ \"nextpage\" ]] = Field ( alias = \"type\" ) TextbookInteractionBaseEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the event field which attributes are common to most of the textbook interaction events. Attributes: Name Type Description chapter str Consists of the name of the PDF file. It begins with the block_id value and ends with the .pdf extension. page int The number of the page that is open when the event is emitted. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookInteractionBaseEventField ( AbstractBaseEventField ): \"\"\"Represents the event field which attributes are common to most of the textbook interaction events. Attributes: chapter (str): Consists of the name of the PDF file. It begins with the `block_id` value and ends with the `.pdf` extension. page (int): The number of the page that is open when the event is emitted. \"\"\" page : int chapter : constr ( regex = ( r \"^\\/asset-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type@asset\\+block.+$\" # noqa ) ) TextbookPdfChapterNavigatedEventField ( AbstractBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.chapter.navigated event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.chapter.navigated . chapter str Consists of the name of the PDF file. It begins with the block_id value and ends with the .pdf extension. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfChapterNavigatedEventField ( AbstractBaseEventField ): \"\"\"Represents the `textbook.pdf.chapter.navigated` event field. Attributes: name (str): Consists of the value `textbook.pdf.chapter.navigated`. chapter (str): Consists of the name of the PDF file. It begins with the `block_id` value and ends with the `.pdf` extension. \"\"\" name : Literal [ \"textbook.pdf.chapter.navigated\" ] chapter : constr ( regex = ( r \"^\\/asset-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type@asset\\+block.+$\" # noqa ) ) chapter_title : str TextbookPdfDisplayScaledEventField ( TextbookInteractionBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.display.scaled event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.display.scaled . amount str Consists of a floating point number string value. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfDisplayScaledEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.display.scaled` event field. Attributes: name (str): Consists of the value `textbook.pdf.display.scaled`. amount (str): Consists of a floating point number string value. \"\"\" name : Literal [ \"textbook.pdf.display.scaled\" ] amount : float TextbookPdfOutlineToggledEventField ( TextbookInteractionBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.outline.toggled event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.outline.toggled . Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfOutlineToggledEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.outline.toggled` event field. Attribute: name (str): Consists of the value `textbook.pdf.outline.toggled`. \"\"\" name : Literal [ \"textbook.pdf.outline.toggled\" ] TextbookPdfPageNavigatedEventField ( TextbookInteractionBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.page.navigated event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.page.navigated . Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfPageNavigatedEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.page.navigated` event field. Attribute: name (str): Consists of the value `textbook.pdf.page.navigated`. \"\"\" name : Literal [ \"textbook.pdf.page.navigated\" ] TextbookPdfPageScrolledEventField ( TextbookInteractionBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.page.scrolled event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.page.scrolled . direction str Consists either of the up or down value. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfPageScrolledEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.page.scrolled` event field. Attributes: name (str): Consists of the value `textbook.pdf.page.scrolled`. direction (str): Consists either of the `up` or `down` value. \"\"\" name : Literal [ \"textbook.pdf.page.scrolled\" ] direction : Union [ Literal [ \"up\" ], Literal [ \"down\" ]] TextbookPdfSearchCaseSensitivityToggledEventField ( TextbookInteractionBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.searchcasesensitivity.toggled event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.searchcasesensitivity.toggled . caseSensitive bool Consists either of the true value if the case sensitive option is selected or false if this option is not selected. highlightAll bool Consists either of the true value if the option to highlight all matches is selected or false if this option is not selected. query str Consists of the value in the search field. status str Consists either of the value not found for a search string that is unsuccessful or blank for successful search strings. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfSearchCaseSensitivityToggledEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.searchcasesensitivity.toggled` event field. Attributes: name (str): Consists of the value `textbook.pdf.searchcasesensitivity.toggled`. caseSensitive (bool): Consists either of the `true` value if the case sensitive option is selected or `false` if this option is not selected. highlightAll (bool): Consists either of the `true` value if the option to highlight all matches is selected or `false` if this option is not selected. query (str): Consists of the value in the search field. status (str): Consists either of the value `not found` for a search string that is unsuccessful or blank for successful search strings. \"\"\" name : Literal [ \"textbook.pdf.searchcasesensitivity.toggled\" ] caseSensitive : bool highlightAll : bool query : str status : str TextbookPdfSearchExecutedEventField ( TextbookInteractionBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.search.executed event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.search.executed . caseSensitive bool Consists either of the true value if the case sensitive option is selected or false if this option is not selected. highlightAll bool Consists either of the true value if the option to highlight all matches is selected or false if this option is not selected. query str Consists of the value in the search field. status str Consists either of the value not found for a search string that is unsuccessful or blank for successful search strings. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfSearchExecutedEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.search.executed` event field. Attributes: name (str): Consists of the value `textbook.pdf.search.executed`. caseSensitive (bool): Consists either of the `true` value if the case sensitive option is selected or `false` if this option is not selected. highlightAll (bool): Consists either of the `true` value if the option to highlight all matches is selected or `false` if this option is not selected. query (str): Consists of the value in the search field. status (str): Consists either of the value `not found` for a search string that is unsuccessful or blank for successful search strings. \"\"\" name : Literal [ \"textbook.pdf.search.executed\" ] caseSensitive : bool highlightAll : bool query : str status : str TextbookPdfSearchHighlightToggledEventField ( TextbookInteractionBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.search.highlight.toggled event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.search.highlight.toggled . caseSensitive bool Consists either of the true value if the case sensitive option is selected or false if this option is not selected. highlightAll bool Consists either of the true value if the option to highlight all matches is selected or false if this option is not selected. query str Consists of the value in the search field. status str Consists either of the value not found for a search string that is unsuccessful or blank for successful search strings. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfSearchHighlightToggledEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.search.highlight.toggled` event field. Attributes: name (str): Consists of the value `textbook.pdf.search.highlight.toggled`. caseSensitive (bool): Consists either of the `true` value if the case sensitive option is selected or `false` if this option is not selected. highlightAll (bool): Consists either of the `true` value if the option to highlight all matches is selected or `false` if this option is not selected. query (str): Consists of the value in the search field. status (str): Consists either of the value `not found` for a search string that is unsuccessful or blank for successful search strings. \"\"\" name : Literal [ \"textbook.pdf.search.highlight.toggled\" ] caseSensitive : bool highlightAll : bool query : str status : str TextbookPdfSearchNavigatedNextEventField ( TextbookInteractionBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.search.navigatednext event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.search.navigatednext . caseSensitive bool Consists either of the true value if the case sensitive option is selected or false if this option is not selected. findPrevious(bool) Consists either of the \u2018true\u2019 value if the user clicks the Find Previous icon or \u2018false\u2019 if the user clicks the Find Next icon. highlightAll bool Consists either of the true value if the option to highlight all matches is selected or false if this option is not selected. query str Consists of the value in the search field. status str Consists either of the value not found for a search string that is unsuccessful or blank for successful search strings. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfSearchNavigatedNextEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.search.navigatednext` event field. Attributes: name (str): Consists of the value `textbook.pdf.search.navigatednext`. caseSensitive (bool): Consists either of the `true` value if the case sensitive option is selected or `false` if this option is not selected. findPrevious(bool): Consists either of the \u2018true\u2019 value if the user clicks the Find Previous icon or \u2018false\u2019 if the user clicks the <kbd>Find Next</kbd> icon. highlightAll (bool): Consists either of the `true` value if the option to highlight all matches is selected or `false` if this option is not selected. query (str): Consists of the value in the search field. status (str): Consists either of the value `not found` for a search string that is unsuccessful or blank for successful search strings. \"\"\" name : Literal [ \"textbook.pdf.search.navigatednext\" ] caseSensitive : bool findPrevious : bool highlightAll : bool query : str status : str TextbookPdfThumbnailNavigatedEventField ( TextbookInteractionBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.thumbnail.navigated event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.thumbnail.navigated . thumbnail_title str Consists of the name of the thumbnail. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfThumbnailNavigatedEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.thumbnail.navigated` event field. Attribute: name (str): Consists of the value `textbook.pdf.thumbnail.navigated`. thumbnail_title (str): Consists of the name of the thumbnail. \"\"\" name : Literal [ \"textbook.pdf.thumbnail.navigated\" ] thumbnail_title : str TextbookPdfThumbnailsToggledEventField ( TextbookInteractionBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.thumbnails.toggled event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.thumbnails.toggled . Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfThumbnailsToggledEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.thumbnails.toggled` event field. Attribute: name (str): Consists of the value `textbook.pdf.thumbnails.toggled`. \"\"\" name : Literal [ \"textbook.pdf.thumbnails.toggled\" ] TextbookPdfZoomButtonsChangedEventField ( TextbookInteractionBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.zoom.buttons.changed event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.zoom.buttons.changed . direction str Consists of either the in or out value. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfZoomButtonsChangedEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.zoom.buttons.changed` event field. Attributes: name (str): Consists of the value `textbook.pdf.zoom.buttons.changed`. direction (str): Consists of either the `in` or `out` value. \"\"\" name : Literal [ \"textbook.pdf.zoom.buttons.changed\" ] direction : Union [ Literal [ \"in\" ], Literal [ \"out\" ]] TextbookPdfZoomMenuChangedEventField ( TextbookInteractionBaseEventField ) pydantic-model \u00b6 Represents the textbook.pdf.zoom.menu.changed event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.zoom.menu.changed . amount str Consists either of the 0.5 , 0.75 , 1 , 1.25 , 1.5 , 2 , 3 , 4 , auto , custom , page-actual , page-fit , page-width value. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfZoomMenuChangedEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.zoom.menu.changed` event field. Attributes: name (str): Consists of the value `textbook.pdf.zoom.menu.changed`. amount (str): Consists either of the `0.5`, `0.75`, `1`, `1.25`, `1.5`, `2`, `3`, `4`, `auto`, `custom`, `page-actual`, `page-fit`, `page-width` value. \"\"\" name : Literal [ \"textbook.pdf.zoom.menu.changed\" ] amount : Union [ Literal [ \"0.5\" ], Literal [ \"0.75\" ], Literal [ \"1\" ], Literal [ \"1.25\" ], Literal [ \"1.5\" ], Literal [ \"2\" ], Literal [ \"3\" ], Literal [ \"4\" ], Literal [ \"auto\" ], Literal [ \"custom\" ], Literal [ \"page-actual\" ], Literal [ \"page-fit\" ], Literal [ \"page-width\" ], ] statements \u00b6 Textbook interaction event model definitions UIBook ( BaseBrowserModel ) pydantic-model \u00b6 Represents the book browser event model. The browser emits this event when a user navigates within the PDF Viewer or the PNG Viewer. Attributes: Name Type Description event BookEventField See BookEventField. event_type str Consists of the value book . name str Consists of the value book . Source code in ralph/models/edx/textbook_interaction/statements.py class UIBook ( BaseBrowserModel ): \"\"\"Represents the `book` browser event model. The browser emits this event when a user navigates within the PDF Viewer or the PNG Viewer. Attributes: event (BookEventField): See BookEventField. event_type (str): Consists of the value `book`. name (str): Consists of the value `book`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"book\" ) event : Union [ Json [ BookEventField ], BookEventField # pylint: disable=unsubscriptable-object ] event_type : Literal [ \"book\" ] name : Literal [ \"book\" ] UITextbookPdfChapterNavigated ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.chapter.navigated browser event model. The browser emits this event when a user clicks on a link in the outline to navigate to a chapter. Attributes: Name Type Description event json See TextbookPdfChapterNavigatedEventField. event_type str Consists of the value textbook.pdf.chapter.navigated . name str Consists of the value textbook.pdf.chapter.navigated . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfChapterNavigated ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.chapter.navigated` browser event model. The browser emits this event when a user clicks on a link in the outline to navigate to a chapter. Attributes: event (json): See TextbookPdfChapterNavigatedEventField. event_type (str): Consists of the value `textbook.pdf.chapter.navigated`. name (str): Consists of the value `textbook.pdf.chapter.navigated`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.chapter.navigated\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfChapterNavigatedEventField ], TextbookPdfChapterNavigatedEventField , ] event_type : Literal [ \"textbook.pdf.chapter.navigated\" ] name : Literal [ \"textbook.pdf.chapter.navigated\" ] UITextbookPdfDisplayScaled ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.display.scaled browser event model. The browser emits this event when the display magnification changes or the first page is shown. Attributes: Name Type Description event json See TextbookPdfDisplayScaledEventField. event_type str Consists of the value textbook.pdf.display.scaled . name str Consists of the value textbook.pdf.display.scaled . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfDisplayScaled ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.display.scaled` browser event model. The browser emits this event when the display magnification changes or the first page is shown. Attributes: event (json): See TextbookPdfDisplayScaledEventField. event_type (str): Consists of the value `textbook.pdf.display.scaled`. name (str): Consists of the value `textbook.pdf.display.scaled`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.display.scaled\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfDisplayScaledEventField ], TextbookPdfDisplayScaledEventField , ] event_type : Literal [ \"textbook.pdf.display.scaled\" ] name : Literal [ \"textbook.pdf.display.scaled\" ] UITextbookPdfOutlineToggled ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.outline.toggled browser event model. The browser emits this event when a user clicks the outline icon to show or hide a list of the book\u2019s chapters. Attributes: Name Type Description event json See TextbookPdfOutlineToggledEventField. event_type str Consists of the value textbook.pdf.outline.toggled . name str Consists of the value textbook.pdf.outline.toggled . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfOutlineToggled ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.outline.toggled` browser event model. The browser emits this event when a user clicks the outline icon to show or hide a list of the book\u2019s chapters. Attributes: event (json): See TextbookPdfOutlineToggledEventField. event_type (str): Consists of the value `textbook.pdf.outline.toggled`. name (str): Consists of the value `textbook.pdf.outline.toggled`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.outline.toggled\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfOutlineToggledEventField ], TextbookPdfOutlineToggledEventField , ] event_type : Literal [ \"textbook.pdf.outline.toggled\" ] name : Literal [ \"textbook.pdf.outline.toggled\" ] UITextbookPdfPageNavigated ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.page.navigated browser event model. The browser emits this event when a user manually enters a page number. Attributes: Name Type Description event json See TextbookPdfPageNavigatedEventField. event_type str Consists of the value textbook.pdf.page.navigated . name str Consists of the value textbook.pdf.page.navigated . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfPageNavigated ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.page.navigated` browser event model. The browser emits this event when a user manually enters a page number. Attributes: event (json): See TextbookPdfPageNavigatedEventField. event_type (str): Consists of the value `textbook.pdf.page.navigated`. name (str): Consists of the value `textbook.pdf.page.navigated`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.page.navigated\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfPageNavigatedEventField ], TextbookPdfPageNavigatedEventField , ] event_type : Literal [ \"textbook.pdf.page.navigated\" ] name : Literal [ \"textbook.pdf.page.navigated\" ] UITextbookPdfPageScrolled ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.page.scrolled browser event model. The browser emits this event when the user scrolls to the next or previous page and the transition takes less than 50 milliseconds. Attributes: Name Type Description event json See TextbookPdfPageScrolledEventField. event_type str Consists of the value textbook.pdf.page.scrolled . name str Consists of the value textbook.pdf.page.scrolled . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfPageScrolled ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.page.scrolled` browser event model. The browser emits this event when the user scrolls to the next or previous page and the transition takes less than 50 milliseconds. Attributes: event (json): See TextbookPdfPageScrolledEventField. event_type (str): Consists of the value `textbook.pdf.page.scrolled`. name (str): Consists of the value `textbook.pdf.page.scrolled`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.page.scrolled\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfPageScrolledEventField ], TextbookPdfPageScrolledEventField , ] event_type : Literal [ \"textbook.pdf.page.scrolled\" ] name : Literal [ \"textbook.pdf.page.scrolled\" ] UITextbookPdfSearchCaseSensitivityToggled ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.searchcasesensitivity.toggled browser event model. The browser emits this event when a user selects or clears the Match Case option. Attributes: Name Type Description event json See TextbookPdfSearchCaseSensitivityToggledEventField. event_type str Consists of the value textbook.pdf.searchcasesensitivity.toggled . name str Consists of the value textbook.pdf.searchcasesensitivity.toggled . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfSearchCaseSensitivityToggled ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.searchcasesensitivity.toggled` browser event model. The browser emits this event when a user selects or clears the <kbd>Match Case</kbd> option. Attributes: event (json): See TextbookPdfSearchCaseSensitivityToggledEventField. event_type (str): Consists of the value `textbook.pdf.searchcasesensitivity.toggled`. name (str): Consists of the value `textbook.pdf.searchcasesensitivity.toggled`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.searchcasesensitivity.toggled\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfSearchCaseSensitivityToggledEventField ], TextbookPdfSearchCaseSensitivityToggledEventField , ] event_type : Literal [ \"textbook.pdf.searchcasesensitivity.toggled\" ] name : Literal [ \"textbook.pdf.searchcasesensitivity.toggled\" ] UITextbookPdfSearchExecuted ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.search.executed browser event model. The browser emits this event when a user searches for a text value in the file. Attributes: Name Type Description event json See TextbookPdfSearchExecutedEventField. event_type str Consists of the value textbook.pdf.search.executed . name str Consists of the value textbook.pdf.search.executed . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfSearchExecuted ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.search.executed` browser event model. The browser emits this event when a user searches for a text value in the file. Attributes: event (json): See TextbookPdfSearchExecutedEventField. event_type (str): Consists of the value `textbook.pdf.search.executed`. name (str): Consists of the value `textbook.pdf.search.executed`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.search.executed\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfSearchExecutedEventField ], TextbookPdfSearchExecutedEventField , ] event_type : Literal [ \"textbook.pdf.search.executed\" ] name : Literal [ \"textbook.pdf.search.executed\" ] UITextbookPdfSearchHighlightToggled ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.search.highlight.toggled browser event model. The browser emits this event when a user selects or clears the Highlight All option. Attributes: Name Type Description event json See TextbookPdfSearchHighlightToggledEventField. event_type str Consists of the value textbook.pdf.search.highlight.toggled . name str Consists of the value textbook.pdf.search.highlight.toggled . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfSearchHighlightToggled ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.search.highlight.toggled` browser event model. The browser emits this event when a user selects or clears the <kbd>Highlight All</kbd> option. Attributes: event (json): See TextbookPdfSearchHighlightToggledEventField. event_type (str): Consists of the value `textbook.pdf.search.highlight.toggled`. name (str): Consists of the value `textbook.pdf.search.highlight.toggled`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.search.highlight.toggled\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfSearchHighlightToggledEventField ], TextbookPdfSearchHighlightToggledEventField , ] event_type : Literal [ \"textbook.pdf.search.highlight.toggled\" ] name : Literal [ \"textbook.pdf.search.highlight.toggled\" ] UITextbookPdfSearchNavigatedNext ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.search.navigatednext browser event model. The browser emits this event when a user clicks on the Find Next or Find Previous icons for an entered search string. Attributes: Name Type Description event json See TextbookPdfSearchNavigatedNextEventField. event_type str Consists of the value textbook.pdf.search.navigatednext . name str Consists of the value textbook.pdf.search.navigatednext . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfSearchNavigatedNext ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.search.navigatednext` browser event model. The browser emits this event when a user clicks on the <kbd>Find Next</kbd> or <kbd>Find Previous</kbd> icons for an entered search string. Attributes: event (json): See TextbookPdfSearchNavigatedNextEventField. event_type (str): Consists of the value `textbook.pdf.search.navigatednext`. name (str): Consists of the value `textbook.pdf.search.navigatednext`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.search.navigatednext\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfSearchNavigatedNextEventField ], TextbookPdfSearchNavigatedNextEventField , ] event_type : Literal [ \"textbook.pdf.search.navigatednext\" ] name : Literal [ \"textbook.pdf.search.navigatednext\" ] UITextbookPdfThumbnailNavigated ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.thumbnail.navigated browser event model. The browser emits this event when a user clicks on a thumbnail image to navigate to a page. Attributes: Name Type Description event json See TextbookPdfThumbnailNavigatedEventField. event_type str Consists of the value textbook.pdf.thumbnail.navigated . name str Consists of the value textbook.pdf.thumbnail.navigated . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfThumbnailNavigated ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.thumbnail.navigated` browser event model. The browser emits this event when a user clicks on a thumbnail image to navigate to a page. Attributes: event (json): See TextbookPdfThumbnailNavigatedEventField. event_type (str): Consists of the value `textbook.pdf.thumbnail.navigated`. name (str): Consists of the value `textbook.pdf.thumbnail.navigated`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.thumbnail.navigated\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfThumbnailNavigatedEventField ], TextbookPdfThumbnailNavigatedEventField , ] event_type : Literal [ \"textbook.pdf.thumbnail.navigated\" ] name : Literal [ \"textbook.pdf.thumbnail.navigated\" ] UITextbookPdfThumbnailsToggled ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.thumbnails.toggled browser event model. The browser emits this event when a user clicks on the icon to show or hide page thumbnails. Attributes: Name Type Description event json See TextbookPdfThumbnailsToggledEventField. event_type str Consists of the value textbook.pdf.thumbnails.toggled . name str Consists of the value textbook.pdf.thumbnails.toggled . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfThumbnailsToggled ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.thumbnails.toggled` browser event model. The browser emits this event when a user clicks on the icon to show or hide page thumbnails. Attributes: event (json): See TextbookPdfThumbnailsToggledEventField. event_type (str): Consists of the value `textbook.pdf.thumbnails.toggled`. name (str): Consists of the value `textbook.pdf.thumbnails.toggled`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.thumbnails.toggled\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfThumbnailsToggledEventField ], TextbookPdfThumbnailsToggledEventField , ] event_type : Literal [ \"textbook.pdf.thumbnails.toggled\" ] name : Literal [ \"textbook.pdf.thumbnails.toggled\" ] UITextbookPdfZoomButtonsChanged ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.zoom.buttons.changed browser event model. The browser emits this event when a user clicks either the Zoom In or Zoom Out icon. Attributes: Name Type Description event json See TextbookPdfZoomButtonsChangedEventField. event_type str Consists of the value textbook.pdf.zoom.buttons.changed . name str Consists of the value textbook.pdf.zoom.buttons.changed . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfZoomButtonsChanged ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.zoom.buttons.changed` browser event model. The browser emits this event when a user clicks either the <kbd>Zoom In</kbd> or <kbd>Zoom Out</kbd> icon. Attributes: event (json): See TextbookPdfZoomButtonsChangedEventField. event_type (str): Consists of the value `textbook.pdf.zoom.buttons.changed`. name (str): Consists of the value `textbook.pdf.zoom.buttons.changed`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.zoom.buttons.changed\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfZoomButtonsChangedEventField ], TextbookPdfZoomButtonsChangedEventField , ] event_type : Literal [ \"textbook.pdf.zoom.buttons.changed\" ] name : Literal [ \"textbook.pdf.zoom.buttons.changed\" ] UITextbookPdfZoomMenuChanged ( BaseBrowserModel ) pydantic-model \u00b6 Represents the textbook.pdf.zoom.menu.changed browser event model. The browser emits this event when a user selects a magnification setting. Attributes: Name Type Description event json See TextbookPdfZoomMenuChangedEventField. event_type str Consists of the value textbook.pdf.zoom.menu.changed . name str Consists of the value textbook.pdf.zoom.menu.changed . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfZoomMenuChanged ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.zoom.menu.changed` browser event model. The browser emits this event when a user selects a magnification setting. Attributes: event (json): See TextbookPdfZoomMenuChangedEventField. event_type (str): Consists of the value `textbook.pdf.zoom.menu.changed`. name (str): Consists of the value `textbook.pdf.zoom.menu.changed`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.zoom.menu.changed\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfZoomMenuChangedEventField ], TextbookPdfZoomMenuChangedEventField , ] event_type : Literal [ \"textbook.pdf.zoom.menu.changed\" ] name : Literal [ \"textbook.pdf.zoom.menu.changed\" ]","title":"Open edX events"},{"location":"models/edx/#ralph.models.edx.base","text":"Base event model definitions","title":"base"},{"location":"models/edx/#ralph.models.edx.base.AbstractBaseEventField","text":"Represents the base model inherited by all event fields. The base model does not have any attributes as event field does not have common sub-fields. Source code in ralph/models/edx/base.py class AbstractBaseEventField ( BaseModelWithConfig ): \"\"\"Represents the base model inherited by all `event` fields. The base model does not have any attributes as event field does not have common sub-fields. \"\"\"","title":"AbstractBaseEventField"},{"location":"models/edx/#ralph.models.edx.base.BaseContextField","text":"Represents the base model inherited by all event context fields. Attributes: Name Type Description course_user_tags dict of str Content from user_api_usercoursetag table. Retrieved with: dict( UserCourseTag.objects.filter( user=request.user.pk, course_id=course_key ).values_list('key', 'value') ) Note: Is only present when a course page is requested. Is an empty dictionary when the user is not logged in or not found in the user_api_usercoursetag table. user_id int or str or None Consists of the ID of the authenticated user. Retrieved with: request.user.pk querying the auth_user table. Note: Is an integer when the user is found in the auth_user table. Is an empty string when an exception is raised while retrieving the ID. Is None when the user is not logged in. org_id str Consists of the organization name that lists the course. Retrieved with: course_id.org where course_id is an opaque_keys.edx.locator.CourseLocator which is created using the URL of the requested page. Note: Is an empty string when the requested page is not a course page. course_id str Consists of the unique identifier for the visited course page. Retrieved with: course_id.to_deprecated_string() where course_id is an opaque_keys.edx.locator.CourseLocator which is created using the URL of the requested page. Note: Is an empty string when the requested page is not a course page. path Path Consist of the relative URL (without the hostname) of the requested page. Retrieved with: request.META['PATH_INFO'] Source code in ralph/models/edx/base.py class BaseContextField ( BaseModelWithConfig ): \"\"\"Represents the base model inherited by all event `context` fields. Attributes: course_user_tags (dict of str): Content from `user_api_usercoursetag` table. Retrieved with: `dict( UserCourseTag.objects.filter( user=request.user.pk, course_id=course_key ).values_list('key', 'value') )` Note: Is only present when a course page is requested. Is an empty dictionary when the user is not logged in or not found in the `user_api_usercoursetag` table. user_id (int or str or None): Consists of the ID of the authenticated user. Retrieved with: `request.user.pk` querying the `auth_user` table. Note: Is an integer when the user is found in the `auth_user` table. Is an empty string when an exception is raised while retrieving the ID. Is `None` when the user is not logged in. org_id (str): Consists of the organization name that lists the course. Retrieved with: `course_id.org` where `course_id` is an `opaque_keys.edx.locator.CourseLocator` which is created using the URL of the requested page. Note: Is an empty string when the requested page is not a course page. course_id (str): Consists of the unique identifier for the visited course page. Retrieved with: `course_id.to_deprecated_string()` where `course_id` is an `opaque_keys.edx.locator.CourseLocator` which is created using the URL of the requested page. Note: Is an empty string when the requested page is not a course page. path (Path): Consist of the relative URL (without the hostname) of the requested page. Retrieved with: `request.META['PATH_INFO']` \"\"\" course_id : constr ( regex = r \"^$|^course-v1:.+\\+.+\\+.+$\" ) # noqa:F722 course_user_tags : Optional [ dict [ str , str ]] module : Optional [ ContextModuleField ] org_id : str path : Path user_id : Union [ int , Literal [ \"\" ], None ]","title":"BaseContextField"},{"location":"models/edx/#ralph.models.edx.base.BaseEdxModel","text":"Represents the base model all statements inherit from. WARNING: it does not define the event , event_type and event_source fields. Attributes: Name Type Description username str Consists of the unique username identifying the logged in user. Retrieved with: request.user.username querying the auth_user table. Note: Is an empty string when the user is not logged in. If an exception is raised when retrieving the username from the table then the value is anonymous . Usernames are made of 2-30 ASCII letters / numbers / underscores (_) / hyphens (-) ip IPv4Address or str Consists of the public IPv4 address of the user. Retrieved with: get_ip(request) cf. https://github.com/un33k/django-ipware/tree/1.1.0 Note: Can be an empty string if the IP address is not found. agent str Consists of the User-Agent HTTP request header. Retrieved with: request.META[HTTP_USER_AGENT] Note: Can be an empty string if the header is not present in the request. Contains information about: Browser name and version Operating system name and version Default language host str Consists of the hostname of the server. Retrieved with: request.META[SERVER_NAME] referer Path Consists of the Referer HTTP request header. Retrieved with: request.META[HTTP_REFERER] Note: Can be an empty string if the header is not present in the request. Contains the referring URL (previous URL visited by the user). accept_language str Consists of the Accept-Language HTTP request header. Retrieved with: request.META[HTTP_ACCEPT_LANGUAGE] Note: Can be an empty string if the header is not present in the request. Contains the default language settings of the user. context BaseContextField see BaseContextField. time datetime Consists of the UTC time in ISO format at which the event was emitted. Retrieved with: datetime.datetime.utcnow() page None Consists of the value None Note: In JSON the value is null instead of None . Source code in ralph/models/edx/base.py class BaseEdxModel ( BaseModelWithConfig ): \"\"\"Represents the base model all statements inherit from. WARNING: it does not define the `event`, `event_type` and `event_source` fields. Attributes: username (str): Consists of the unique username identifying the logged in user. Retrieved with: `request.user.username` querying the `auth_user` table. Note: Is an empty string when the user is not logged in. If an exception is raised when retrieving the username from the table then the value is `anonymous`. Usernames are made of 2-30 ASCII letters / numbers / underscores (_) / hyphens (-) ip (IPv4Address or str): Consists of the public IPv4 address of the user. Retrieved with: `get_ip(request)` cf. https://github.com/un33k/django-ipware/tree/1.1.0 Note: Can be an empty string if the IP address is not found. agent (str): Consists of the `User-Agent` HTTP request header. Retrieved with: `request.META[HTTP_USER_AGENT]` Note: Can be an empty string if the header is not present in the request. Contains information about: Browser name and version Operating system name and version Default language host (str): Consists of the hostname of the server. Retrieved with: `request.META[SERVER_NAME]` referer (Path): Consists of the `Referer` HTTP request header. Retrieved with: `request.META[HTTP_REFERER]` Note: Can be an empty string if the header is not present in the request. Contains the referring URL (previous URL visited by the user). accept_language (str): Consists of the `Accept-Language` HTTP request header. Retrieved with: `request.META[HTTP_ACCEPT_LANGUAGE]` Note: Can be an empty string if the header is not present in the request. Contains the default language settings of the user. context (BaseContextField): see BaseContextField. time (datetime): Consists of the UTC time in ISO format at which the event was emitted. Retrieved with: `datetime.datetime.utcnow()` page (None): Consists of the value `None` Note: In JSON the value is `null` instead of `None`. \"\"\" username : Union [ constr ( min_length = 2 , max_length = 30 ), Literal [ \"\" ]] ip : Union [ IPv4Address , Literal [ \"\" ]] agent : str host : str referer : Union [ AnyHttpUrl , Literal [ \"\" ]] accept_language : str context : BaseContextField time : datetime page : None","title":"BaseEdxModel"},{"location":"models/edx/#ralph.models.edx.base.BaseModelWithConfig","text":"Base model defining configuration shared among all models. Source code in ralph/models/edx/base.py class BaseModelWithConfig ( BaseModel ): \"\"\"Base model defining configuration shared among all models.\"\"\" class Config : # pylint: disable=missing-class-docstring extra = \"forbid\"","title":"BaseModelWithConfig"},{"location":"models/edx/#ralph.models.edx.base.ContextModuleField","text":"Represents the context module field. Attributes: Name Type Description usage_key str Consists of a block ID of the current component. display_name str Consists of a short description or title of the component. Source code in ralph/models/edx/base.py class ContextModuleField ( BaseModelWithConfig ): \"\"\"Represents the context `module` field. Attributes: usage_key (str): Consists of a block ID of the current component. display_name (str): Consists of a short description or title of the component. \"\"\" usage_key : constr ( regex = r \"^block-v1:.+\\+.+\\+.+type@.+@[a-f0-9] {32} $\" ) # noqa:F722 display_name : str original_usage_key : Optional [ constr ( regex = r \"^block-v1:.+\\+.+\\+.+type@problem\\+block@[a-f0-9] {32} $\" # noqa:F722 ) ] original_usage_version : Optional [ str ]","title":"ContextModuleField"},{"location":"models/edx/#ralph.models.edx.browser","text":"Browser event model definitions","title":"browser"},{"location":"models/edx/#ralph.models.edx.browser.BaseBrowserModel","text":"Represents the base model all browser statements inherit from. This type of event is triggered on (XHR) POST/GET requests to the /event URL. Attributes: Name Type Description event_source str Consists of the value browser . page AnyUrl Consists of the URL (with hostname) of the visited page. Retrieved with: window.location.href from the JavaScript front-end. session str Consists of the md5 encrypted Django session key or an empty string. Source code in ralph/models/edx/browser.py class BaseBrowserModel ( BaseEdxModel ): \"\"\"Represents the base model all browser statements inherit from. This type of event is triggered on (XHR) POST/GET requests to the `/event` URL. Attributes: event_source (str): Consists of the value `browser`. page (AnyUrl): Consists of the URL (with hostname) of the visited page. Retrieved with: `window.location.href` from the JavaScript front-end. session (str): Consists of the md5 encrypted Django session key or an empty string. \"\"\" event_source : Literal [ \"browser\" ] page : AnyUrl session : Union [ constr ( regex = r \"^[a-f0-9] {32} $\" ), Literal [ \"\" ]] # noqa: F722","title":"BaseBrowserModel"},{"location":"models/edx/#ralph.models.edx.converters","text":"","title":"converters"},{"location":"models/edx/#ralph.models.edx.converters.xapi","text":"edX to xAPI conversion sets","title":"xapi"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base","text":"Base xAPI Converter","title":"base"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter","text":"Base xAPI Converter. WARNING: The converter may not include the following edX fields: - context.org_id: When org_id is an empty string. - context.course_id: When course_id is an empty string. WARNING: The converter should not include the following edX fields as they may contain sensitive data: username , referer , event , event_source , ip , agent , accept_language: , context.course_user_tags . Source code in ralph/models/edx/converters/xapi/base.py class BaseXapiConverter ( BaseConversionSet ): \"\"\"Base xAPI Converter. WARNING: The converter may not include the following edX fields: - context.org_id: When `org_id` is an empty string. - context.course_id: When `course_id` is an empty string. WARNING: The converter should not include the following edX fields as they may contain sensitive data: `username`, `referer`, `event`, `event_source`, `ip`, `agent`, `accept_language:`, `context.course_user_tags`. \"\"\" def __init__ ( self , uuid_namespace : str , platform_url : str ): \"\"\"Initializes BaseXapiConverter.\"\"\" self . platform_url = platform_url try : self . uuid_namespace = UUID ( uuid_namespace ) except ( TypeError , ValueError , AttributeError ) as err : raise ConfigurationException ( \"Invalid UUID namespace\" ) from err super () . __init__ () def _get_conversion_items ( self ): \"\"\"Returns a set of ConversionItems used for conversion.\"\"\" return { ConversionItem ( \"id\" , None , lambda event_str : str ( uuid5 ( self . uuid_namespace , event_str )), True , ), ConversionItem ( \"actor__account__homePage\" , transformers = lambda _ : self . platform_url ), ConversionItem ( \"actor__account__name\" , \"context__user_id\" , lambda user_id : str ( user_id ) if user_id else \"anonymous\" , ), ConversionItem ( \"object__definition__extensions__\" + EXTENSION_SCHOOL_ID , \"context__org_id\" , ), ConversionItem ( \"object__definition__extensions__\" + EXTENSION_COURSE_ID , \"context__course_id\" , ( self . parse_course_id , lambda x : x [ \"course\" ]), ), ConversionItem ( \"object__definition__extensions__\" + EXTENSION_MODULE_ID , \"context__course_id\" , ( self . parse_course_id , lambda x : x [ \"module\" ]), ), ConversionItem ( \"timestamp\" , \"time\" ), } @staticmethod def parse_course_id ( course_id : str ): \"\"\"Returns a dictionary with `course` and `module` of edX event's `context.course_id`. \"\"\" match = re . match ( r \"^course-v1:.+\\+(.+)\\+(.+)$\" , course_id ) if not match : return { \"course\" : None , \"module\" : None } return { \"course\" : match . group ( 1 ), \"module\" : match . group ( 2 )}","title":"BaseXapiConverter"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter.__init__","text":"Initializes BaseXapiConverter. Source code in ralph/models/edx/converters/xapi/base.py def __init__ ( self , uuid_namespace : str , platform_url : str ): \"\"\"Initializes BaseXapiConverter.\"\"\" self . platform_url = platform_url try : self . uuid_namespace = UUID ( uuid_namespace ) except ( TypeError , ValueError , AttributeError ) as err : raise ConfigurationException ( \"Invalid UUID namespace\" ) from err super () . __init__ ()","title":"__init__()"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter.parse_course_id","text":"Returns a dictionary with course and module of edX event\u2019s context.course_id . Source code in ralph/models/edx/converters/xapi/base.py @staticmethod def parse_course_id ( course_id : str ): \"\"\"Returns a dictionary with `course` and `module` of edX event's `context.course_id`. \"\"\" match = re . match ( r \"^course-v1:.+\\+(.+)\\+(.+)$\" , course_id ) if not match : return { \"course\" : None , \"module\" : None } return { \"course\" : match . group ( 1 ), \"module\" : match . group ( 2 )}","title":"parse_course_id()"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational","text":"Navigational event xAPI Converter","title":"navigational"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated","text":"Converts a common edX page_close event to xAPI. Example Statement: John terminated https://www.fun-mooc.fr/ page. WARNING: The converter does not use the self.platform_url in the object__id because the platform_url is present in the edX\u2019s event page field. Source code in ralph/models/edx/converters/xapi/navigational.py class UIPageCloseToPageTerminated ( BaseXapiConverter ): \"\"\"Converts a common edX `page_close` event to xAPI. Example Statement: John terminated https://www.fun-mooc.fr/ page. WARNING: The converter does not use the `self.platform_url` in the `object__id` because the `platform_url` is present in the edX's event `page` field. \"\"\" __src__ = UIPageClose __dest__ = PageTerminated def _get_conversion_items ( self ): \"\"\"Returns a set of ConversionItems used for conversion.\"\"\" conversion_items = super () . _get_conversion_items () return conversion_items . union ({ ConversionItem ( \"object__id\" , \"page\" )})","title":"UIPageCloseToPageTerminated"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated.__dest__","text":"Represents a page terminated xAPI statement. Example: John terminated the https://www.fun-mooc.fr/ page. Attributes: Name Type Description object PageObjectField See PageObjectField. verb PageTerminatedVerbField See PageTerminatedVerbField. Source code in ralph/models/edx/converters/xapi/navigational.py class PageTerminated ( BaseXapiModel ): \"\"\"Represents a page terminated xAPI statement. Example: John terminated the https://www.fun-mooc.fr/ page. Attributes: object (PageObjectField): See PageObjectField. verb (PageTerminatedVerbField): See PageTerminatedVerbField. \"\"\" __selector__ = selector ( object__definition__type = \"http://activitystrea.ms/schema/1.0/page\" , verb__id = \"http://adlnet.gov/expapi/verbs/terminated\" , ) object : PageObjectField verb : TerminatedVerbField = TerminatedVerbField ()","title":"__dest__"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated.__src__","text":"Represents the page_close browser statement. This type of statement is triggered when the user navigates to the next page or closes the browser window (when the JavaScript window.onunload event is called). Attributes: Name Type Description event str Consists of the string value {} . event_type str Consists of the value page_close . name str Consists of the value page_close . Source code in ralph/models/edx/converters/xapi/navigational.py class UIPageClose ( BaseBrowserModel ): \"\"\"Represents the `page_close` browser statement. This type of statement is triggered when the user navigates to the next page or closes the browser window (when the JavaScript `window.onunload` event is called). Attributes: event (str): Consists of the string value `{}`. event_type (str): Consists of the value `page_close`. name (str): Consists of the value `page_close`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"page_close\" ) # pylint: disable=unsubscriptable-object event : Literal [ \" {} \" ] event_type : Literal [ \"page_close\" ] name : Literal [ \"page_close\" ]","title":"__src__"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server","text":"Server event xAPI Converter","title":"server"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed","text":"Converts a common edX server event to xAPI. Example Statement: John viewed https://www.fun-mooc.fr/ page. Source code in ralph/models/edx/converters/xapi/server.py class ServerEventToPageViewed ( BaseXapiConverter ): \"\"\"Converts a common edX server event to xAPI. Example Statement: John viewed https://www.fun-mooc.fr/ page. \"\"\" __src__ = Server __dest__ = PageViewed def _get_conversion_items ( self ): \"\"\"Returns a set of ConversionItems used for conversion.\"\"\" conversion_items = super () . _get_conversion_items () return conversion_items . union ( { ConversionItem ( \"object__id\" , \"event_type\" , lambda event_type : self . platform_url + event_type , ), } )","title":"ServerEventToPageViewed"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed.__dest__","text":"Represents a page viewed xAPI statement. Example: John viewed the https://www.fun-mooc.fr/ page. Attributes: Name Type Description object PageObjectField See PageObjectField. verb PageViewedVerbField See PageViewedVerbField. Source code in ralph/models/edx/converters/xapi/server.py class PageViewed ( BaseXapiModel ): \"\"\"Represents a page viewed xAPI statement. Example: John viewed the https://www.fun-mooc.fr/ page. Attributes: object (PageObjectField): See PageObjectField. verb (PageViewedVerbField): See PageViewedVerbField. \"\"\" __selector__ = selector ( object__definition__type = \"http://activitystrea.ms/schema/1.0/page\" , verb__id = \"http://id.tincanapi.com/verb/viewed\" , ) object : PageObjectField verb : ViewedVerbField = ViewedVerbField ()","title":"__dest__"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed.__src__","text":"Represents a common server statement. This type of event is triggered from the django middleware on each request excluding: /event , login , heartbeat , /segmentio/event and /performance . Attributes: Name Type Description event_type str Consist of the relative URL (without the hostname) of the requested page. Retrieved with: request.META['PATH_INFO'] event str Consist of a JSON string holding the content of the GET or POST request. Retrieved with: json.dumps( { 'GET': dict(request.GET), 'POST': dict(request.POST) } )[:512] Note: Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019, \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by ******** . The JSON string is truncated at 512 characters resulting in invalid JSON. Source code in ralph/models/edx/converters/xapi/server.py class Server ( BaseServerModel ): \"\"\"Represents a common server statement. This type of event is triggered from the django middleware on each request excluding: `/event`, `login`, `heartbeat`, `/segmentio/event` and `/performance`. Attributes: event_type (str): Consist of the relative URL (without the hostname) of the requested page. Retrieved with: `request.META['PATH_INFO']` event (str): Consist of a JSON string holding the content of the GET or POST request. Retrieved with: ```json.dumps( { 'GET': dict(request.GET), 'POST': dict(request.POST) } )[:512]``` Note: Values for ['password', 'newpassword', 'new_password', 'oldpassword', 'old_password', 'new_password1', 'new_password2'] are replaced by `********`. The JSON string is truncated at 512 characters resulting in invalid JSON. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = LazyModelField ( \"context__path\" ) ) # pylint: disable=unsubscriptable-object event_type : Path event : Union [ Json [ ServerEventField ], ServerEventField ]","title":"__src__"},{"location":"models/edx/#ralph.models.edx.enrollment","text":"","title":"enrollment"},{"location":"models/edx/#ralph.models.edx.enrollment.fields","text":"","title":"fields"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.contexts","text":"Enrollment event models context fields definitions","title":"contexts"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.contexts.EdxCourseEnrollmentUpgradeClickedContextField","text":"Represents the context field of the edx.course.enrollment.upgrade_clicked server statement. In addition to the common context member fields, this statement also comprises the mode context member field. Attributes: Name Type Description mode str Consists of either the audit or honor value. It identifies the enrollment mode when the user clicked Challenge Yourself . Source code in ralph/models/edx/enrollment/fields/contexts.py class EdxCourseEnrollmentUpgradeClickedContextField ( BaseContextField ): \"\"\"Represents the `context` field of the `edx.course.enrollment.upgrade_clicked` server statement. In addition to the common context member fields, this statement also comprises the `mode` context member field. Attributes: mode (str): Consists of either the `audit` or `honor` value. It identifies the enrollment mode when the user clicked <kbd>Challenge Yourself</kbd>. \"\"\" mode : Union [ Literal [ \"audit\" ], Literal [ \"honor\" ]]","title":"EdxCourseEnrollmentUpgradeClickedContextField"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.contexts.EdxCourseEnrollmentUpgradeSucceededContextField","text":"Represents the context field of the edx.course.enrollment.upgrade.succeeded server statement. In addition to the common context member fields, this statement also comprises the mode context member field. Attributes: Name Type Description mode str Consists of the verified value. Source code in ralph/models/edx/enrollment/fields/contexts.py class EdxCourseEnrollmentUpgradeSucceededContextField ( BaseContextField ): \"\"\"Represents the `context` field of the `edx.course.enrollment.upgrade.succeeded` server statement. In addition to the common context member fields, this statement also comprises the `mode` context member field. Attributes: mode (str): Consists of the `verified` value. \"\"\" mode : Literal [ \"verified\" ]","title":"EdxCourseEnrollmentUpgradeSucceededContextField"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.events","text":"Enrollment models event field definition","title":"events"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.events.EnrollmentEventField","text":"Represents the event field for enrollment statements. Note: Only server enrollment statements require an event field. Attributes: Name Type Description course_id str Consists in the course in which the student was enrolled or unenrolled. mode str Takes either audit , honor , professional or verified value. It identifies the student\u2019s enrollment mode. user_id int Identifies the student who was enrolled or unenrolled. Source code in ralph/models/edx/enrollment/fields/events.py class EnrollmentEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field for enrollment statements. Note: Only server enrollment statements require an `event` field. Attributes: course_id (str): Consists in the course in which the student was enrolled or unenrolled. mode (str): Takes either `audit`, `honor`, `professional` or `verified` value. It identifies the student\u2019s enrollment mode. user_id (int): Identifies the student who was enrolled or unenrolled. \"\"\" course_id : str mode : Union [ Literal [ \"audit\" ], Literal [ \"honor\" ], Literal [ \"professional\" ], Literal [ \"verified\" ] ] user_id : Union [ int , Literal [ \"\" ], None ]","title":"EnrollmentEventField"},{"location":"models/edx/#ralph.models.edx.enrollment.statements","text":"Enrollment event model definitions","title":"statements"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.EdxCourseEnrollmentActivated","text":"Represents the edx.course.enrollment.activated server statement. The server emits it when a student enrolls in a course. Attributes: Name Type Description event EnrollmentEventField See EnrollmentEventField. event_type str Consists of the value edx.course.enrollment.activated . name str Consists of the value edx.course.enrollment.activated . Source code in ralph/models/edx/enrollment/statements.py class EdxCourseEnrollmentActivated ( BaseServerModel ): \"\"\"Represents the `edx.course.enrollment.activated` server statement. The server emits it when a student enrolls in a course. Attributes: event (EnrollmentEventField): See EnrollmentEventField. event_type (str): Consists of the value `edx.course.enrollment.activated`. name (str): Consists of the value `edx.course.enrollment.activated`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"edx.course.enrollment.activated\" ) event : Union [ Json [ EnrollmentEventField ], # pylint: disable=unsubscriptable-object EnrollmentEventField , ] event_type : Literal [ \"edx.course.enrollment.activated\" ] name : Literal [ \"edx.course.enrollment.activated\" ]","title":"EdxCourseEnrollmentActivated"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.EdxCourseEnrollmentDeactivated","text":"Represents the edx.course.enrollment.deactivated server statement. The server emits it when a student unenrolls from a course. Attributes: Name Type Description event EnrollmentEventField See EnrollmentEventField. event_type str Consists of the value edx.course.enrollment.deactivated . name str Consists of the value edx.course.enrollment.deactivated . Source code in ralph/models/edx/enrollment/statements.py class EdxCourseEnrollmentDeactivated ( BaseServerModel ): \"\"\"Represents the `edx.course.enrollment.deactivated` server statement. The server emits it when a student unenrolls from a course. Attributes: event (EnrollmentEventField): See EnrollmentEventField. event_type (str): Consists of the value `edx.course.enrollment.deactivated`. name (str): Consists of the value `edx.course.enrollment.deactivated`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"edx.course.enrollment.deactivated\" ) event : Union [ Json [ EnrollmentEventField ], # pylint: disable=unsubscriptable-object EnrollmentEventField , ] event_type : Literal [ \"edx.course.enrollment.deactivated\" ] name : Literal [ \"edx.course.enrollment.deactivated\" ]","title":"EdxCourseEnrollmentDeactivated"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.EdxCourseEnrollmentModeChanged","text":"Represents the edx.course.enrollment.mode_changed server statement. The server emits it when the process of changing a student\u2019s student_courseenrollment.mode to a different mode is complete. Attributes: Name Type Description event EnrollmentEventField See EnrollmentEventField. event_type str Consists of the value edx.course.enrollment.mode_changed . name str Consists of the value edx.course.enrollment.mode_changed . Source code in ralph/models/edx/enrollment/statements.py class EdxCourseEnrollmentModeChanged ( BaseServerModel ): \"\"\"Represents the `edx.course.enrollment.mode_changed` server statement. The server emits it when the process of changing a student\u2019s student_courseenrollment.mode to a different mode is complete. Attributes: event (EnrollmentEventField): See EnrollmentEventField. event_type (str): Consists of the value `edx.course.enrollment.mode_changed`. name (str): Consists of the value `edx.course.enrollment.mode_changed`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"edx.course.enrollment.mode_changed\" ) event : Union [ Json [ EnrollmentEventField ], # pylint: disable=unsubscriptable-object EnrollmentEventField , ] event_type : Literal [ \"edx.course.enrollment.mode_changed\" ] name : Literal [ \"edx.course.enrollment.mode_changed\" ]","title":"EdxCourseEnrollmentModeChanged"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.EdxCourseEnrollmentUpgradeSucceeded","text":"Represents the edx.course.enrollment.upgrade.succeeded server statement. The server emits it when the process of upgrading a student\u2019s student_courseenrollment.mode from audit or honor to verified is complete. Attributes: Name Type Description context EdxCourseEnrollmentUpgradeSucceededContextField See EdxCourseEnrollmentUpgradeSucceededContextField. event_type str Consists of the value edx.course.enrollment.upgrade.succeeded . name str Consists of the value edx.course.enrollment.upgrade.succeeded . Source code in ralph/models/edx/enrollment/statements.py class EdxCourseEnrollmentUpgradeSucceeded ( BaseServerModel ): \"\"\"Represents the `edx.course.enrollment.upgrade.succeeded` server statement. The server emits it when the process of upgrading a student\u2019s student_courseenrollment.mode from `audit` or `honor` to `verified` is complete. Attributes: context (EdxCourseEnrollmentUpgradeSucceededContextField): See EdxCourseEnrollmentUpgradeSucceededContextField. event_type (str): Consists of the value `edx.course.enrollment.upgrade.succeeded`. name (str): Consists of the value `edx.course.enrollment.upgrade.succeeded`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"edx.course.enrollment.upgrade.succeeded\" ) context : EdxCourseEnrollmentUpgradeSucceededContextField event_type : Literal [ \"edx.course.enrollment.upgrade.succeeded\" ] name : Literal [ \"edx.course.enrollment.upgrade.succeeded\" ]","title":"EdxCourseEnrollmentUpgradeSucceeded"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.UIEdxCourseEnrollmentUpgradeClicked","text":"Represents the edx.course.enrollment.upgrade_clicked browser statement. The browser emits it when a student clicks ChallengeYourself option, and the process of upgrading the student_courseenrollment.mode for the student to verified begins. Attributes: Name Type Description context EdxCourseEnrollmentUpgradeClickedContextField See EdxCourseEnrollmentUpgradeClickedContextField. event_type str Consists of the value edx.course.enrollment.upgrade_clicked . name str Consists of the value edx.course.enrollment.upgrade_clicked . Source code in ralph/models/edx/enrollment/statements.py class UIEdxCourseEnrollmentUpgradeClicked ( BaseBrowserModel ): \"\"\"Represents the `edx.course.enrollment.upgrade_clicked` browser statement. The browser emits it when a student clicks <kbd>ChallengeYourself</kbd> option, and the process of upgrading the student_courseenrollment.mode for the student to `verified` begins. Attributes: context (EdxCourseEnrollmentUpgradeClickedContextField): See EdxCourseEnrollmentUpgradeClickedContextField. event_type (str): Consists of the value `edx.course.enrollment.upgrade_clicked`. name (str): Consists of the value `edx.course.enrollment.upgrade_clicked`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"edx.course.enrollment.upgrade_clicked\" ) context : EdxCourseEnrollmentUpgradeClickedContextField event_type : Literal [ \"edx.course.enrollment.upgrade_clicked\" ] name : Literal [ \"edx.course.enrollment.upgrade_clicked\" ]","title":"UIEdxCourseEnrollmentUpgradeClicked"},{"location":"models/edx/#ralph.models.edx.navigational","text":"","title":"navigational"},{"location":"models/edx/#ralph.models.edx.navigational.fields","text":"","title":"fields"},{"location":"models/edx/#ralph.models.edx.navigational.fields.events","text":"Navigational event field definition","title":"events"},{"location":"models/edx/#ralph.models.edx.navigational.fields.events.NavigationalEventField","text":"Represents the event field of navigational statements. Note: All navigational statements are emitted from the browser. Attributes: Name Type Description id str Consists of the edX ID of the sequence. old int For seq_goto , it consists of the index of the unit being jumped to. For seq_next and seq_prev , it consists of the index of the unit being navigated to. new int For seq_goto , it consists of the index of the unit being jumped from. For seq_next and seq_prev , it consists of the index of the unit being navigated away from. Source code in ralph/models/edx/navigational/fields/events.py class NavigationalEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of navigational statements. Note: All navigational statements are emitted from the browser. Attributes: id (str): Consists of the edX ID of the sequence. old (int): For `seq_goto`, it consists of the index of the unit being jumped to. For `seq_next` and `seq_prev`, it consists of the index of the unit being navigated to. new (int): For `seq_goto`, it consists of the index of the unit being jumped from. For `seq_next` and `seq_prev`, it consists of the index of the unit being navigated away from. \"\"\" id : constr ( regex = ( r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type\" # noqa : F722 r \"@sequential\\+block@[a-f0-9] {32} $\" # noqa : F722 ) ) new : int old : int","title":"NavigationalEventField"},{"location":"models/edx/#ralph.models.edx.navigational.statements","text":"Navigational event model definitions","title":"statements"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UIPageClose","text":"Represents the page_close browser statement. This type of statement is triggered when the user navigates to the next page or closes the browser window (when the JavaScript window.onunload event is called). Attributes: Name Type Description event str Consists of the string value {} . event_type str Consists of the value page_close . name str Consists of the value page_close . Source code in ralph/models/edx/navigational/statements.py class UIPageClose ( BaseBrowserModel ): \"\"\"Represents the `page_close` browser statement. This type of statement is triggered when the user navigates to the next page or closes the browser window (when the JavaScript `window.onunload` event is called). Attributes: event (str): Consists of the string value `{}`. event_type (str): Consists of the value `page_close`. name (str): Consists of the value `page_close`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"page_close\" ) # pylint: disable=unsubscriptable-object event : Literal [ \" {} \" ] event_type : Literal [ \"page_close\" ] name : Literal [ \"page_close\" ]","title":"UIPageClose"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqGoto","text":"Represents the seq_goto browser statement. The browser emits such statement when a user selects a navigational control. seq_goto is emitted when a user jumps between units in a sequence. Attributes: Name Type Description event obj Consists of member fields that identify specifics triggered event. event_type str Consists of the value seq_goto . name str Consists of the value seq_goto . Source code in ralph/models/edx/navigational/statements.py class UISeqGoto ( BaseBrowserModel ): \"\"\"Represents the `seq_goto` browser statement. The browser emits such statement when a user selects a navigational control. `seq_goto` is emitted when a user jumps between units in a sequence. Attributes: event (obj): Consists of member fields that identify specifics triggered event. event_type (str): Consists of the value `seq_goto`. name (str): Consists of the value `seq_goto`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"seq_goto\" ) # pylint: disable=unsubscriptable-object event : Union [ Json [ NavigationalEventField ], NavigationalEventField ] event_type : Literal [ \"seq_goto\" ] name : Literal [ \"seq_goto\" ]","title":"UISeqGoto"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqNext","text":"Represents the seq_next browser statement. The browser emits such statement when a user selects a navigational control. seq_next is emitted when a user navigates to the next unit in a sequence. Attributes: Name Type Description event obj Consists of member fields that identify specifics triggered event. event_type str Consists of the value seq_next . name str Consists of the value seq_next . Source code in ralph/models/edx/navigational/statements.py class UISeqNext ( BaseBrowserModel ): \"\"\"Represents the `seq_next` browser statement. The browser emits such statement when a user selects a navigational control. `seq_next` is emitted when a user navigates to the next unit in a sequence. Attributes: event (obj): Consists of member fields that identify specifics triggered event. event_type (str): Consists of the value `seq_next`. name (str): Consists of the value `seq_next`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"seq_next\" ) # pylint: disable=unsubscriptable-object event : Union [ Json [ NavigationalEventField ], NavigationalEventField ] event_type : Literal [ \"seq_next\" ] name : Literal [ \"seq_next\" ] @validator ( \"event\" ) @classmethod def validate_next_jump_event_field ( cls , value ): \"\"\"Checks that event.new is equal to event.old + 1.\"\"\" if value . new != value . old + 1 : raise ValueError ( \"event.new - event.old should be equal to 1\" ) return value","title":"UISeqNext"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqNext.validate_next_jump_event_field","text":"Checks that event.new is equal to event.old + 1. Source code in ralph/models/edx/navigational/statements.py @validator ( \"event\" ) @classmethod def validate_next_jump_event_field ( cls , value ): \"\"\"Checks that event.new is equal to event.old + 1.\"\"\" if value . new != value . old + 1 : raise ValueError ( \"event.new - event.old should be equal to 1\" ) return value","title":"validate_next_jump_event_field()"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqPrev","text":"Represents the seq_prev browser statement. The browser emits such statement when a user selects a navigational control. seq_prev is emitted when a user navigates to the previous unit in a sequence. Attributes: Name Type Description event obj Consists of member fields that identify specifics triggered event. event_type str Consists of the value seq_prev . name str Consists of the value seq_prev . Source code in ralph/models/edx/navigational/statements.py class UISeqPrev ( BaseBrowserModel ): \"\"\"Represents the `seq_prev` browser statement. The browser emits such statement when a user selects a navigational control. `seq_prev` is emitted when a user navigates to the previous unit in a sequence. Attributes: event (obj): Consists of member fields that identify specifics triggered event. event_type (str): Consists of the value `seq_prev`. name (str): Consists of the value `seq_prev`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"seq_prev\" ) # pylint: disable=unsubscriptable-object event : Union [ Json [ NavigationalEventField ], NavigationalEventField ] event_type : Literal [ \"seq_prev\" ] name : Literal [ \"seq_prev\" ] @validator ( \"event\" ) @classmethod def validate_prev_jump_event_field ( cls , value ): \"\"\"Checks that event.new is equal to event.old - 1.\"\"\" if value . new != value . old - 1 : raise ValueError ( \"event.old - event.new should be equal to 1\" ) return value","title":"UISeqPrev"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqPrev.validate_prev_jump_event_field","text":"Checks that event.new is equal to event.old - 1. Source code in ralph/models/edx/navigational/statements.py @validator ( \"event\" ) @classmethod def validate_prev_jump_event_field ( cls , value ): \"\"\"Checks that event.new is equal to event.old - 1.\"\"\" if value . new != value . old - 1 : raise ValueError ( \"event.old - event.new should be equal to 1\" ) return value","title":"validate_prev_jump_event_field()"},{"location":"models/edx/#ralph.models.edx.problem_interaction","text":"","title":"problem_interaction"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields","text":"","title":"fields"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events","text":"Problem interaction events model event fields definitions","title":"events"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.CorrectMap","text":"Represents the correct_map sub-field. Attributes: Name Type Description answervariable str Consists of the variable chosen in answer in the case of optionresponse provided with variables. correctness str Consists either of the correct or incorrect value. hint str Consists of optional hint. hint_mode str Consists either of the value on_request or always value. msg str Consists of extra message response. npoints int Consists of awarded points. queuestate json see QueueStateField. Source code in ralph/models/edx/problem_interaction/fields/events.py class CorrectMap ( BaseModelWithConfig ): \"\"\"Represents the `correct_map` sub-field. Attributes: answervariable (str): Consists of the variable chosen in answer in the case of optionresponse provided with variables. correctness (str): Consists either of the `correct` or `incorrect` value. hint (str): Consists of optional hint. hint_mode (str): Consists either of the value `on_request` or `always` value. msg (str): Consists of extra message response. npoints (int): Consists of awarded points. queuestate (json): see QueueStateField. \"\"\" answervariable : Union [ Literal [ None ], None , str ] correctness : Union [ Literal [ \"correct\" ], Literal [ \"incorrect\" ]] hint : Optional [ str ] hintmode : Optional [ Union [ Literal [ \"on_request\" ], Literal [ \"always\" ]]] msg : str npoints : Optional [ int ] queuestate : Optional [ QueueState ]","title":"CorrectMap"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.EdxProblemHintDemandhintDisplayedEventField","text":"Represents the event field of EdxProblemHintDemandhintDisplayed model. Attributes: Name Type Description hint_index int Consists of the identifier for the hint that was displayed to the user. hint_len int Consists of the total number of hints defined for this problem. hint_text str Consists of the text of the hint that was displayed to the user. module_id str Consists of the identifier for the problem component for which the user requested the hint. Source code in ralph/models/edx/problem_interaction/fields/events.py class EdxProblemHintDemandhintDisplayedEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `EdxProblemHintDemandhintDisplayed` model. Attributes: hint_index (int): Consists of the identifier for the hint that was displayed to the user. hint_len (int): Consists of the total number of hints defined for this problem. hint_text (str): Consists of the text of the hint that was displayed to the user. module_id (str): Consists of the identifier for the problem component for which the user requested the hint. \"\"\" hint_index : int hint_len : int hint_text : str module_id : str","title":"EdxProblemHintDemandhintDisplayedEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.EdxProblemHintFeedbackDisplayedEventField","text":"Represents the event field of EdxProblemHintFeedbackDisplayed model. Attributes: Name Type Description choice_all list Lists all of the answer choices for problems with multiple possible answers defined. correctness bool True if the student_answer value is correct, else False . hint_label str Consists of the feedback message given for the answer correctness. hints list Consists of a text member field with the given feedback string. module_id str Consists of the identifier for the problem component for which the user received the feedback. problem_part_id str Consists of the specific problem for which the user received feedback. question_type str Consists of the XML tag that identifies the problem type. student_answer list Consists of the answer value(s) selected or supplied by the user. trigger_type str Identifies the type of feedback obtained by the student_answer response. Consists either of single or compound value. Source code in ralph/models/edx/problem_interaction/fields/events.py class EdxProblemHintFeedbackDisplayedEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `EdxProblemHintFeedbackDisplayed` model. Attributes: choice_all (list): Lists all of the answer choices for problems with multiple possible answers defined. correctness (bool): `True` if the `student_answer` value is correct, else `False`. hint_label (str): Consists of the feedback message given for the answer correctness. hints (list): Consists of a text member field with the given feedback string. module_id (str): Consists of the identifier for the problem component for which the user received the feedback. problem_part_id (str): Consists of the specific problem for which the user received feedback. question_type (str): Consists of the XML tag that identifies the problem type. student_answer (list): Consists of the answer value(s) selected or supplied by the user. trigger_type (str): Identifies the type of feedback obtained by the `student_answer` response. Consists either of `single` or `compound` value. \"\"\" choice_all : Optional [ list [ str ]] correctness : bool hint_label : str hints : list [ dict ] module_id : str problem_part_id : str question_type : Union [ Literal [ \"stringresponse\" ], Literal [ \"choiceresponse\" ], Literal [ \"multiplechoiceresponse\" ], Literal [ \"numericalresponse\" ], Literal [ \"optionresponse\" ], ] student_answer : list [ str ] trigger_type : Union [ Literal [ \"single\" ], Literal [ \"compound\" ]]","title":"EdxProblemHintFeedbackDisplayedEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ProblemCheckEventField","text":"Represents the event field of ProblemCheck model. Attributes: Name Type Description answers dict Consists of a dictionary of problem ID and the corresponding internal answer identifier for each problem. attempts int Consists of the number of times the user attempted to answer the problem. correct_map dict Consists of the evaluation data for each answer. grade int Consists of the current grade value. max_grade int Consists of the maximum possible grade value. problem_id str Consists of the ID of the problem that was checked. state json Consists of the current problem state. submission dict Consists of a dictionnary of data about the given answer. success str Consists of either the correct or incorrect value. Source code in ralph/models/edx/problem_interaction/fields/events.py class ProblemCheckEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ProblemCheck` model. Attributes: answers (dict): Consists of a dictionary of problem ID and the corresponding internal answer identifier for each problem. attempts (int): Consists of the number of times the user attempted to answer the problem. correct_map (dict): Consists of the evaluation data for each answer. grade (int): Consists of the current grade value. max_grade (int): Consists of the maximum possible grade value. problem_id (str): Consists of the ID of the problem that was checked. state (json): Consists of the current problem state. submission (dict): Consists of a dictionnary of data about the given answer. success (str): Consists of either the `correct` or `incorrect` value. \"\"\" answers : dict [ constr ( regex = r \"^[a-f0-9] {32} _[0-9]_[0-9]$\" ), # noqa : F722 Union [ list [ str ], str ], ] attempts : int correct_map : dict [ constr ( regex = r \"^[a-f0-9] {32} _[0-9]_[0-9]$\" ), # noqa : F722 CorrectMap , ] grade : int max_grade : int problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) state : State submission : dict [ constr ( regex = r \"^[a-f0-9] {32} _[0-9]_[0-9]$\" ), # noqa : F722 SubmissionAnswerField , ] success : Union [ Literal [ \"correct\" ], Literal [ \"incorrect\" ]]","title":"ProblemCheckEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ProblemCheckFailEventField","text":"Represents the event field of ProblemCheckFail model. Attributes: Name Type Description answers dict Consists of a dictionary of problem ID and the internal answer identifier for each problem. failure str Consists either of the closed or unreset value. problem_id str Consists of the ID of the problem that was checked. state dict Consists of the current problem state. Source code in ralph/models/edx/problem_interaction/fields/events.py class ProblemCheckFailEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ProblemCheckFail` model. Attributes: answers (dict): Consists of a dictionary of problem ID and the internal answer identifier for each problem. failure (str): Consists either of the `closed` or `unreset` value. problem_id (str): Consists of the ID of the problem that was checked. state (dict): Consists of the current problem state. \"\"\" answers : dict [ constr ( regex = r \"^[a-f0-9] {32} _[0-9]_[0-9]$\" ), # noqa : F722 Union [ list [ str ], str ], ] failure : Union [ Literal [ \"closed\" ], Literal [ \"unreset\" ]] problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) state : State","title":"ProblemCheckFailEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ProblemRescoreEventField","text":"Represents the event field of ProblemRescore model. Attributes: Name Type Description attempts int Consists of the number of attempts of rescoring. correct_map json see CorrectMapSubFields. new_score int Consists of the new score obtained after rescoring. new_total int Consists of the new total summed after rescoring. orig_score int Consists of the original scored before rescoring. problem_id str Consists of the ID of the problem being rescored. state json see StateField. success str Consists either of the correct or incorrect value. Source code in ralph/models/edx/problem_interaction/fields/events.py class ProblemRescoreEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ProblemRescore` model. Attributes: attempts (int): Consists of the number of attempts of rescoring. correct_map (json): see CorrectMapSubFields. new_score (int): Consists of the new score obtained after rescoring. new_total (int): Consists of the new total summed after rescoring. orig_score (int): Consists of the original scored before rescoring. problem_id (str): Consists of the ID of the problem being rescored. state (json): see StateField. success (str): Consists either of the `correct` or `incorrect` value. \"\"\" attempts : int correct_map : CorrectMap new_score : int new_total : int orig_score : int orig_total : int problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) state : State success : Union [ Literal [ \"correct\" ], Literal [ \"incorrect\" ]]","title":"ProblemRescoreEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ProblemRescoreFailEventField","text":"Represents the event field of ProblemRescoreFail model. Attributes: Name Type Description failure str Consists either of the closed or unreset value. problem_id str Consists of the ID of the problem being checked. state json see StateField. Source code in ralph/models/edx/problem_interaction/fields/events.py class ProblemRescoreFailEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ProblemRescoreFail` model. Attributes: failure (str): Consists either of the `closed` or `unreset` value. problem_id (str): Consists of the ID of the problem being checked. state (json): see StateField. \"\"\" failure : Union [ Literal [ \"closed\" ], Literal [ \"unreset\" ]] problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) state : State","title":"ProblemRescoreFailEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.QueueState","text":"Represents the queuestate sub-field. Attributes: Name Type Description key str Consists of a secret string. time str Consists of a string dump of a DateTime object in the format \u2018%Y%m%d%H%M%S\u2019. Source code in ralph/models/edx/problem_interaction/fields/events.py class QueueState ( BaseModelWithConfig ): \"\"\"Represents the `queuestate` sub-field. Attributes: key (str): Consists of a secret string. time (str): Consists of a string dump of a DateTime object in the format '%Y%m%d%H%M%S'. \"\"\" key : str time : datetime","title":"QueueState"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ResetProblemEventField","text":"Represents the event field of ResetProblem model. Attributes: Name Type Description new_state json see StateField. old_state json see StateField. problem_id str Consists of the ID of the problem being reset. Source code in ralph/models/edx/problem_interaction/fields/events.py class ResetProblemEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ResetProblem` model. Attributes: new_state (json): see StateField. old_state (json): see StateField. problem_id (str): Consists of the ID of the problem being reset. \"\"\" new_state : State old_state : State problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 )","title":"ResetProblemEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ResetProblemFailEventField","text":"Represents the event field of ResetProblemFail model. Attributes: Name Type Description failure str Consists either of closed or not_done value. old_state json see StateField. problem_id str Consists of the ID of the problem being reset. Source code in ralph/models/edx/problem_interaction/fields/events.py class ResetProblemFailEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ResetProblemFail` model. Attributes: failure (str): Consists either of `closed` or `not_done` value. old_state (json): see StateField. problem_id (str): Consists of the ID of the problem being reset. \"\"\" failure : Union [ Literal [ \"closed\" ], Literal [ \"not_done\" ]] old_state : State problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 )","title":"ResetProblemFailEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.SaveProblemFailEventField","text":"Represents the event field of SaveProblemFail model. Attributes: Name Type Description answers dict Consists of a dict of the answer string or a list or a dict of the answer strings if multiple choices are allowed. failure str Consists either of closed or done value. problem_id str Consists of the ID of the problem being saved. state json see StateField. Source code in ralph/models/edx/problem_interaction/fields/events.py class SaveProblemFailEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `SaveProblemFail` model. Attributes: answers (dict): Consists of a dict of the answer string or a list or a dict of the answer strings if multiple choices are allowed. failure (str): Consists either of `closed` or `done` value. problem_id (str): Consists of the ID of the problem being saved. state (json): see StateField. \"\"\" answers : dict [ str , Union [ int , str , list , dict ]] failure : Union [ Literal [ \"closed\" ], Literal [ \"done\" ]] problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) state : State","title":"SaveProblemFailEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.SaveProblemSuccessEventField","text":"Represents the event field of SaveProblemSuccess model. Attributes: Name Type Description answers dict Consists of a dict of the answer string or a list or a dict of the answer strings if multiple choices are allowed. problem_id str Consists of the ID of the problem being saved. state json see StateField. Source code in ralph/models/edx/problem_interaction/fields/events.py class SaveProblemSuccessEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `SaveProblemSuccess` model. Attributes: answers (dict): Consists of a dict of the answer string or a list or a dict of the answer strings if multiple choices are allowed. problem_id (str): Consists of the ID of the problem being saved. state (json): see StateField. \"\"\" answers : dict [ str , Union [ int , str , list , dict ]] problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 ) state : State","title":"SaveProblemSuccessEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ShowAnswerEventField","text":"Represents the event field of ShowAnswer model. Attributes: Name Type Description problem_id str Consists of the ID of the problem being shown. Source code in ralph/models/edx/problem_interaction/fields/events.py class ShowAnswerEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ShowAnswer` model. Attributes: problem_id (str): Consists of the ID of the problem being shown. \"\"\" problem_id : constr ( regex = r \"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\" # noqa : F722 r \"type@problem\\+block@[a-f0-9] {32} $\" # noqa : F722 )","title":"ShowAnswerEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.State","text":"Represents the state sub-field. Attributes: Name Type Description correct_map dict see CorrectMapSubFields. done bool True if the problem is answered, else False . input_state dict Consists of the state field given before answering. seed int Consists of the seed element for the current state. student_answers dict Consists of the answer(s) given by the user. Source code in ralph/models/edx/problem_interaction/fields/events.py class State ( BaseModelWithConfig ): \"\"\"Represents the `state` sub-field. Attributes: correct_map (dict): see CorrectMapSubFields. done (bool): `True` if the problem is answered, else `False`. input_state (dict): Consists of the state field given before answering. seed (int): Consists of the seed element for the current state. student_answers (dict): Consists of the answer(s) given by the user. \"\"\" correct_map : dict [ constr ( regex = r \"^[a-f0-9] {32} _[0-9]_[0-9]$\" ), # noqa : F722 CorrectMap , ] done : Optional [ bool ] input_state : dict seed : int student_answers : dict","title":"State"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.SubmissionAnswerField","text":"Represents the information in a problem of submission field. Attributes: Name Type Description answer str, list Consists of the answer string or a list of the answer strings if multiple choices are allorwed. correct bool True if the answer value is correct, else False . input_type str Consists of the type of value that the student supplies for the response_type . question str Consists of the question text. response_type str Consists of the type of problem. variant str Consists of the unique ID of the variant that was presented to this user. Source code in ralph/models/edx/problem_interaction/fields/events.py class SubmissionAnswerField ( BaseModelWithConfig ): \"\"\"Represents the information in a problem of `submission` field. Attributes: answer (str, list): Consists of the answer string or a list of the answer strings if multiple choices are allorwed. correct (bool): `True` if the `answer` value is correct, else `False`. input_type (str): Consists of the type of value that the student supplies for the `response_type`. question (str): Consists of the question text. response_type (str): Consists of the type of problem. variant (str): Consists of the unique ID of the variant that was presented to this user. \"\"\" answer : Union [ str , list [ str ]] correct : bool input_type : str question : str response_type : str variant : str","title":"SubmissionAnswerField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.UIProblemResetEventField","text":"Represents the event field of ProblemReset model. Attributes: Name Type Description answers str, list Consists of the answer string or a list of the answer strings if multiple choices are allowed. Source code in ralph/models/edx/problem_interaction/fields/events.py class UIProblemResetEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ProblemReset` model. Attributes: answers (str, list): Consists of the answer string or a list of the answer strings if multiple choices are allowed. \"\"\" answers : Union [ str , list [ str ]]","title":"UIProblemResetEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.UIProblemShowEventField","text":"Represents the event field of ProblemShow model. Attributes: Name Type Description problem str Consists of the optional name value that the course creators supply or the system-generated hash code for the problem being shown. Source code in ralph/models/edx/problem_interaction/fields/events.py class UIProblemShowEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of `ProblemShow` model. Attributes: problem (str): Consists of the optional name value that the course creators supply or the system-generated hash code for the problem being shown. \"\"\" problem : str","title":"UIProblemShowEventField"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements","text":"Problem interaction events model definitions","title":"statements"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.EdxProblemHintDemandhintDisplayed","text":"Represents the edx.problem.hint.demandhint_displayed server event. This event is triggered when a user requests a hint for a problem. Attributes: Name Type Description event dict See EdxProblemHintDemandhintDisplayedEventField. event_type str Consists of the value edx.problem.hint.demandhint_displayed . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class EdxProblemHintDemandhintDisplayed ( BaseServerModel ): \"\"\"Represents the `edx.problem.hint.demandhint_displayed` server event. This event is triggered when a user requests a hint for a problem. Attributes: event (dict): See EdxProblemHintDemandhintDisplayedEventField. event_type (str): Consists of the value `edx.problem.hint.demandhint_displayed`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"edx.problem.hint.demandhint_displayed\" ) event : EdxProblemHintDemandhintDisplayedEventField event_type : Literal [ \"edx.problem.hint.demandhint_displayed\" ] page : Literal [ \"x_module\" ]","title":"EdxProblemHintDemandhintDisplayed"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.EdxProblemHintFeedbackDisplayed","text":"Represents the edx.problem.hint.feedback_displayed server event. This event is triggered when a user receives a hint after answering a problem. Attributes: Name Type Description event dict See EdxProblemHintFeedbackDisplayedEventField. event_type str Consists of the value edx.problem.hint.feedback_displayed . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class EdxProblemHintFeedbackDisplayed ( BaseServerModel ): \"\"\"Represents the `edx.problem.hint.feedback_displayed` server event. This event is triggered when a user receives a hint after answering a problem. Attributes: event (dict): See EdxProblemHintFeedbackDisplayedEventField. event_type (str): Consists of the value `edx.problem.hint.feedback_displayed`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"edx.problem.hint.feedback_displayed\" ) event : EdxProblemHintFeedbackDisplayedEventField event_type : Literal [ \"edx.problem.hint.feedback_displayed\" ] page : Literal [ \"x_module\" ]","title":"EdxProblemHintFeedbackDisplayed"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ProblemCheck","text":"Represents the problem_check server event. This event is triggered when a user checks a problem. Attributes: Name Type Description event dict See ProblemCheckEventField. event_type str Consists of the value problem_check . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ProblemCheck ( BaseServerModel ): \"\"\"Represents the `problem_check` server event. This event is triggered when a user checks a problem. Attributes: event (dict): See ProblemCheckEventField. event_type (str): Consists of the value `problem_check`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"problem_check\" ) event : ProblemCheckEventField event_type : Literal [ \"problem_check\" ] page : Literal [ \"x_module\" ]","title":"ProblemCheck"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ProblemCheckFail","text":"Represents the problem_check_fail server event. This event is triggered when a user checks a problem and a failure prevents the problem from being checked successfully. Attributes: Name Type Description event dict See ProblemCheckFailEventField. event_type str Consists of the value problem_check_fail . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ProblemCheckFail ( BaseServerModel ): \"\"\"Represents the `problem_check_fail` server event. This event is triggered when a user checks a problem and a failure prevents the problem from being checked successfully. Attributes: event (dict): See ProblemCheckFailEventField. event_type (str): Consists of the value `problem_check_fail`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"problem_check_fail\" ) event : ProblemCheckFailEventField event_type : Literal [ \"problem_check_fail\" ] page : Literal [ \"x_module\" ]","title":"ProblemCheckFail"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ProblemRescore","text":"Represents the problem_rescore server event. Attributes: Name Type Description event dict See ProblemRescoreEventField. event_type str Consists of the value problem_rescore . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ProblemRescore ( BaseServerModel ): \"\"\"Represents the `problem_rescore` server event. Attributes: event (dict): See ProblemRescoreEventField. event_type (str): Consists of the value `problem_rescore`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"problem_rescore\" ) event : ProblemRescoreEventField event_type : Literal [ \"problem_rescore\" ] page : Literal [ \"x_module\" ]","title":"ProblemRescore"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ProblemRescoreFail","text":"Represents the problem_rescore_fail server event. Attributes: Name Type Description event dict See ProblemRescoreFailEventField. event_type str Consists of the value problem_rescore_fail . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ProblemRescoreFail ( BaseServerModel ): \"\"\"Represents the `problem_rescore_fail` server event. Attributes: event (dict): See ProblemRescoreFailEventField. event_type (str): Consists of the value `problem_rescore_fail`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"problem_rescore_fail\" ) event : ProblemRescoreFailEventField event_type : Literal [ \"problem_rescore_fail\" ] page : Literal [ \"x_module\" ]","title":"ProblemRescoreFail"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ResetProblem","text":"Represents the reset_problem server event. Attributes: Name Type Description event dict See ResetProblemEventField. event_type str Consists of the value reset_problem . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ResetProblem ( BaseServerModel ): \"\"\"Represents the `reset_problem` server event. Attributes: event (dict): See ResetProblemEventField. event_type (str): Consists of the value `reset_problem`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"reset_problem\" ) event : ResetProblemEventField event_type : Literal [ \"reset_problem\" ] page : Literal [ \"x_module\" ]","title":"ResetProblem"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ResetProblemFail","text":"Represents the reset_problem_fail server event. Attributes: Name Type Description event dict See ResetProblemFailEventField. event_type str Consists of the value reset_problem_fail . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ResetProblemFail ( BaseServerModel ): \"\"\"Represents the `reset_problem_fail` server event. Attributes: event (dict): See ResetProblemFailEventField. event_type (str): Consists of the value `reset_problem_fail`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"reset_problem_fail\" ) event : ResetProblemFailEventField event_type : Literal [ \"reset_problem_fail\" ] page : Literal [ \"x_module\" ]","title":"ResetProblemFail"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.SaveProblemFail","text":"Represents the save_problem_fail server event. Attributes: Name Type Description event dict See SaveProblemFailEventField. event_type str Consists of the value save_problem_fail . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class SaveProblemFail ( BaseServerModel ): \"\"\"Represents the `save_problem_fail` server event. Attributes: event (dict): See SaveProblemFailEventField. event_type (str): Consists of the value `save_problem_fail`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"save_problem_fail\" ) event : SaveProblemFailEventField event_type : Literal [ \"save_problem_fail\" ] page : Literal [ \"x_module\" ]","title":"SaveProblemFail"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.SaveProblemSuccess","text":"Represents the save_problem_success server event. Attributes: Name Type Description event dict See SaveProblemSuccessEventField. event_type str Consists of the value save_problem_success . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class SaveProblemSuccess ( BaseServerModel ): \"\"\"Represents the `save_problem_success` server event. Attributes: event (dict): See SaveProblemSuccessEventField. event_type (str): Consists of the value `save_problem_success`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"save_problem_success\" ) event : SaveProblemSuccessEventField event_type : Literal [ \"save_problem_success\" ] page : Literal [ \"x_module\" ]","title":"SaveProblemSuccess"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ShowAnswer","text":"Represents the showanswer server event. Attributes: Name Type Description event dict See ShowAnswerEventField. event_type str Consists of the value showanswer . page str Consists of the value x_module . Source code in ralph/models/edx/problem_interaction/statements.py class ShowAnswer ( BaseServerModel ): \"\"\"Represents the `showanswer` server event. Attributes: event (dict): See ShowAnswerEventField. event_type (str): Consists of the value `showanswer`. page (str): Consists of the value `x_module`. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = \"showanswer\" ) event : ShowAnswerEventField event_type : Literal [ \"showanswer\" ] page : Literal [ \"x_module\" ]","title":"ShowAnswer"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemCheck","text":"Represents the problem_check browser event. The browser emits this event when a user checks a problem. Attributes: Name Type Description event str Consists of values of problem being checked, styled as GET parameters. event_type str Consists of the value problem_check . name str Consists of the value problem_check . Source code in ralph/models/edx/problem_interaction/statements.py class UIProblemCheck ( BaseBrowserModel ): \"\"\"Represents the `problem_check` browser event. The browser emits this event when a user checks a problem. Attributes: event (str): Consists of values of problem being checked, styled as `GET` parameters. event_type (str): Consists of the value `problem_check`. name (str): Consists of the value `problem_check`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"problem_check\" ) event : str event_type : Literal [ \"problem_check\" ] name : Literal [ \"problem_check\" ]","title":"UIProblemCheck"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemGraded","text":"Represents the problem_graded browser event. Attributes: Name Type Description event list See ProblemGradedEventField. event_type str Consists of the value problem_graded . name str Consists of the value problem_graded . Source code in ralph/models/edx/problem_interaction/statements.py class UIProblemGraded ( BaseBrowserModel ): \"\"\"Represents the `problem_graded` browser event. Attributes: event (list): See ProblemGradedEventField. event_type (str): Consists of the value `problem_graded`. name (str): Consists of the value `problem_graded`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"problem_graded\" ) event : list [ Union [ str , Literal [ None ], None ]] event_type : Literal [ \"problem_graded\" ] name : Literal [ \"problem_graded\" ]","title":"UIProblemGraded"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemReset","text":"Represents the problem_reset browser event. Attributes: Name Type Description event json See ProblemResetEventField. event_type str Consists of the value problem_reset . name str Consists of the value problem_reset . Source code in ralph/models/edx/problem_interaction/statements.py class UIProblemReset ( BaseBrowserModel ): \"\"\"Represents the `problem_reset` browser event. Attributes: event (json): See ProblemResetEventField. event_type (str): Consists of the value `problem_reset`. name (str): Consists of the value `problem_reset`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"problem_reset\" ) event : Union [ str , Json [ UIProblemResetEventField ], # pylint: disable=unsubscriptable-object UIProblemResetEventField , ] event_type : Literal [ \"problem_reset\" ] name : Literal [ \"problem_reset\" ]","title":"UIProblemReset"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemSave","text":"Represents the problem_save browser event. Attributes: Name Type Description event str Consists of all the answers saved for the problem. event_type str Consists of the value problem_save . name str Consists of the value problem_save . Source code in ralph/models/edx/problem_interaction/statements.py class UIProblemSave ( BaseBrowserModel ): \"\"\"Represents the `problem_save` browser event. Attributes: event (str): Consists of all the answers saved for the problem. event_type (str): Consists of the value `problem_save`. name (str): Consists of the value `problem_save`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"problem_save\" ) event : str event_type : Literal [ \"problem_save\" ] name : Literal [ \"problem_save\" ]","title":"UIProblemSave"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemShow","text":"Represents the problem_show browser event. Attributes: Name Type Description event json See ProblemShowEventField. event_type str Consists of the value problem_save . name str Consists of the value problem_save . Source code in ralph/models/edx/problem_interaction/statements.py class UIProblemShow ( BaseBrowserModel ): \"\"\"Represents the `problem_show` browser event. Attributes: event (json): See ProblemShowEventField. event_type (str): Consists of the value `problem_save`. name (str): Consists of the value `problem_save`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"problem_show\" ) event : Union [ Json [ UIProblemShowEventField ], # pylint: disable=unsubscriptable-object UIProblemShowEventField , ] event_type : Literal [ \"problem_show\" ] name : Literal [ \"problem_show\" ]","title":"UIProblemShow"},{"location":"models/edx/#ralph.models.edx.server","text":"Server event model definitions","title":"server"},{"location":"models/edx/#ralph.models.edx.server.BaseServerModel","text":"Represents the base model all server statements inherit from. Source code in ralph/models/edx/server.py class BaseServerModel ( BaseEdxModel ): \"\"\"Represents the base model all server statements inherit from.\"\"\" event_source : Literal [ \"server\" ]","title":"BaseServerModel"},{"location":"models/edx/#ralph.models.edx.server.Server","text":"Represents a common server statement. This type of event is triggered from the django middleware on each request excluding: /event , login , heartbeat , /segmentio/event and /performance . Attributes: Name Type Description event_type str Consist of the relative URL (without the hostname) of the requested page. Retrieved with: request.META['PATH_INFO'] event str Consist of a JSON string holding the content of the GET or POST request. Retrieved with: json.dumps( { 'GET': dict(request.GET), 'POST': dict(request.POST) } )[:512] Note: Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019, \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by ******** . The JSON string is truncated at 512 characters resulting in invalid JSON. Source code in ralph/models/edx/server.py class Server ( BaseServerModel ): \"\"\"Represents a common server statement. This type of event is triggered from the django middleware on each request excluding: `/event`, `login`, `heartbeat`, `/segmentio/event` and `/performance`. Attributes: event_type (str): Consist of the relative URL (without the hostname) of the requested page. Retrieved with: `request.META['PATH_INFO']` event (str): Consist of a JSON string holding the content of the GET or POST request. Retrieved with: ```json.dumps( { 'GET': dict(request.GET), 'POST': dict(request.POST) } )[:512]``` Note: Values for ['password', 'newpassword', 'new_password', 'oldpassword', 'old_password', 'new_password1', 'new_password2'] are replaced by `********`. The JSON string is truncated at 512 characters resulting in invalid JSON. \"\"\" __selector__ = selector ( event_source = \"server\" , event_type = LazyModelField ( \"context__path\" ) ) # pylint: disable=unsubscriptable-object event_type : Path event : Union [ Json [ ServerEventField ], ServerEventField ]","title":"Server"},{"location":"models/edx/#ralph.models.edx.server.ServerEventField","text":"Represents the event field of the ServerEventModel. Source code in ralph/models/edx/server.py class ServerEventField ( AbstractBaseEventField ): \"\"\"Represents the `event` field of the ServerEventModel.\"\"\" GET : dict POST : dict","title":"ServerEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction","text":"","title":"textbook_interaction"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields","text":"","title":"fields"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events","text":"Textbook interaction event fields definitions","title":"events"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.BookEventField","text":"Represents the book event field. Attributes: Name Type Description chapter str Consists of the name of the PDF file. name str Consists of textbook.pdf.page.loaded if type is set to gotopage , textbook.pdf.page.navigatednext if type is set to prevpage , textbook.pdf.page.navigatednext if type is set to nextpage . new int Consists of the destination page number. old int Consists of the original page number. It applies to gotopage event types only. type str Consists of gotopage value when a page loads after the student manually enters its number, prevpage value when the next page button is clicked or nextpage value when the previous page button is clicked. Source code in ralph/models/edx/textbook_interaction/fields/events.py class BookEventField ( AbstractBaseEventField ): \"\"\"Represents the `book` event field. Attributes: chapter (str): Consists of the name of the PDF file. name (str): Consists of `textbook.pdf.page.loaded` if type is set to `gotopage`, `textbook.pdf.page.navigatednext` if type is set to `prevpage`, `textbook.pdf.page.navigatednext` if type is set to `nextpage`. new (int): Consists of the destination page number. old (int): Consists of the original page number. It applies to `gotopage` event types only. type (str): Consists of `gotopage` value when a page loads after the student manually enters its number, `prevpage` value when the next page button is clicked or `nextpage` value when the previous page button is clicked. \"\"\" chapter : constr ( regex = ( r \"^\\/asset-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type@asset\\+block.+$\" # noqa ) ) name : Union [ Literal [ \"textbook.pdf.page.loaded\" ], Literal [ \"textbook.pdf.page.navigatednext\" ] ] new : int old : Optional [ int ] type : Union [ Literal [ \"gotopage\" ], Literal [ \"prevpage\" ], Literal [ \"nextpage\" ]] = Field ( alias = \"type\" )","title":"BookEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookInteractionBaseEventField","text":"Represents the event field which attributes are common to most of the textbook interaction events. Attributes: Name Type Description chapter str Consists of the name of the PDF file. It begins with the block_id value and ends with the .pdf extension. page int The number of the page that is open when the event is emitted. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookInteractionBaseEventField ( AbstractBaseEventField ): \"\"\"Represents the event field which attributes are common to most of the textbook interaction events. Attributes: chapter (str): Consists of the name of the PDF file. It begins with the `block_id` value and ends with the `.pdf` extension. page (int): The number of the page that is open when the event is emitted. \"\"\" page : int chapter : constr ( regex = ( r \"^\\/asset-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type@asset\\+block.+$\" # noqa ) )","title":"TextbookInteractionBaseEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfChapterNavigatedEventField","text":"Represents the textbook.pdf.chapter.navigated event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.chapter.navigated . chapter str Consists of the name of the PDF file. It begins with the block_id value and ends with the .pdf extension. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfChapterNavigatedEventField ( AbstractBaseEventField ): \"\"\"Represents the `textbook.pdf.chapter.navigated` event field. Attributes: name (str): Consists of the value `textbook.pdf.chapter.navigated`. chapter (str): Consists of the name of the PDF file. It begins with the `block_id` value and ends with the `.pdf` extension. \"\"\" name : Literal [ \"textbook.pdf.chapter.navigated\" ] chapter : constr ( regex = ( r \"^\\/asset-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type@asset\\+block.+$\" # noqa ) ) chapter_title : str","title":"TextbookPdfChapterNavigatedEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfDisplayScaledEventField","text":"Represents the textbook.pdf.display.scaled event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.display.scaled . amount str Consists of a floating point number string value. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfDisplayScaledEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.display.scaled` event field. Attributes: name (str): Consists of the value `textbook.pdf.display.scaled`. amount (str): Consists of a floating point number string value. \"\"\" name : Literal [ \"textbook.pdf.display.scaled\" ] amount : float","title":"TextbookPdfDisplayScaledEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfOutlineToggledEventField","text":"Represents the textbook.pdf.outline.toggled event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.outline.toggled . Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfOutlineToggledEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.outline.toggled` event field. Attribute: name (str): Consists of the value `textbook.pdf.outline.toggled`. \"\"\" name : Literal [ \"textbook.pdf.outline.toggled\" ]","title":"TextbookPdfOutlineToggledEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfPageNavigatedEventField","text":"Represents the textbook.pdf.page.navigated event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.page.navigated . Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfPageNavigatedEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.page.navigated` event field. Attribute: name (str): Consists of the value `textbook.pdf.page.navigated`. \"\"\" name : Literal [ \"textbook.pdf.page.navigated\" ]","title":"TextbookPdfPageNavigatedEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfPageScrolledEventField","text":"Represents the textbook.pdf.page.scrolled event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.page.scrolled . direction str Consists either of the up or down value. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfPageScrolledEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.page.scrolled` event field. Attributes: name (str): Consists of the value `textbook.pdf.page.scrolled`. direction (str): Consists either of the `up` or `down` value. \"\"\" name : Literal [ \"textbook.pdf.page.scrolled\" ] direction : Union [ Literal [ \"up\" ], Literal [ \"down\" ]]","title":"TextbookPdfPageScrolledEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfSearchCaseSensitivityToggledEventField","text":"Represents the textbook.pdf.searchcasesensitivity.toggled event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.searchcasesensitivity.toggled . caseSensitive bool Consists either of the true value if the case sensitive option is selected or false if this option is not selected. highlightAll bool Consists either of the true value if the option to highlight all matches is selected or false if this option is not selected. query str Consists of the value in the search field. status str Consists either of the value not found for a search string that is unsuccessful or blank for successful search strings. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfSearchCaseSensitivityToggledEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.searchcasesensitivity.toggled` event field. Attributes: name (str): Consists of the value `textbook.pdf.searchcasesensitivity.toggled`. caseSensitive (bool): Consists either of the `true` value if the case sensitive option is selected or `false` if this option is not selected. highlightAll (bool): Consists either of the `true` value if the option to highlight all matches is selected or `false` if this option is not selected. query (str): Consists of the value in the search field. status (str): Consists either of the value `not found` for a search string that is unsuccessful or blank for successful search strings. \"\"\" name : Literal [ \"textbook.pdf.searchcasesensitivity.toggled\" ] caseSensitive : bool highlightAll : bool query : str status : str","title":"TextbookPdfSearchCaseSensitivityToggledEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfSearchExecutedEventField","text":"Represents the textbook.pdf.search.executed event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.search.executed . caseSensitive bool Consists either of the true value if the case sensitive option is selected or false if this option is not selected. highlightAll bool Consists either of the true value if the option to highlight all matches is selected or false if this option is not selected. query str Consists of the value in the search field. status str Consists either of the value not found for a search string that is unsuccessful or blank for successful search strings. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfSearchExecutedEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.search.executed` event field. Attributes: name (str): Consists of the value `textbook.pdf.search.executed`. caseSensitive (bool): Consists either of the `true` value if the case sensitive option is selected or `false` if this option is not selected. highlightAll (bool): Consists either of the `true` value if the option to highlight all matches is selected or `false` if this option is not selected. query (str): Consists of the value in the search field. status (str): Consists either of the value `not found` for a search string that is unsuccessful or blank for successful search strings. \"\"\" name : Literal [ \"textbook.pdf.search.executed\" ] caseSensitive : bool highlightAll : bool query : str status : str","title":"TextbookPdfSearchExecutedEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfSearchHighlightToggledEventField","text":"Represents the textbook.pdf.search.highlight.toggled event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.search.highlight.toggled . caseSensitive bool Consists either of the true value if the case sensitive option is selected or false if this option is not selected. highlightAll bool Consists either of the true value if the option to highlight all matches is selected or false if this option is not selected. query str Consists of the value in the search field. status str Consists either of the value not found for a search string that is unsuccessful or blank for successful search strings. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfSearchHighlightToggledEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.search.highlight.toggled` event field. Attributes: name (str): Consists of the value `textbook.pdf.search.highlight.toggled`. caseSensitive (bool): Consists either of the `true` value if the case sensitive option is selected or `false` if this option is not selected. highlightAll (bool): Consists either of the `true` value if the option to highlight all matches is selected or `false` if this option is not selected. query (str): Consists of the value in the search field. status (str): Consists either of the value `not found` for a search string that is unsuccessful or blank for successful search strings. \"\"\" name : Literal [ \"textbook.pdf.search.highlight.toggled\" ] caseSensitive : bool highlightAll : bool query : str status : str","title":"TextbookPdfSearchHighlightToggledEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfSearchNavigatedNextEventField","text":"Represents the textbook.pdf.search.navigatednext event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.search.navigatednext . caseSensitive bool Consists either of the true value if the case sensitive option is selected or false if this option is not selected. findPrevious(bool) Consists either of the \u2018true\u2019 value if the user clicks the Find Previous icon or \u2018false\u2019 if the user clicks the Find Next icon. highlightAll bool Consists either of the true value if the option to highlight all matches is selected or false if this option is not selected. query str Consists of the value in the search field. status str Consists either of the value not found for a search string that is unsuccessful or blank for successful search strings. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfSearchNavigatedNextEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.search.navigatednext` event field. Attributes: name (str): Consists of the value `textbook.pdf.search.navigatednext`. caseSensitive (bool): Consists either of the `true` value if the case sensitive option is selected or `false` if this option is not selected. findPrevious(bool): Consists either of the \u2018true\u2019 value if the user clicks the Find Previous icon or \u2018false\u2019 if the user clicks the <kbd>Find Next</kbd> icon. highlightAll (bool): Consists either of the `true` value if the option to highlight all matches is selected or `false` if this option is not selected. query (str): Consists of the value in the search field. status (str): Consists either of the value `not found` for a search string that is unsuccessful or blank for successful search strings. \"\"\" name : Literal [ \"textbook.pdf.search.navigatednext\" ] caseSensitive : bool findPrevious : bool highlightAll : bool query : str status : str","title":"TextbookPdfSearchNavigatedNextEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfThumbnailNavigatedEventField","text":"Represents the textbook.pdf.thumbnail.navigated event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.thumbnail.navigated . thumbnail_title str Consists of the name of the thumbnail. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfThumbnailNavigatedEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.thumbnail.navigated` event field. Attribute: name (str): Consists of the value `textbook.pdf.thumbnail.navigated`. thumbnail_title (str): Consists of the name of the thumbnail. \"\"\" name : Literal [ \"textbook.pdf.thumbnail.navigated\" ] thumbnail_title : str","title":"TextbookPdfThumbnailNavigatedEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfThumbnailsToggledEventField","text":"Represents the textbook.pdf.thumbnails.toggled event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.thumbnails.toggled . Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfThumbnailsToggledEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.thumbnails.toggled` event field. Attribute: name (str): Consists of the value `textbook.pdf.thumbnails.toggled`. \"\"\" name : Literal [ \"textbook.pdf.thumbnails.toggled\" ]","title":"TextbookPdfThumbnailsToggledEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfZoomButtonsChangedEventField","text":"Represents the textbook.pdf.zoom.buttons.changed event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.zoom.buttons.changed . direction str Consists of either the in or out value. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfZoomButtonsChangedEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.zoom.buttons.changed` event field. Attributes: name (str): Consists of the value `textbook.pdf.zoom.buttons.changed`. direction (str): Consists of either the `in` or `out` value. \"\"\" name : Literal [ \"textbook.pdf.zoom.buttons.changed\" ] direction : Union [ Literal [ \"in\" ], Literal [ \"out\" ]]","title":"TextbookPdfZoomButtonsChangedEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfZoomMenuChangedEventField","text":"Represents the textbook.pdf.zoom.menu.changed event field. Attributes: Name Type Description name str Consists of the value textbook.pdf.zoom.menu.changed . amount str Consists either of the 0.5 , 0.75 , 1 , 1.25 , 1.5 , 2 , 3 , 4 , auto , custom , page-actual , page-fit , page-width value. Source code in ralph/models/edx/textbook_interaction/fields/events.py class TextbookPdfZoomMenuChangedEventField ( TextbookInteractionBaseEventField ): \"\"\"Represents the `textbook.pdf.zoom.menu.changed` event field. Attributes: name (str): Consists of the value `textbook.pdf.zoom.menu.changed`. amount (str): Consists either of the `0.5`, `0.75`, `1`, `1.25`, `1.5`, `2`, `3`, `4`, `auto`, `custom`, `page-actual`, `page-fit`, `page-width` value. \"\"\" name : Literal [ \"textbook.pdf.zoom.menu.changed\" ] amount : Union [ Literal [ \"0.5\" ], Literal [ \"0.75\" ], Literal [ \"1\" ], Literal [ \"1.25\" ], Literal [ \"1.5\" ], Literal [ \"2\" ], Literal [ \"3\" ], Literal [ \"4\" ], Literal [ \"auto\" ], Literal [ \"custom\" ], Literal [ \"page-actual\" ], Literal [ \"page-fit\" ], Literal [ \"page-width\" ], ]","title":"TextbookPdfZoomMenuChangedEventField"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements","text":"Textbook interaction event model definitions","title":"statements"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UIBook","text":"Represents the book browser event model. The browser emits this event when a user navigates within the PDF Viewer or the PNG Viewer. Attributes: Name Type Description event BookEventField See BookEventField. event_type str Consists of the value book . name str Consists of the value book . Source code in ralph/models/edx/textbook_interaction/statements.py class UIBook ( BaseBrowserModel ): \"\"\"Represents the `book` browser event model. The browser emits this event when a user navigates within the PDF Viewer or the PNG Viewer. Attributes: event (BookEventField): See BookEventField. event_type (str): Consists of the value `book`. name (str): Consists of the value `book`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"book\" ) event : Union [ Json [ BookEventField ], BookEventField # pylint: disable=unsubscriptable-object ] event_type : Literal [ \"book\" ] name : Literal [ \"book\" ]","title":"UIBook"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfChapterNavigated","text":"Represents the textbook.pdf.chapter.navigated browser event model. The browser emits this event when a user clicks on a link in the outline to navigate to a chapter. Attributes: Name Type Description event json See TextbookPdfChapterNavigatedEventField. event_type str Consists of the value textbook.pdf.chapter.navigated . name str Consists of the value textbook.pdf.chapter.navigated . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfChapterNavigated ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.chapter.navigated` browser event model. The browser emits this event when a user clicks on a link in the outline to navigate to a chapter. Attributes: event (json): See TextbookPdfChapterNavigatedEventField. event_type (str): Consists of the value `textbook.pdf.chapter.navigated`. name (str): Consists of the value `textbook.pdf.chapter.navigated`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.chapter.navigated\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfChapterNavigatedEventField ], TextbookPdfChapterNavigatedEventField , ] event_type : Literal [ \"textbook.pdf.chapter.navigated\" ] name : Literal [ \"textbook.pdf.chapter.navigated\" ]","title":"UITextbookPdfChapterNavigated"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfDisplayScaled","text":"Represents the textbook.pdf.display.scaled browser event model. The browser emits this event when the display magnification changes or the first page is shown. Attributes: Name Type Description event json See TextbookPdfDisplayScaledEventField. event_type str Consists of the value textbook.pdf.display.scaled . name str Consists of the value textbook.pdf.display.scaled . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfDisplayScaled ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.display.scaled` browser event model. The browser emits this event when the display magnification changes or the first page is shown. Attributes: event (json): See TextbookPdfDisplayScaledEventField. event_type (str): Consists of the value `textbook.pdf.display.scaled`. name (str): Consists of the value `textbook.pdf.display.scaled`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.display.scaled\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfDisplayScaledEventField ], TextbookPdfDisplayScaledEventField , ] event_type : Literal [ \"textbook.pdf.display.scaled\" ] name : Literal [ \"textbook.pdf.display.scaled\" ]","title":"UITextbookPdfDisplayScaled"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfOutlineToggled","text":"Represents the textbook.pdf.outline.toggled browser event model. The browser emits this event when a user clicks the outline icon to show or hide a list of the book\u2019s chapters. Attributes: Name Type Description event json See TextbookPdfOutlineToggledEventField. event_type str Consists of the value textbook.pdf.outline.toggled . name str Consists of the value textbook.pdf.outline.toggled . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfOutlineToggled ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.outline.toggled` browser event model. The browser emits this event when a user clicks the outline icon to show or hide a list of the book\u2019s chapters. Attributes: event (json): See TextbookPdfOutlineToggledEventField. event_type (str): Consists of the value `textbook.pdf.outline.toggled`. name (str): Consists of the value `textbook.pdf.outline.toggled`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.outline.toggled\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfOutlineToggledEventField ], TextbookPdfOutlineToggledEventField , ] event_type : Literal [ \"textbook.pdf.outline.toggled\" ] name : Literal [ \"textbook.pdf.outline.toggled\" ]","title":"UITextbookPdfOutlineToggled"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfPageNavigated","text":"Represents the textbook.pdf.page.navigated browser event model. The browser emits this event when a user manually enters a page number. Attributes: Name Type Description event json See TextbookPdfPageNavigatedEventField. event_type str Consists of the value textbook.pdf.page.navigated . name str Consists of the value textbook.pdf.page.navigated . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfPageNavigated ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.page.navigated` browser event model. The browser emits this event when a user manually enters a page number. Attributes: event (json): See TextbookPdfPageNavigatedEventField. event_type (str): Consists of the value `textbook.pdf.page.navigated`. name (str): Consists of the value `textbook.pdf.page.navigated`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.page.navigated\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfPageNavigatedEventField ], TextbookPdfPageNavigatedEventField , ] event_type : Literal [ \"textbook.pdf.page.navigated\" ] name : Literal [ \"textbook.pdf.page.navigated\" ]","title":"UITextbookPdfPageNavigated"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfPageScrolled","text":"Represents the textbook.pdf.page.scrolled browser event model. The browser emits this event when the user scrolls to the next or previous page and the transition takes less than 50 milliseconds. Attributes: Name Type Description event json See TextbookPdfPageScrolledEventField. event_type str Consists of the value textbook.pdf.page.scrolled . name str Consists of the value textbook.pdf.page.scrolled . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfPageScrolled ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.page.scrolled` browser event model. The browser emits this event when the user scrolls to the next or previous page and the transition takes less than 50 milliseconds. Attributes: event (json): See TextbookPdfPageScrolledEventField. event_type (str): Consists of the value `textbook.pdf.page.scrolled`. name (str): Consists of the value `textbook.pdf.page.scrolled`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.page.scrolled\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfPageScrolledEventField ], TextbookPdfPageScrolledEventField , ] event_type : Literal [ \"textbook.pdf.page.scrolled\" ] name : Literal [ \"textbook.pdf.page.scrolled\" ]","title":"UITextbookPdfPageScrolled"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfSearchCaseSensitivityToggled","text":"Represents the textbook.pdf.searchcasesensitivity.toggled browser event model. The browser emits this event when a user selects or clears the Match Case option. Attributes: Name Type Description event json See TextbookPdfSearchCaseSensitivityToggledEventField. event_type str Consists of the value textbook.pdf.searchcasesensitivity.toggled . name str Consists of the value textbook.pdf.searchcasesensitivity.toggled . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfSearchCaseSensitivityToggled ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.searchcasesensitivity.toggled` browser event model. The browser emits this event when a user selects or clears the <kbd>Match Case</kbd> option. Attributes: event (json): See TextbookPdfSearchCaseSensitivityToggledEventField. event_type (str): Consists of the value `textbook.pdf.searchcasesensitivity.toggled`. name (str): Consists of the value `textbook.pdf.searchcasesensitivity.toggled`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.searchcasesensitivity.toggled\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfSearchCaseSensitivityToggledEventField ], TextbookPdfSearchCaseSensitivityToggledEventField , ] event_type : Literal [ \"textbook.pdf.searchcasesensitivity.toggled\" ] name : Literal [ \"textbook.pdf.searchcasesensitivity.toggled\" ]","title":"UITextbookPdfSearchCaseSensitivityToggled"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfSearchExecuted","text":"Represents the textbook.pdf.search.executed browser event model. The browser emits this event when a user searches for a text value in the file. Attributes: Name Type Description event json See TextbookPdfSearchExecutedEventField. event_type str Consists of the value textbook.pdf.search.executed . name str Consists of the value textbook.pdf.search.executed . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfSearchExecuted ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.search.executed` browser event model. The browser emits this event when a user searches for a text value in the file. Attributes: event (json): See TextbookPdfSearchExecutedEventField. event_type (str): Consists of the value `textbook.pdf.search.executed`. name (str): Consists of the value `textbook.pdf.search.executed`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.search.executed\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfSearchExecutedEventField ], TextbookPdfSearchExecutedEventField , ] event_type : Literal [ \"textbook.pdf.search.executed\" ] name : Literal [ \"textbook.pdf.search.executed\" ]","title":"UITextbookPdfSearchExecuted"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfSearchHighlightToggled","text":"Represents the textbook.pdf.search.highlight.toggled browser event model. The browser emits this event when a user selects or clears the Highlight All option. Attributes: Name Type Description event json See TextbookPdfSearchHighlightToggledEventField. event_type str Consists of the value textbook.pdf.search.highlight.toggled . name str Consists of the value textbook.pdf.search.highlight.toggled . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfSearchHighlightToggled ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.search.highlight.toggled` browser event model. The browser emits this event when a user selects or clears the <kbd>Highlight All</kbd> option. Attributes: event (json): See TextbookPdfSearchHighlightToggledEventField. event_type (str): Consists of the value `textbook.pdf.search.highlight.toggled`. name (str): Consists of the value `textbook.pdf.search.highlight.toggled`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.search.highlight.toggled\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfSearchHighlightToggledEventField ], TextbookPdfSearchHighlightToggledEventField , ] event_type : Literal [ \"textbook.pdf.search.highlight.toggled\" ] name : Literal [ \"textbook.pdf.search.highlight.toggled\" ]","title":"UITextbookPdfSearchHighlightToggled"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfSearchNavigatedNext","text":"Represents the textbook.pdf.search.navigatednext browser event model. The browser emits this event when a user clicks on the Find Next or Find Previous icons for an entered search string. Attributes: Name Type Description event json See TextbookPdfSearchNavigatedNextEventField. event_type str Consists of the value textbook.pdf.search.navigatednext . name str Consists of the value textbook.pdf.search.navigatednext . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfSearchNavigatedNext ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.search.navigatednext` browser event model. The browser emits this event when a user clicks on the <kbd>Find Next</kbd> or <kbd>Find Previous</kbd> icons for an entered search string. Attributes: event (json): See TextbookPdfSearchNavigatedNextEventField. event_type (str): Consists of the value `textbook.pdf.search.navigatednext`. name (str): Consists of the value `textbook.pdf.search.navigatednext`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.search.navigatednext\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfSearchNavigatedNextEventField ], TextbookPdfSearchNavigatedNextEventField , ] event_type : Literal [ \"textbook.pdf.search.navigatednext\" ] name : Literal [ \"textbook.pdf.search.navigatednext\" ]","title":"UITextbookPdfSearchNavigatedNext"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfThumbnailNavigated","text":"Represents the textbook.pdf.thumbnail.navigated browser event model. The browser emits this event when a user clicks on a thumbnail image to navigate to a page. Attributes: Name Type Description event json See TextbookPdfThumbnailNavigatedEventField. event_type str Consists of the value textbook.pdf.thumbnail.navigated . name str Consists of the value textbook.pdf.thumbnail.navigated . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfThumbnailNavigated ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.thumbnail.navigated` browser event model. The browser emits this event when a user clicks on a thumbnail image to navigate to a page. Attributes: event (json): See TextbookPdfThumbnailNavigatedEventField. event_type (str): Consists of the value `textbook.pdf.thumbnail.navigated`. name (str): Consists of the value `textbook.pdf.thumbnail.navigated`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.thumbnail.navigated\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfThumbnailNavigatedEventField ], TextbookPdfThumbnailNavigatedEventField , ] event_type : Literal [ \"textbook.pdf.thumbnail.navigated\" ] name : Literal [ \"textbook.pdf.thumbnail.navigated\" ]","title":"UITextbookPdfThumbnailNavigated"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfThumbnailsToggled","text":"Represents the textbook.pdf.thumbnails.toggled browser event model. The browser emits this event when a user clicks on the icon to show or hide page thumbnails. Attributes: Name Type Description event json See TextbookPdfThumbnailsToggledEventField. event_type str Consists of the value textbook.pdf.thumbnails.toggled . name str Consists of the value textbook.pdf.thumbnails.toggled . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfThumbnailsToggled ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.thumbnails.toggled` browser event model. The browser emits this event when a user clicks on the icon to show or hide page thumbnails. Attributes: event (json): See TextbookPdfThumbnailsToggledEventField. event_type (str): Consists of the value `textbook.pdf.thumbnails.toggled`. name (str): Consists of the value `textbook.pdf.thumbnails.toggled`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.thumbnails.toggled\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfThumbnailsToggledEventField ], TextbookPdfThumbnailsToggledEventField , ] event_type : Literal [ \"textbook.pdf.thumbnails.toggled\" ] name : Literal [ \"textbook.pdf.thumbnails.toggled\" ]","title":"UITextbookPdfThumbnailsToggled"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfZoomButtonsChanged","text":"Represents the textbook.pdf.zoom.buttons.changed browser event model. The browser emits this event when a user clicks either the Zoom In or Zoom Out icon. Attributes: Name Type Description event json See TextbookPdfZoomButtonsChangedEventField. event_type str Consists of the value textbook.pdf.zoom.buttons.changed . name str Consists of the value textbook.pdf.zoom.buttons.changed . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfZoomButtonsChanged ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.zoom.buttons.changed` browser event model. The browser emits this event when a user clicks either the <kbd>Zoom In</kbd> or <kbd>Zoom Out</kbd> icon. Attributes: event (json): See TextbookPdfZoomButtonsChangedEventField. event_type (str): Consists of the value `textbook.pdf.zoom.buttons.changed`. name (str): Consists of the value `textbook.pdf.zoom.buttons.changed`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.zoom.buttons.changed\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfZoomButtonsChangedEventField ], TextbookPdfZoomButtonsChangedEventField , ] event_type : Literal [ \"textbook.pdf.zoom.buttons.changed\" ] name : Literal [ \"textbook.pdf.zoom.buttons.changed\" ]","title":"UITextbookPdfZoomButtonsChanged"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfZoomMenuChanged","text":"Represents the textbook.pdf.zoom.menu.changed browser event model. The browser emits this event when a user selects a magnification setting. Attributes: Name Type Description event json See TextbookPdfZoomMenuChangedEventField. event_type str Consists of the value textbook.pdf.zoom.menu.changed . name str Consists of the value textbook.pdf.zoom.menu.changed . Source code in ralph/models/edx/textbook_interaction/statements.py class UITextbookPdfZoomMenuChanged ( BaseBrowserModel ): \"\"\"Represents the `textbook.pdf.zoom.menu.changed` browser event model. The browser emits this event when a user selects a magnification setting. Attributes: event (json): See TextbookPdfZoomMenuChangedEventField. event_type (str): Consists of the value `textbook.pdf.zoom.menu.changed`. name (str): Consists of the value `textbook.pdf.zoom.menu.changed`. \"\"\" __selector__ = selector ( event_source = \"browser\" , event_type = \"textbook.pdf.zoom.menu.changed\" ) event : Union [ Json [ # pylint: disable=unsubscriptable-object TextbookPdfZoomMenuChangedEventField ], TextbookPdfZoomMenuChangedEventField , ] event_type : Literal [ \"textbook.pdf.zoom.menu.changed\" ] name : Literal [ \"textbook.pdf.zoom.menu.changed\" ]","title":"UITextbookPdfZoomMenuChanged"}]}