{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Ralph is a command-line tool to fetch, extract, convert and push your tracking logs ( aka learning events) from various storage backends to your LRS or any other compatible storage or database backend. Key concepts \u00b6 Ralph has been designed to batch process your logs using base commands and UNIX standard streams ( stdin , stdout ) to connect them in a pipeline that fits your needs. A base example pipeline may be: $ ralph fetch --backend swift my_archive.gzip | \\ gunzip | \\ ralph push --backend es In this small pipeline, we stream my_archive.gzip content from a Swift container to the standard output (using the fetch command), uncompress the content (using the gunzip command), and bulk insert logs in an ElasticSearch index (using the push command). As UNIX is beautiful, Ralph offers many powerful possibilities by combining its commands with other standard commands or command line tools. Quick start guide \u00b6 Ralph is distributed as a python package and a Docker image. If you choose to install ralph in your native environment (without using Docker), please make sure that Python 3.9 is installed (and your default python distribution). Ralph package can be installed from PyPI using the pip tool: # Create a new virtualenv (optional) $ python3.9 -m venv venv $ source venv/bin/activate # Install the package (in a virtualenv) ( venv ) $ pip install ralph-malph # Test the ralph command (it should be in your PATH) ( venv ) $ ralph --help Alternatively, Docker users can pull the latest ralph image and start playing with it: # Pull latest docker image and get usage $ docker run --rm -i fundocker/ralph:latest ralph --help # Pro tip: define an alias to ease your life $ alias ralph = \"docker run --rm -i fundocker/ralph:latest ralph\" Now that ralph can be run from your system, we invite you to explore available commands . Contributing \u00b6 This project is intended to be community-driven, so please, do not hesitate to get in touch if you have any questions related to our implementation or design decisions. We try to raise our code quality standards and expect contributors to follow the recommendations from our handbook . License \u00b6 This work is released under the MIT License (see LICENSE ).","title":"Introduction"},{"location":"#introduction","text":"Ralph is a command-line tool to fetch, extract, convert and push your tracking logs ( aka learning events) from various storage backends to your LRS or any other compatible storage or database backend.","title":"Introduction"},{"location":"#key_concepts","text":"Ralph has been designed to batch process your logs using base commands and UNIX standard streams ( stdin , stdout ) to connect them in a pipeline that fits your needs. A base example pipeline may be: $ ralph fetch --backend swift my_archive.gzip | \\ gunzip | \\ ralph push --backend es In this small pipeline, we stream my_archive.gzip content from a Swift container to the standard output (using the fetch command), uncompress the content (using the gunzip command), and bulk insert logs in an ElasticSearch index (using the push command). As UNIX is beautiful, Ralph offers many powerful possibilities by combining its commands with other standard commands or command line tools.","title":"Key concepts"},{"location":"#quick_start_guide","text":"Ralph is distributed as a python package and a Docker image. If you choose to install ralph in your native environment (without using Docker), please make sure that Python 3.9 is installed (and your default python distribution). Ralph package can be installed from PyPI using the pip tool: # Create a new virtualenv (optional) $ python3.9 -m venv venv $ source venv/bin/activate # Install the package (in a virtualenv) ( venv ) $ pip install ralph-malph # Test the ralph command (it should be in your PATH) ( venv ) $ ralph --help Alternatively, Docker users can pull the latest ralph image and start playing with it: # Pull latest docker image and get usage $ docker run --rm -i fundocker/ralph:latest ralph --help # Pro tip: define an alias to ease your life $ alias ralph = \"docker run --rm -i fundocker/ralph:latest ralph\" Now that ralph can be run from your system, we invite you to explore available commands .","title":"Quick start guide"},{"location":"#contributing","text":"This project is intended to be community-driven, so please, do not hesitate to get in touch if you have any questions related to our implementation or design decisions. We try to raise our code quality standards and expect contributors to follow the recommendations from our handbook .","title":"Contributing"},{"location":"#license","text":"This work is released under the MIT License (see LICENSE ).","title":"License"},{"location":"CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased \u00b6 Added \u00b6 ws websocket stream backend (compatible with the fetch command) bundle jq in the fundocker/ralph Docker image Tray: enable ralph app deployment command configuration Changed \u00b6 Upgrade sentry_sdk to 1.3.1 Upgrade elasticsearch to 7.13.4 Upgrade requests to 2.26.0 2.0.1 - 2021-07-15 \u00b6 Changed \u00b6 Upgrade elasticsearch to 7.13.3 Fixed \u00b6 Restore elasticsearch backend datastream compatibility for bulk operations 2.0.0 - 2021-07-09 \u00b6 Added \u00b6 xAPI video interacted pydantic models xAPI video terminated pydantic models xAPI video completed pydantic models xAPI video seeked pydantic models xAPI video initialized pydantic models xAPI video paused pydantic models convert command to transform edx events to xAPI format EdX to xAPI converters for page viewed and page_close events Implement core event format converter xAPI video played pydantic models xAPI page viewed and page terminated pydantic models Implement edx navigational events pydantic models Implement edx enrollment events pydantic models Install security updates in project Docker images Model selector to retrieve associated pydantic model of a given event validate command to lint edx events using pydantic models Support all available bulk operation types for the elasticsearch backend (create, index, update, delete) using the --es-op-type option Changed \u00b6 Upgrade elasticsearch to 7.13.2 Upgrade python-swiftclient to 3.12.0 Upgrade click to 8.0.1 Upgrade click-option-group to 0.5.3 Upgrade pydantic to 1.8.2 Upgrade sentry_sdk to 1.1.0 Rename edx models Migrate model tests from factories to hypothesis strategies Tray: switch from openshift to k8s (BC) Tray: remove useless deployment probes Fixed \u00b6 Tray: remove version immutable field in DC selector 1.2.0 - 2021-02-26 \u00b6 Added \u00b6 EdX server event pydantic model and factory EdX page_close browser event pydantic model and factory Tray: allow to specify a self-generated elasticsearch cluster CA certificate Fixed \u00b6 Tray: add missing Swift variables in the secret Tray: fix pods anti-affinity selector Removed \u00b6 pandas is no longer required 1.1.0 - 2021-02-04 \u00b6 Added \u00b6 Support for Swift storage backend Use the push command --ignore-errors option to ignore ES bulk import errors The elasticsearch backend now accepts passing all supported client options Changed \u00b6 Upgrade pyyaml to 5.4.1 Upgrade pandas to 1.2.1 Removed \u00b6 click_log is no longer required as we are able to configure logging 1.0.0 - 2021-01-13 \u00b6 Added \u00b6 Implement base CLI commands (list, extract, fetch & push) for supported backends Support for ElasticSearch database backend Support for LDP storage backend Support for FS storage backend Parse (gzipped) tracking logs in GELF format Support for application\u2019s configuration file Add optional sentry integration Distribute Arnold\u2019s tray to deploy Ralph in a k8s cluster as cronjobs","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"CHANGELOG/#added","text":"ws websocket stream backend (compatible with the fetch command) bundle jq in the fundocker/ralph Docker image Tray: enable ralph app deployment command configuration","title":"Added"},{"location":"CHANGELOG/#changed","text":"Upgrade sentry_sdk to 1.3.1 Upgrade elasticsearch to 7.13.4 Upgrade requests to 2.26.0","title":"Changed"},{"location":"CHANGELOG/#201_-_2021-07-15","text":"","title":"2.0.1 - 2021-07-15"},{"location":"CHANGELOG/#changed_1","text":"Upgrade elasticsearch to 7.13.3","title":"Changed"},{"location":"CHANGELOG/#fixed","text":"Restore elasticsearch backend datastream compatibility for bulk operations","title":"Fixed"},{"location":"CHANGELOG/#200_-_2021-07-09","text":"","title":"2.0.0 - 2021-07-09"},{"location":"CHANGELOG/#added_1","text":"xAPI video interacted pydantic models xAPI video terminated pydantic models xAPI video completed pydantic models xAPI video seeked pydantic models xAPI video initialized pydantic models xAPI video paused pydantic models convert command to transform edx events to xAPI format EdX to xAPI converters for page viewed and page_close events Implement core event format converter xAPI video played pydantic models xAPI page viewed and page terminated pydantic models Implement edx navigational events pydantic models Implement edx enrollment events pydantic models Install security updates in project Docker images Model selector to retrieve associated pydantic model of a given event validate command to lint edx events using pydantic models Support all available bulk operation types for the elasticsearch backend (create, index, update, delete) using the --es-op-type option","title":"Added"},{"location":"CHANGELOG/#changed_2","text":"Upgrade elasticsearch to 7.13.2 Upgrade python-swiftclient to 3.12.0 Upgrade click to 8.0.1 Upgrade click-option-group to 0.5.3 Upgrade pydantic to 1.8.2 Upgrade sentry_sdk to 1.1.0 Rename edx models Migrate model tests from factories to hypothesis strategies Tray: switch from openshift to k8s (BC) Tray: remove useless deployment probes","title":"Changed"},{"location":"CHANGELOG/#fixed_1","text":"Tray: remove version immutable field in DC selector","title":"Fixed"},{"location":"CHANGELOG/#120_-_2021-02-26","text":"","title":"1.2.0 - 2021-02-26"},{"location":"CHANGELOG/#added_2","text":"EdX server event pydantic model and factory EdX page_close browser event pydantic model and factory Tray: allow to specify a self-generated elasticsearch cluster CA certificate","title":"Added"},{"location":"CHANGELOG/#fixed_2","text":"Tray: add missing Swift variables in the secret Tray: fix pods anti-affinity selector","title":"Fixed"},{"location":"CHANGELOG/#removed","text":"pandas is no longer required","title":"Removed"},{"location":"CHANGELOG/#110_-_2021-02-04","text":"","title":"1.1.0 - 2021-02-04"},{"location":"CHANGELOG/#added_3","text":"Support for Swift storage backend Use the push command --ignore-errors option to ignore ES bulk import errors The elasticsearch backend now accepts passing all supported client options","title":"Added"},{"location":"CHANGELOG/#changed_3","text":"Upgrade pyyaml to 5.4.1 Upgrade pandas to 1.2.1","title":"Changed"},{"location":"CHANGELOG/#removed_1","text":"click_log is no longer required as we are able to configure logging","title":"Removed"},{"location":"CHANGELOG/#100_-_2021-01-13","text":"","title":"1.0.0 - 2021-01-13"},{"location":"CHANGELOG/#added_4","text":"Implement base CLI commands (list, extract, fetch & push) for supported backends Support for ElasticSearch database backend Support for LDP storage backend Support for FS storage backend Parse (gzipped) tracking logs in GELF format Support for application\u2019s configuration file Add optional sentry integration Distribute Arnold\u2019s tray to deploy Ralph in a k8s cluster as cronjobs","title":"Added"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2020-present GIP FUN MOOC. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"backends/","text":"Backends \u00b6 Ralph supports various storage and database backends that can be accessed to read from or write learning events to. Implemented backends are listed below along with their configuration parameters. If your favourite backend is missing to the list, feel free to submit your implementation or get in touch! Key concepts \u00b6 We distinguish storage from database backends as the semantic and concepts are quite different in terms of code, but those two types of backends can be considered as \u201cbackends\u201d from a Ralph user perspective as the CLI can use both in most of its commands. Each backend has its own parameters that are required to use it. Those parameters can be set as command line options or environment variables; the later is the recommended solution for sensible data such as service credentials. If we consider the os_username (OpenStack user name) parameter of the OpenStack Swift backend, it can be set as a command line option using swift as the option prefix (and replacing underscores in its name by dashes): $ ralph list --backend swift --swift-os-username johndoe # [...] more options Alternatively, this parameter can be set as an environment variable (in upper case, prefixed by the program name, e.g. RALPH_ ): $ export RALPH_SWIFT_OS_USERNAME = \"johndoe\" $ ralph list --backend swift # [...] more options The general patterns for backend parameters are: --{{ backend_name }}-{{ parameter | underscore_to_dash }} for command options, and, RALPH_{{ backend_name | uppercase }}_{{ parameter | uppercase }} for environment variables. Storage backends \u00b6 OVH - Log Data Platform (LDP) \u00b6 LDP is a nice service built by OVH on top of Graylog to follow, analyse and store your logs. Learning events ( aka tracking logs) can be stored in GELF format using this backend. For now the LDP backend is read-only as we consider that it is mostly used to collect primary logs and not as a Ralph target. Feel free to get in touch to prove us wrong, or better: submit your proposal for the write method implementation. Backend parameters \u00b6 To access OVH\u2019s LDP API, you need to register Ralph as an authorized application and generate an application key, an application secret and a consumer key. While filling the registration form available at: eu.api.ovh.com/createToken/ , be sure to give an appropriate validity time span to your token and allow only GET requests on the /dbaas/logs/* path. endpoint : the API endpoint ( e.g. ovh-eu ) application_key : use generated application key application_secret : use generated application secret consumer_key : use generated consumer key The following parameters are required to fetch archives from an LDP account stream: service_name : the LDP account name ( e.g. ldp-xx-xxxxx ) stream_id : the identifier of the stream you are querying ( e.g. a UUID hex representation: 77ec6e4a-ac15-4bcf-8043-7429bf275e49 ) For more information about OVH\u2019s API client parameters, please refer to the project\u2019s documentation: github.com/ovh/python-ovh . OpenStack Swift \u00b6 Swift is the OpenStack object storage service. This storage backend is fully supported (read and write operations) to stream and store log archives. Backend parameters \u00b6 Primarily required parameters correspond to a standard authentication using OpenStack Keystone service: os_identity_api_version : keystone API version you will authenticate to (defaults to 3 ) os_auth_url : the authentication URL (defaults to OVH\u2019s Swift https://auth.cloud.ovh.net/ ) os_project_domain_name : the project domain name (defaults to Default ) os_user_domain_name : the user domain name (defaults to Default ) os_username : the name of your openstack swift user os_password : the password of your openstack swift user Secondary parameters are required to work with the target container: os_storage_url : the URL of the target container os_region_name : the region where your container is os_tenant_name : the name of the tenant of your container os_tenant_id : the identifier of the tenant of your container File system \u00b6 The file system backend is a dummy template that can be used to develop your own backend. It\u2019s a \u201cdummy\u201d backend as it\u2019s not required in a UNIX Shell context, the ls and cat commands used along with UNIX streams will do a better job. Backend parameters \u00b6 The only required parameter is the path we want to list or stream content from. Database backends \u00b6 Elasticsearch \u00b6 Elasticsearch backend is mostly used for indexation purpose (as a datalake) but it can also be used to fetch indexed data from it. Backend parameters \u00b6 Elasticsearch backend parameters required to connect to a cluster are: hosts : a list of cluster hosts to connect to ( e.g. [\"http://elasticsearch-node:9200\"] ) index : the elasticsearch index where to get/put documents client_options : all options from the official client are supported and can be specified as a python dict object ( e.g. {'use_ssl': True, 'verify_certs': True} ) For a complete list of supported client_options , please refer to the official client\u2019s documentation .","title":"Backends"},{"location":"backends/#backends","text":"Ralph supports various storage and database backends that can be accessed to read from or write learning events to. Implemented backends are listed below along with their configuration parameters. If your favourite backend is missing to the list, feel free to submit your implementation or get in touch!","title":"Backends"},{"location":"backends/#key_concepts","text":"We distinguish storage from database backends as the semantic and concepts are quite different in terms of code, but those two types of backends can be considered as \u201cbackends\u201d from a Ralph user perspective as the CLI can use both in most of its commands. Each backend has its own parameters that are required to use it. Those parameters can be set as command line options or environment variables; the later is the recommended solution for sensible data such as service credentials. If we consider the os_username (OpenStack user name) parameter of the OpenStack Swift backend, it can be set as a command line option using swift as the option prefix (and replacing underscores in its name by dashes): $ ralph list --backend swift --swift-os-username johndoe # [...] more options Alternatively, this parameter can be set as an environment variable (in upper case, prefixed by the program name, e.g. RALPH_ ): $ export RALPH_SWIFT_OS_USERNAME = \"johndoe\" $ ralph list --backend swift # [...] more options The general patterns for backend parameters are: --{{ backend_name }}-{{ parameter | underscore_to_dash }} for command options, and, RALPH_{{ backend_name | uppercase }}_{{ parameter | uppercase }} for environment variables.","title":"Key concepts"},{"location":"backends/#storage_backends","text":"","title":"Storage backends"},{"location":"backends/#ovh_-_log_data_platform_ldp","text":"LDP is a nice service built by OVH on top of Graylog to follow, analyse and store your logs. Learning events ( aka tracking logs) can be stored in GELF format using this backend. For now the LDP backend is read-only as we consider that it is mostly used to collect primary logs and not as a Ralph target. Feel free to get in touch to prove us wrong, or better: submit your proposal for the write method implementation.","title":"OVH - Log Data Platform (LDP)"},{"location":"backends/#backend_parameters","text":"To access OVH\u2019s LDP API, you need to register Ralph as an authorized application and generate an application key, an application secret and a consumer key. While filling the registration form available at: eu.api.ovh.com/createToken/ , be sure to give an appropriate validity time span to your token and allow only GET requests on the /dbaas/logs/* path. endpoint : the API endpoint ( e.g. ovh-eu ) application_key : use generated application key application_secret : use generated application secret consumer_key : use generated consumer key The following parameters are required to fetch archives from an LDP account stream: service_name : the LDP account name ( e.g. ldp-xx-xxxxx ) stream_id : the identifier of the stream you are querying ( e.g. a UUID hex representation: 77ec6e4a-ac15-4bcf-8043-7429bf275e49 ) For more information about OVH\u2019s API client parameters, please refer to the project\u2019s documentation: github.com/ovh/python-ovh .","title":"Backend parameters"},{"location":"backends/#openstack_swift","text":"Swift is the OpenStack object storage service. This storage backend is fully supported (read and write operations) to stream and store log archives.","title":"OpenStack Swift"},{"location":"backends/#backend_parameters_1","text":"Primarily required parameters correspond to a standard authentication using OpenStack Keystone service: os_identity_api_version : keystone API version you will authenticate to (defaults to 3 ) os_auth_url : the authentication URL (defaults to OVH\u2019s Swift https://auth.cloud.ovh.net/ ) os_project_domain_name : the project domain name (defaults to Default ) os_user_domain_name : the user domain name (defaults to Default ) os_username : the name of your openstack swift user os_password : the password of your openstack swift user Secondary parameters are required to work with the target container: os_storage_url : the URL of the target container os_region_name : the region where your container is os_tenant_name : the name of the tenant of your container os_tenant_id : the identifier of the tenant of your container","title":"Backend parameters"},{"location":"backends/#file_system","text":"The file system backend is a dummy template that can be used to develop your own backend. It\u2019s a \u201cdummy\u201d backend as it\u2019s not required in a UNIX Shell context, the ls and cat commands used along with UNIX streams will do a better job.","title":"File system"},{"location":"backends/#backend_parameters_2","text":"The only required parameter is the path we want to list or stream content from.","title":"Backend parameters"},{"location":"backends/#database_backends","text":"","title":"Database backends"},{"location":"backends/#elasticsearch","text":"Elasticsearch backend is mostly used for indexation purpose (as a datalake) but it can also be used to fetch indexed data from it.","title":"Elasticsearch"},{"location":"backends/#backend_parameters_3","text":"Elasticsearch backend parameters required to connect to a cluster are: hosts : a list of cluster hosts to connect to ( e.g. [\"http://elasticsearch-node:9200\"] ) index : the elasticsearch index where to get/put documents client_options : all options from the official client are supported and can be specified as a python dict object ( e.g. {'use_ssl': True, 'verify_certs': True} ) For a complete list of supported client_options , please refer to the official client\u2019s documentation .","title":"Backend parameters"},{"location":"commands/","text":"Commands \u00b6 ralph \u00b6 Ralph is a stream-based tool to play with your logs. Usage: ralph [OPTIONS] COMMAND [ARGS]... Options: -v, --verbosity LVL Either CRITICAL, ERROR, WARNING, INFO (default) or DEBUG --help Show this message and exit. ralph convert \u00b6 Converts input events to a given format. Usage: ralph convert [OPTIONS] Options: From edX to xAPI converter options: -u, --uuid-namespace TEXT The UUID namespace to use for the `ID` field generation -p, --platform-url TEXT The `actor.accou nt.homePage` to use in the xAPI statements [required] -f, --from [edx] Input events format to convert [required] -t, --to [xapi] Output events format [required] -I, --ignore-errors Continue writing regardless of raised errors -F, --fail-on-unknown Stop converting at first unknown event --help Show this message and exit. ralph extract \u00b6 Extracts input events from a container format using a dedicated parser. Usage: ralph extract [OPTIONS] Options: -p, --parser [gelf] Container format parser used to extract events [required] --help Show this message and exit. ralph fetch \u00b6 Fetch an archive or records from a configured backend. Usage: ralph fetch [OPTIONS] [ARCHIVE] Options: ws backend: --ws-uri TEXT swift backend: --swift-os-identity-api-version TEXT --swift-os-auth-url TEXT --swift-os-project-domain-name TEXT --swift-os-user-domain-name TEXT --swift-os-storage-url TEXT --swift-os-region-name TEXT --swift-os-password TEXT --swift-os-username TEXT --swift-os-tenant-name TEXT --swift-os-tenant-id TEXT fs backend: --fs-path TEXT ldp backend: --ldp-stream-id TEXT --ldp-service-name TEXT --ldp-consumer-key TEXT --ldp-application-secret TEXT --ldp-application-key TEXT --ldp-endpoint TEXT es backend: --es-op-type TEXT --es-client-options KEY=VALUE,KEY=VALUE --es-index TEXT --es-hosts TEXT -b, --backend [es|ldp|fs|swift|ws] Backend [required] -c, --chunk-size INTEGER Get events by chunks of size # --help Show this message and exit. ralph list \u00b6 List available archives from a configured storage backend. Usage: ralph list [OPTIONS] Options: swift backend: --swift-os-identity-api-version TEXT --swift-os-auth-url TEXT --swift-os-project-domain-name TEXT --swift-os-user-domain-name TEXT --swift-os-storage-url TEXT --swift-os-region-name TEXT --swift-os-password TEXT --swift-os-username TEXT --swift-os-tenant-name TEXT --swift-os-tenant-id TEXT fs backend: --fs-path TEXT ldp backend: --ldp-stream-id TEXT --ldp-service-name TEXT --ldp-consumer-key TEXT --ldp-application-secret TEXT --ldp-application-key TEXT --ldp-endpoint TEXT -b, --backend [ldp|fs|swift] Backend [required] -n, --new / -a, --all List not fetched (or all) archives -D, --details / -I, --ids Get archives detailed output (JSON) --help Show this message and exit. ralph push \u00b6 Push an archive to a configured backend. Usage: ralph push [OPTIONS] [ARCHIVE] Options: swift backend: --swift-os-identity-api-version TEXT --swift-os-auth-url TEXT --swift-os-project-domain-name TEXT --swift-os-user-domain-name TEXT --swift-os-storage-url TEXT --swift-os-region-name TEXT --swift-os-password TEXT --swift-os-username TEXT --swift-os-tenant-name TEXT --swift-os-tenant-id TEXT fs backend: --fs-path TEXT ldp backend: --ldp-stream-id TEXT --ldp-service-name TEXT --ldp-consumer-key TEXT --ldp-application-secret TEXT --ldp-application-key TEXT --ldp-endpoint TEXT es backend: --es-op-type TEXT --es-client-options KEY=VALUE,KEY=VALUE --es-index TEXT --es-hosts TEXT -b, --backend [es|ldp|fs|swift] Backend [required] -c, --chunk-size INTEGER Get events by chunks of size # -f, --force Overwrite existing archives or records -I, --ignore-errors Continue writing regardless of raised errors --help Show this message and exit. ralph validate \u00b6 Validates input events of given format. Usage: ralph validate [OPTIONS] Options: -f, --format [edx|xapi] Input events format to validate [required] -I, --ignore-errors Continue validating regardless of raised errors -F, --fail-on-unknown Stop validating at first unknown event --help Show this message and exit.","title":"Commands"},{"location":"commands/#commands","text":"","title":"Commands"},{"location":"commands/#ralph","text":"Ralph is a stream-based tool to play with your logs. Usage: ralph [OPTIONS] COMMAND [ARGS]... Options: -v, --verbosity LVL Either CRITICAL, ERROR, WARNING, INFO (default) or DEBUG --help Show this message and exit.","title":"ralph"},{"location":"commands/#ralph-convert","text":"Converts input events to a given format. Usage: ralph convert [OPTIONS] Options: From edX to xAPI converter options: -u, --uuid-namespace TEXT The UUID namespace to use for the `ID` field generation -p, --platform-url TEXT The `actor.accou nt.homePage` to use in the xAPI statements [required] -f, --from [edx] Input events format to convert [required] -t, --to [xapi] Output events format [required] -I, --ignore-errors Continue writing regardless of raised errors -F, --fail-on-unknown Stop converting at first unknown event --help Show this message and exit.","title":"convert"},{"location":"commands/#ralph-extract","text":"Extracts input events from a container format using a dedicated parser. Usage: ralph extract [OPTIONS] Options: -p, --parser [gelf] Container format parser used to extract events [required] --help Show this message and exit.","title":"extract"},{"location":"commands/#ralph-fetch","text":"Fetch an archive or records from a configured backend. Usage: ralph fetch [OPTIONS] [ARCHIVE] Options: ws backend: --ws-uri TEXT swift backend: --swift-os-identity-api-version TEXT --swift-os-auth-url TEXT --swift-os-project-domain-name TEXT --swift-os-user-domain-name TEXT --swift-os-storage-url TEXT --swift-os-region-name TEXT --swift-os-password TEXT --swift-os-username TEXT --swift-os-tenant-name TEXT --swift-os-tenant-id TEXT fs backend: --fs-path TEXT ldp backend: --ldp-stream-id TEXT --ldp-service-name TEXT --ldp-consumer-key TEXT --ldp-application-secret TEXT --ldp-application-key TEXT --ldp-endpoint TEXT es backend: --es-op-type TEXT --es-client-options KEY=VALUE,KEY=VALUE --es-index TEXT --es-hosts TEXT -b, --backend [es|ldp|fs|swift|ws] Backend [required] -c, --chunk-size INTEGER Get events by chunks of size # --help Show this message and exit.","title":"fetch"},{"location":"commands/#ralph-list","text":"List available archives from a configured storage backend. Usage: ralph list [OPTIONS] Options: swift backend: --swift-os-identity-api-version TEXT --swift-os-auth-url TEXT --swift-os-project-domain-name TEXT --swift-os-user-domain-name TEXT --swift-os-storage-url TEXT --swift-os-region-name TEXT --swift-os-password TEXT --swift-os-username TEXT --swift-os-tenant-name TEXT --swift-os-tenant-id TEXT fs backend: --fs-path TEXT ldp backend: --ldp-stream-id TEXT --ldp-service-name TEXT --ldp-consumer-key TEXT --ldp-application-secret TEXT --ldp-application-key TEXT --ldp-endpoint TEXT -b, --backend [ldp|fs|swift] Backend [required] -n, --new / -a, --all List not fetched (or all) archives -D, --details / -I, --ids Get archives detailed output (JSON) --help Show this message and exit.","title":"list"},{"location":"commands/#ralph-push","text":"Push an archive to a configured backend. Usage: ralph push [OPTIONS] [ARCHIVE] Options: swift backend: --swift-os-identity-api-version TEXT --swift-os-auth-url TEXT --swift-os-project-domain-name TEXT --swift-os-user-domain-name TEXT --swift-os-storage-url TEXT --swift-os-region-name TEXT --swift-os-password TEXT --swift-os-username TEXT --swift-os-tenant-name TEXT --swift-os-tenant-id TEXT fs backend: --fs-path TEXT ldp backend: --ldp-stream-id TEXT --ldp-service-name TEXT --ldp-consumer-key TEXT --ldp-application-secret TEXT --ldp-application-key TEXT --ldp-endpoint TEXT es backend: --es-op-type TEXT --es-client-options KEY=VALUE,KEY=VALUE --es-index TEXT --es-hosts TEXT -b, --backend [es|ldp|fs|swift] Backend [required] -c, --chunk-size INTEGER Get events by chunks of size # -f, --force Overwrite existing archives or records -I, --ignore-errors Continue writing regardless of raised errors --help Show this message and exit.","title":"push"},{"location":"commands/#ralph-validate","text":"Validates input events of given format. Usage: ralph validate [OPTIONS] Options: -f, --format [edx|xapi] Input events format to validate [required] -I, --ignore-errors Continue validating regardless of raised errors -F, --fail-on-unknown Stop validating at first unknown event --help Show this message and exit.","title":"validate"},{"location":"contribute/","text":"Contribute \u00b6 Ralph\u2019s core \u00b6 To start playing with ralph , you should build it using the bootstrap Make target: $ make bootstrap Once the project has been bootstrapped, you may want to edit generated .env file to set up available backends parameters that will be injected in the running container as environment variables to configure Ralph (see backends documentation ): # Elasticsearch backend RALPH_ES_HOSTS=http://elasticsearch:9200 RALPH_ES_INDEX=statements RALPH_ES_TEST_HOSTS=http://elasticsearch:9200 RALPH_ES_TEST_INDEX=test-index # [...] Note that lines starting with a # are considered as commented and thus will have no effect while running Ralph. Now you can start playing the CLI: $ bin/ralph --help To lint your code, either use the lint meta target or one of the linting tools we use: # Run all linters $ make lint # Run pylint $ make lint-pylint # List available linters $ make help | grep lint- To run tests on your code, either use the test Make target or the bin/pytest script to pass specific arguments to the test runner: # Run all tests $ make test # Run pytest with options $ bin/pytest -x -k mixins Working with local backends \u00b6 Not all backends are accessible in a local environment development; for now only elasticsearch and swift services are accessible as docker containers (see docker-compose.yml services). To configure those backends, we provide default parameters in the .env.dist template, you can copy/paste them in your .env file (and uncomment them so that they are properly injected in running containers). Once configured, start available backends using: $ make run- [ BACKEND ] Substitute [BACKEND] by the backend name, e.g. es for Elasticsearch or swift for OpenStack Swift: # Start Elasticsearch local backend $ make run-es # Start Swift local backend $ make run-swift # Start all local backends $ make run-all Now that you have started at least the elasticsearch and swift backends, it\u2019s time to play with them: # Store a JSON file in the Swift backend $ echo '{\"id\": 1, \"foo\": \"bar\"}' | \\ ./bin/ralph push -b swift -f foo.json # Check that we have created a new JSON file in the Swift backend $ bin/ralph list -b swift foo.json # Fetch the content of the JSON file and index it in Elasticsearch $ bin/ralph fetch -b swift foo.json | \\ bin/ralph push -b es # Check that we have properly indexed the JSON file in Elasticsearch $ bin/ralph fetch -b es { \"id\" : 1 , \"foo\" : \"bar\" } Ralph\u2019s tray \u00b6 Ralph is distributed along with its tray (a deployable package for Kubernetes clusters using Arnold ). If you intend to work on this tray, please refer to Arnold\u2019s documentation.","title":"Contribute"},{"location":"contribute/#contribute","text":"","title":"Contribute"},{"location":"contribute/#ralphs_core","text":"To start playing with ralph , you should build it using the bootstrap Make target: $ make bootstrap Once the project has been bootstrapped, you may want to edit generated .env file to set up available backends parameters that will be injected in the running container as environment variables to configure Ralph (see backends documentation ): # Elasticsearch backend RALPH_ES_HOSTS=http://elasticsearch:9200 RALPH_ES_INDEX=statements RALPH_ES_TEST_HOSTS=http://elasticsearch:9200 RALPH_ES_TEST_INDEX=test-index # [...] Note that lines starting with a # are considered as commented and thus will have no effect while running Ralph. Now you can start playing the CLI: $ bin/ralph --help To lint your code, either use the lint meta target or one of the linting tools we use: # Run all linters $ make lint # Run pylint $ make lint-pylint # List available linters $ make help | grep lint- To run tests on your code, either use the test Make target or the bin/pytest script to pass specific arguments to the test runner: # Run all tests $ make test # Run pytest with options $ bin/pytest -x -k mixins","title":"Ralph's core"},{"location":"contribute/#working_with_local_backends","text":"Not all backends are accessible in a local environment development; for now only elasticsearch and swift services are accessible as docker containers (see docker-compose.yml services). To configure those backends, we provide default parameters in the .env.dist template, you can copy/paste them in your .env file (and uncomment them so that they are properly injected in running containers). Once configured, start available backends using: $ make run- [ BACKEND ] Substitute [BACKEND] by the backend name, e.g. es for Elasticsearch or swift for OpenStack Swift: # Start Elasticsearch local backend $ make run-es # Start Swift local backend $ make run-swift # Start all local backends $ make run-all Now that you have started at least the elasticsearch and swift backends, it\u2019s time to play with them: # Store a JSON file in the Swift backend $ echo '{\"id\": 1, \"foo\": \"bar\"}' | \\ ./bin/ralph push -b swift -f foo.json # Check that we have created a new JSON file in the Swift backend $ bin/ralph list -b swift foo.json # Fetch the content of the JSON file and index it in Elasticsearch $ bin/ralph fetch -b swift foo.json | \\ bin/ralph push -b es # Check that we have properly indexed the JSON file in Elasticsearch $ bin/ralph fetch -b es { \"id\" : 1 , \"foo\" : \"bar\" }","title":"Working with local backends"},{"location":"contribute/#ralphs_tray","text":"Ralph is distributed along with its tray (a deployable package for Kubernetes clusters using Arnold ). If you intend to work on this tray, please refer to Arnold\u2019s documentation.","title":"Ralph's tray"},{"location":"models/","text":"Ralph can be considered versatile since at some point it is log-content-agnostic: most commands will work as expected without transforming logged events content or format. But on the other side, Ralph is a tool dedicated to learning events processing so we\u2019ve implemented key features related to learning events validation and conversion. For now, we mostly focus on two learning events standards: Open edX and xAPI . Data validation and serialisation/de-serialisation are achieved using pydantics models that are documented in the following subsections: Open edX xAPI (work in progress)","title":"Rationale"},{"location":"models/edx/","text":"edX pydantic models base \u00b6 Base event model definitions AbstractBaseEventField pydantic-model \u00b6 Represents the base event field model inherited by all event event fields. The base model does not have any attributes as event field does not have common sub-fields. BaseContextField pydantic-model \u00b6 Represents the base context field model inherited by all event context fields. Attributes: Name Type Description course_user_tags dict of str Content from user_api_usercoursetag table. Retrieved with: dict( UserCourseTag.objects.filter( user=request.user.pk, course_id=course_key ).values_list('key', 'value') ) Note: Is only present when a course page is requested. Is an empty dictionary when the user is not logged in or not found in the user_api_usercoursetag table. user_id int or str or None Consists of the ID of the authenticated user. Retrieved with: request.user.pk querying the auth_user table. Note: Is an integer when the user is found in the auth_user table. Is an empty string when an exception is raised while retrieving the ID. Is None when the user is not logged in. org_id str Consists of the organization name that lists the course. Retrieved with: course_id.org where course_id is an opaque_keys.edx.locator.CourseLocator which is created using the URL of the requested page. Note: Is an empty string when the requested page is not a course page. course_id str Consists of the unique identifier for the visited course page. Retrieved with: course_id.to_deprecated_string() where course_id is an opaque_keys.edx.locator.CourseLocator which is created using the URL of the requested page. Note: Is an empty string when the requested page is not a course page. path Path Consist of the relative URL (without the hostname) of the requested page. Retrieved with: request.META['PATH_INFO'] BaseEvent pydantic-model \u00b6 Represents the base event model all events inherit from. WARNING: it does not define the event , event_type and event_source fields. Attributes: Name Type Description username str Consists of the unique username identifying the logged in user. Retrieved with: request.user.username querying the auth_user table. Note: Is an empty string when the user is not logged in. If an exception is raised when retrieving the username from the table then the value is anonymous . Usernames are made of 2-30 ASCII letters / numbers / underscores (_) / hyphens (-) ip IPv4Address or str Consists of the public IPv4 address of the user. Retrieved with: get_ip(request) cf. https://github.com/un33k/django-ipware/tree/1.1.0 Note: Can be an empty string if the IP address is not found. agent str Consists of the User-Agent HTTP request header. Retrieved with: request.META[HTTP_USER_AGENT] Note: Can be an empty string if the header is not present in the request. Contains information about: Browser name and version Operating system name and version Default language host str Consists of the hostname of the server. Retrieved with: request.META[SERVER_NAME] referer Path Consists of the Referer HTTP request header. Retrieved with: request.META[HTTP_REFERER] Note: Can be an empty string if the header is not present in the request. Contains the referring URL (previous URL visited by the user). accept_language str Consists of the Accept-Language HTTP request header. Retrieved with: request.META[HTTP_ACCEPT_LANGUAGE] Note: Can be an empty string if the header is not present in the request. Contains the default language settings of the user. context BaseContextField see BaseContextField. time datetime Consists of the UTC time in ISO format at which the event was emitted. Retrieved with: datetime.datetime.utcnow() page None Consists of the value None Note: In JSON the value is null instead of None . BaseModelWithConfig pydantic-model \u00b6 Base model defining configuration shared among all models. browser \u00b6 Browser event model definitions BaseBrowserEvent pydantic-model \u00b6 Represents the base browser event model all browser events inherit from. This type of event is triggered on (XHR) POST/GET requests to the /event URL. Attributes: Name Type Description event_source str Consists of the value browser . page Path Consists of the URL (with hostname) of the visited page. Retrieved with: window.location.href from the JavaScript front-end. session str Consists of the md5 encrypted Django session key or an empty string. converters special \u00b6 xapi special \u00b6 edX to xAPI conversion sets base \u00b6 Base xAPI Converter BaseXapiConverter \u00b6 Base xAPI Converter. WARNING: The converter may not include the following edX fields: - context.org_id: When org_id is an empty string. - context.course_id: When course_id is an empty string. WARNING: The converter should not include the following edX fields as they may contain sensitive data: username , referer , event , event_source , ip , agent , accept_language: , context.course_user_tags . __init__ ( self , uuid_namespace , platform_url ) special \u00b6 Initializes BaseXapiConverter. Source code in ralph/models/edx/converters/xapi/base.py def __init__ ( self , uuid_namespace : str , platform_url : str ): \"\"\"Initializes BaseXapiConverter.\"\"\" self . platform_url = platform_url try : self . uuid_namespace = UUID ( uuid_namespace ) except ( TypeError , ValueError , AttributeError ) as err : raise ConfigurationException ( \"Invalid UUID namespace\" ) from err super () . __init__ () parse_course_id ( course_id ) staticmethod \u00b6 Returns a dictionary with course and module of edX event\u2019s context.course_id . Source code in ralph/models/edx/converters/xapi/base.py @staticmethod def parse_course_id ( course_id : str ): \"\"\"Returns a dictionary with `course` and `module` of edX event's `context.course_id`.\"\"\" match = re . match ( r \"^course-v1:.+\\+(.+)\\+(.+)$\" , course_id ) if not match : return { \"course\" : None , \"module\" : None } return { \"course\" : match . group ( 1 ), \"module\" : match . group ( 2 )} navigational \u00b6 Navigational event xAPI Converter UIPageCloseToPageTerminated \u00b6 Converts a common edX page_close event to xAPI. Example Statement: John terminated https://www.fun-mooc.fr/ page. WARNING: The converter does not use the self.platform_url in the object__id . __dest__ pydantic-model \u00b6 Represents a page terminated xAPI statement. Example: John terminated the https://www.fun-mooc.fr/ page. Attributes: Name Type Description object PageObjectField See PageObjectField. verb PageTerminatedVerbField See PageTerminatedVerbField. __src__ pydantic-model \u00b6 Represents the page_close browser event. This type of event is triggered when the user navigates to the next page or closes the browser window (when the JavaScript window.onunload event is called). Attributes: Name Type Description event str Consists of the string value {} . event_type str Consists of the value page_close . name str Consists of the value page_close . server \u00b6 Server event xAPI Converter ServerEventToPageViewed \u00b6 Converts a common edX server event to xAPI. Example Statement: John viewed https://www.fun-mooc.fr/ page. __dest__ pydantic-model \u00b6 Represents a page viewed xAPI statement. Example: John viewed the https://www.fun-mooc.fr/ page. Attributes: Name Type Description object PageObjectField See PageObjectField. verb PageViewedVerbField See PageViewedVerbField. __src__ pydantic-model \u00b6 Represents a common server event. This type of event is triggered from the django middleware on each request excluding: /event , login , heartbeat , /segmentio/event and /performance . Attributes: Name Type Description event_type str Consist of the relative URL (without the hostname) of the requested page. Retrieved with: request.META['PATH_INFO'] event str Consist of a JSON string holding the content of the GET or POST request. Retrieved with: json.dumps({'GET': dict(request.GET), 'POST': dict(request.POST)})[:512] Note: Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019, \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by ******** . The JSON string is truncated at 512 characters resulting in invalid JSON. enrollment \u00b6 Enrollment event model definitions EdxCourseEnrollmentActivated pydantic-model \u00b6 Represents the edx.course.enrollment.activated server event. When a student enrolls in a course, the server emits this event. Attributes: Name Type Description event EnrollmentEventField See EnrollmentEventField. event_type str Consists of the value edx.course.enrollment.activated . name str Consists of the value edx.course.enrollment.activated . EdxCourseEnrollmentDeactivated pydantic-model \u00b6 Represents the edx.course.enrollment.deactivated server event. When a student unenrolls from a course, the server emits this event. Attributes: Name Type Description event EnrollmentEventField See EnrollmentEventField. event_type str Consists of the value edx.course.enrollment.deactivated . name str Consists of the value edx.course.enrollment.deactivated . EdxCourseEnrollmentModeChanged pydantic-model \u00b6 Represents the edx.course.enrollment.mode_changed server event. The server emits this event when the process of changing a student\u2019s student_courseenrollment.mode to a different mode is complete. Attributes: Name Type Description event EnrollmentEventField See EnrollmentEventField. event_type str Consists of the value edx.course.enrollment.mode_changed . name str Consists of the value edx.course.enrollment.mode_changed . EdxCourseEnrollmentUpgradeClickedContextField pydantic-model \u00b6 Represents the context field of the edx.course.enrollment.upgrade_clicked server event. In addition to the common context member fields, this event also includes the mode context member field. Attributes: Name Type Description mode str Consists of either the audit or honor value. It identifies the enrollment mode when the user clicked Challenge Yourself : EdxCourseEnrollmentUpgradeSucceeded pydantic-model \u00b6 Represents the edx.course.enrollment.upgrade.succeeded server event. The server emits this event when the process of upgrading a student\u2019s student_courseenrollment.mode from audit or honor to verified is complete. Attributes: Name Type Description context EdxCourseEnrollmentUpgradeSucceededContextField See EdxCourseEnrollmentUpgradeSucceededContextField. event_type str Consists of the value edx.course.enrollment.upgrade.succeeded . name str Consists of the value edx.course.enrollment.upgrade.succeeded . EdxCourseEnrollmentUpgradeSucceededContextField pydantic-model \u00b6 Represents the context field of the edx.course.enrollment.upgrade.succeeded server event. In addition to the common context member fields, this event also includes the mode context member field. Attributes: Name Type Description mode str Consists of the verified value. EnrollmentEventField pydantic-model \u00b6 Represents the event field for enrollment events. Note: Only server enrollment events require an event field. Attributes: Name Type Description course_id str Consists in the course in which the student was enrolled or unenrolled. mode str Takes either audit , honor , professional or verified value. It identifies the student\u2019s enrollment mode. user_id int Identifies the student who was enrolled or unenrolled. UIEdxCourseEnrollmentUpgradeClicked pydantic-model \u00b6 Represents the edx.course.enrollment.upgrade_clicked browser event. The browser emits this event when a student clicks ChallengeYourself option, and the process of upgrading the student_courseenrollment.mode for the student to verified begins. Attributes: Name Type Description context EdxCourseEnrollmentUpgradeClickedContextField See EdxCourseEnrollmentUpgradeClickedContextField. event_type str Consists of the value edx.course.enrollment.upgrade_clicked . name str Consists of the value edx.course.enrollment.upgrade_clicked . navigational \u00b6 Navigational event model definitions NavigationalEventField pydantic-model \u00b6 Represents the event field of navigational events. Note: All navigational events are browser events. Attributes: Name Type Description id str Consists of the edX ID of the sequence. old int For seq_goto , it consists of the index of the unit being jumped to. For seq_next and seq_prev , it consists of the index of the unit being navigated to. new int For seq_goto , it consists of the index of the unit being jumped from. For seq_next and seq_prev , it consists of the index of the unit being navigated away from. UIPageClose pydantic-model \u00b6 Represents the page_close browser event. This type of event is triggered when the user navigates to the next page or closes the browser window (when the JavaScript window.onunload event is called). Attributes: Name Type Description event str Consists of the string value {} . event_type str Consists of the value page_close . name str Consists of the value page_close . UISeqGoto pydantic-model \u00b6 Represents the seq_goto browser event. The browser emits such event when a user selects a navigational control. seq_goto is emitted when a user jumps between units in a sequence. Attributes: Name Type Description event obj Consists of member fields that identify specifics triggered event. event_type str Consists of the value seq_goto . name str Consists of the value seq_goto . UISeqNext pydantic-model \u00b6 Represents the seq_next browser event. The browser emits such event when a user selects a navigational control. seq_next is emitted when a user navigates to the next unit in a sequence. Attributes: Name Type Description event obj Consists of member fields that identify specifics triggered event. event_type str Consists of the value seq_next . name str Consists of the value seq_next . validate_next_jump_event_field ( value ) classmethod \u00b6 Checks that event.new is equal to event.old + 1. Source code in ralph/models/edx/navigational.py @validator ( \"event\" ) def validate_next_jump_event_field ( cls , value ): # pylint: disable=no-self-argument, no-self-use \"\"\"Checks that event.new is equal to event.old + 1.\"\"\" if value . new != value . old + 1 : raise ValueError ( \"event.new - event.old should be equal to 1\" ) return value UISeqPrev pydantic-model \u00b6 Represents the seq_prev browser event. The browser emits such event when a user selects a navigational control. seq_prev is emitted when a user navigates to the previous unit in a sequence. Attributes: Name Type Description event obj Consists of member fields that identify specifics triggered event. event_type str Consists of the value seq_prev . name str Consists of the value seq_prev . validate_prev_jump_event_field ( value ) classmethod \u00b6 Checks that event.new is equal to event.old - 1. Source code in ralph/models/edx/navigational.py @validator ( \"event\" ) def validate_prev_jump_event_field ( cls , value ): # pylint: disable=no-self-argument, no-self-use \"\"\"Checks that event.new is equal to event.old - 1.\"\"\" if value . new != value . old - 1 : raise ValueError ( \"event.old - event.new should be equal to 1\" ) return value server \u00b6 Server event model definitions BaseServerEvent pydantic-model \u00b6 Represents the base server event model all server events inherit from. ServerEvent pydantic-model \u00b6 Represents a common server event. This type of event is triggered from the django middleware on each request excluding: /event , login , heartbeat , /segmentio/event and /performance . Attributes: Name Type Description event_type str Consist of the relative URL (without the hostname) of the requested page. Retrieved with: request.META['PATH_INFO'] event str Consist of a JSON string holding the content of the GET or POST request. Retrieved with: json.dumps({'GET': dict(request.GET), 'POST': dict(request.POST)})[:512] Note: Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019, \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by ******** . The JSON string is truncated at 512 characters resulting in invalid JSON. ServerEventField pydantic-model \u00b6 Represents the event field of the ServerEventModel","title":"Open edX events"},{"location":"models/edx/#ralph.models.edx.base","text":"Base event model definitions","title":"base"},{"location":"models/edx/#ralph.models.edx.base.AbstractBaseEventField","text":"Represents the base event field model inherited by all event event fields. The base model does not have any attributes as event field does not have common sub-fields.","title":"AbstractBaseEventField"},{"location":"models/edx/#ralph.models.edx.base.BaseContextField","text":"Represents the base context field model inherited by all event context fields. Attributes: Name Type Description course_user_tags dict of str Content from user_api_usercoursetag table. Retrieved with: dict( UserCourseTag.objects.filter( user=request.user.pk, course_id=course_key ).values_list('key', 'value') ) Note: Is only present when a course page is requested. Is an empty dictionary when the user is not logged in or not found in the user_api_usercoursetag table. user_id int or str or None Consists of the ID of the authenticated user. Retrieved with: request.user.pk querying the auth_user table. Note: Is an integer when the user is found in the auth_user table. Is an empty string when an exception is raised while retrieving the ID. Is None when the user is not logged in. org_id str Consists of the organization name that lists the course. Retrieved with: course_id.org where course_id is an opaque_keys.edx.locator.CourseLocator which is created using the URL of the requested page. Note: Is an empty string when the requested page is not a course page. course_id str Consists of the unique identifier for the visited course page. Retrieved with: course_id.to_deprecated_string() where course_id is an opaque_keys.edx.locator.CourseLocator which is created using the URL of the requested page. Note: Is an empty string when the requested page is not a course page. path Path Consist of the relative URL (without the hostname) of the requested page. Retrieved with: request.META['PATH_INFO']","title":"BaseContextField"},{"location":"models/edx/#ralph.models.edx.base.BaseEvent","text":"Represents the base event model all events inherit from. WARNING: it does not define the event , event_type and event_source fields. Attributes: Name Type Description username str Consists of the unique username identifying the logged in user. Retrieved with: request.user.username querying the auth_user table. Note: Is an empty string when the user is not logged in. If an exception is raised when retrieving the username from the table then the value is anonymous . Usernames are made of 2-30 ASCII letters / numbers / underscores (_) / hyphens (-) ip IPv4Address or str Consists of the public IPv4 address of the user. Retrieved with: get_ip(request) cf. https://github.com/un33k/django-ipware/tree/1.1.0 Note: Can be an empty string if the IP address is not found. agent str Consists of the User-Agent HTTP request header. Retrieved with: request.META[HTTP_USER_AGENT] Note: Can be an empty string if the header is not present in the request. Contains information about: Browser name and version Operating system name and version Default language host str Consists of the hostname of the server. Retrieved with: request.META[SERVER_NAME] referer Path Consists of the Referer HTTP request header. Retrieved with: request.META[HTTP_REFERER] Note: Can be an empty string if the header is not present in the request. Contains the referring URL (previous URL visited by the user). accept_language str Consists of the Accept-Language HTTP request header. Retrieved with: request.META[HTTP_ACCEPT_LANGUAGE] Note: Can be an empty string if the header is not present in the request. Contains the default language settings of the user. context BaseContextField see BaseContextField. time datetime Consists of the UTC time in ISO format at which the event was emitted. Retrieved with: datetime.datetime.utcnow() page None Consists of the value None Note: In JSON the value is null instead of None .","title":"BaseEvent"},{"location":"models/edx/#ralph.models.edx.base.BaseModelWithConfig","text":"Base model defining configuration shared among all models.","title":"BaseModelWithConfig"},{"location":"models/edx/#ralph.models.edx.browser","text":"Browser event model definitions","title":"browser"},{"location":"models/edx/#ralph.models.edx.browser.BaseBrowserEvent","text":"Represents the base browser event model all browser events inherit from. This type of event is triggered on (XHR) POST/GET requests to the /event URL. Attributes: Name Type Description event_source str Consists of the value browser . page Path Consists of the URL (with hostname) of the visited page. Retrieved with: window.location.href from the JavaScript front-end. session str Consists of the md5 encrypted Django session key or an empty string.","title":"BaseBrowserEvent"},{"location":"models/edx/#ralph.models.edx.converters","text":"","title":"converters"},{"location":"models/edx/#ralph.models.edx.converters.xapi","text":"edX to xAPI conversion sets","title":"xapi"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base","text":"Base xAPI Converter","title":"base"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter","text":"Base xAPI Converter. WARNING: The converter may not include the following edX fields: - context.org_id: When org_id is an empty string. - context.course_id: When course_id is an empty string. WARNING: The converter should not include the following edX fields as they may contain sensitive data: username , referer , event , event_source , ip , agent , accept_language: , context.course_user_tags .","title":"BaseXapiConverter"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter.__init__","text":"Initializes BaseXapiConverter. Source code in ralph/models/edx/converters/xapi/base.py def __init__ ( self , uuid_namespace : str , platform_url : str ): \"\"\"Initializes BaseXapiConverter.\"\"\" self . platform_url = platform_url try : self . uuid_namespace = UUID ( uuid_namespace ) except ( TypeError , ValueError , AttributeError ) as err : raise ConfigurationException ( \"Invalid UUID namespace\" ) from err super () . __init__ ()","title":"__init__()"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter.parse_course_id","text":"Returns a dictionary with course and module of edX event\u2019s context.course_id . Source code in ralph/models/edx/converters/xapi/base.py @staticmethod def parse_course_id ( course_id : str ): \"\"\"Returns a dictionary with `course` and `module` of edX event's `context.course_id`.\"\"\" match = re . match ( r \"^course-v1:.+\\+(.+)\\+(.+)$\" , course_id ) if not match : return { \"course\" : None , \"module\" : None } return { \"course\" : match . group ( 1 ), \"module\" : match . group ( 2 )}","title":"parse_course_id()"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational","text":"Navigational event xAPI Converter","title":"navigational"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated","text":"Converts a common edX page_close event to xAPI. Example Statement: John terminated https://www.fun-mooc.fr/ page. WARNING: The converter does not use the self.platform_url in the object__id .","title":"UIPageCloseToPageTerminated"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated.__dest__","text":"Represents a page terminated xAPI statement. Example: John terminated the https://www.fun-mooc.fr/ page. Attributes: Name Type Description object PageObjectField See PageObjectField. verb PageTerminatedVerbField See PageTerminatedVerbField.","title":"__dest__"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated.__src__","text":"Represents the page_close browser event. This type of event is triggered when the user navigates to the next page or closes the browser window (when the JavaScript window.onunload event is called). Attributes: Name Type Description event str Consists of the string value {} . event_type str Consists of the value page_close . name str Consists of the value page_close .","title":"__src__"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server","text":"Server event xAPI Converter","title":"server"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed","text":"Converts a common edX server event to xAPI. Example Statement: John viewed https://www.fun-mooc.fr/ page.","title":"ServerEventToPageViewed"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed.__dest__","text":"Represents a page viewed xAPI statement. Example: John viewed the https://www.fun-mooc.fr/ page. Attributes: Name Type Description object PageObjectField See PageObjectField. verb PageViewedVerbField See PageViewedVerbField.","title":"__dest__"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed.__src__","text":"Represents a common server event. This type of event is triggered from the django middleware on each request excluding: /event , login , heartbeat , /segmentio/event and /performance . Attributes: Name Type Description event_type str Consist of the relative URL (without the hostname) of the requested page. Retrieved with: request.META['PATH_INFO'] event str Consist of a JSON string holding the content of the GET or POST request. Retrieved with: json.dumps({'GET': dict(request.GET), 'POST': dict(request.POST)})[:512] Note: Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019, \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by ******** . The JSON string is truncated at 512 characters resulting in invalid JSON.","title":"__src__"},{"location":"models/edx/#ralph.models.edx.enrollment","text":"Enrollment event model definitions","title":"enrollment"},{"location":"models/edx/#ralph.models.edx.enrollment.EdxCourseEnrollmentActivated","text":"Represents the edx.course.enrollment.activated server event. When a student enrolls in a course, the server emits this event. Attributes: Name Type Description event EnrollmentEventField See EnrollmentEventField. event_type str Consists of the value edx.course.enrollment.activated . name str Consists of the value edx.course.enrollment.activated .","title":"EdxCourseEnrollmentActivated"},{"location":"models/edx/#ralph.models.edx.enrollment.EdxCourseEnrollmentDeactivated","text":"Represents the edx.course.enrollment.deactivated server event. When a student unenrolls from a course, the server emits this event. Attributes: Name Type Description event EnrollmentEventField See EnrollmentEventField. event_type str Consists of the value edx.course.enrollment.deactivated . name str Consists of the value edx.course.enrollment.deactivated .","title":"EdxCourseEnrollmentDeactivated"},{"location":"models/edx/#ralph.models.edx.enrollment.EdxCourseEnrollmentModeChanged","text":"Represents the edx.course.enrollment.mode_changed server event. The server emits this event when the process of changing a student\u2019s student_courseenrollment.mode to a different mode is complete. Attributes: Name Type Description event EnrollmentEventField See EnrollmentEventField. event_type str Consists of the value edx.course.enrollment.mode_changed . name str Consists of the value edx.course.enrollment.mode_changed .","title":"EdxCourseEnrollmentModeChanged"},{"location":"models/edx/#ralph.models.edx.enrollment.EdxCourseEnrollmentUpgradeClickedContextField","text":"Represents the context field of the edx.course.enrollment.upgrade_clicked server event. In addition to the common context member fields, this event also includes the mode context member field. Attributes: Name Type Description mode str Consists of either the audit or honor value. It identifies the enrollment mode when the user clicked Challenge Yourself :","title":"EdxCourseEnrollmentUpgradeClickedContextField"},{"location":"models/edx/#ralph.models.edx.enrollment.EdxCourseEnrollmentUpgradeSucceeded","text":"Represents the edx.course.enrollment.upgrade.succeeded server event. The server emits this event when the process of upgrading a student\u2019s student_courseenrollment.mode from audit or honor to verified is complete. Attributes: Name Type Description context EdxCourseEnrollmentUpgradeSucceededContextField See EdxCourseEnrollmentUpgradeSucceededContextField. event_type str Consists of the value edx.course.enrollment.upgrade.succeeded . name str Consists of the value edx.course.enrollment.upgrade.succeeded .","title":"EdxCourseEnrollmentUpgradeSucceeded"},{"location":"models/edx/#ralph.models.edx.enrollment.EdxCourseEnrollmentUpgradeSucceededContextField","text":"Represents the context field of the edx.course.enrollment.upgrade.succeeded server event. In addition to the common context member fields, this event also includes the mode context member field. Attributes: Name Type Description mode str Consists of the verified value.","title":"EdxCourseEnrollmentUpgradeSucceededContextField"},{"location":"models/edx/#ralph.models.edx.enrollment.EnrollmentEventField","text":"Represents the event field for enrollment events. Note: Only server enrollment events require an event field. Attributes: Name Type Description course_id str Consists in the course in which the student was enrolled or unenrolled. mode str Takes either audit , honor , professional or verified value. It identifies the student\u2019s enrollment mode. user_id int Identifies the student who was enrolled or unenrolled.","title":"EnrollmentEventField"},{"location":"models/edx/#ralph.models.edx.enrollment.UIEdxCourseEnrollmentUpgradeClicked","text":"Represents the edx.course.enrollment.upgrade_clicked browser event. The browser emits this event when a student clicks ChallengeYourself option, and the process of upgrading the student_courseenrollment.mode for the student to verified begins. Attributes: Name Type Description context EdxCourseEnrollmentUpgradeClickedContextField See EdxCourseEnrollmentUpgradeClickedContextField. event_type str Consists of the value edx.course.enrollment.upgrade_clicked . name str Consists of the value edx.course.enrollment.upgrade_clicked .","title":"UIEdxCourseEnrollmentUpgradeClicked"},{"location":"models/edx/#ralph.models.edx.navigational","text":"Navigational event model definitions","title":"navigational"},{"location":"models/edx/#ralph.models.edx.navigational.NavigationalEventField","text":"Represents the event field of navigational events. Note: All navigational events are browser events. Attributes: Name Type Description id str Consists of the edX ID of the sequence. old int For seq_goto , it consists of the index of the unit being jumped to. For seq_next and seq_prev , it consists of the index of the unit being navigated to. new int For seq_goto , it consists of the index of the unit being jumped from. For seq_next and seq_prev , it consists of the index of the unit being navigated away from.","title":"NavigationalEventField"},{"location":"models/edx/#ralph.models.edx.navigational.UIPageClose","text":"Represents the page_close browser event. This type of event is triggered when the user navigates to the next page or closes the browser window (when the JavaScript window.onunload event is called). Attributes: Name Type Description event str Consists of the string value {} . event_type str Consists of the value page_close . name str Consists of the value page_close .","title":"UIPageClose"},{"location":"models/edx/#ralph.models.edx.navigational.UISeqGoto","text":"Represents the seq_goto browser event. The browser emits such event when a user selects a navigational control. seq_goto is emitted when a user jumps between units in a sequence. Attributes: Name Type Description event obj Consists of member fields that identify specifics triggered event. event_type str Consists of the value seq_goto . name str Consists of the value seq_goto .","title":"UISeqGoto"},{"location":"models/edx/#ralph.models.edx.navigational.UISeqNext","text":"Represents the seq_next browser event. The browser emits such event when a user selects a navigational control. seq_next is emitted when a user navigates to the next unit in a sequence. Attributes: Name Type Description event obj Consists of member fields that identify specifics triggered event. event_type str Consists of the value seq_next . name str Consists of the value seq_next .","title":"UISeqNext"},{"location":"models/edx/#ralph.models.edx.navigational.UISeqNext.validate_next_jump_event_field","text":"Checks that event.new is equal to event.old + 1. Source code in ralph/models/edx/navigational.py @validator ( \"event\" ) def validate_next_jump_event_field ( cls , value ): # pylint: disable=no-self-argument, no-self-use \"\"\"Checks that event.new is equal to event.old + 1.\"\"\" if value . new != value . old + 1 : raise ValueError ( \"event.new - event.old should be equal to 1\" ) return value","title":"validate_next_jump_event_field()"},{"location":"models/edx/#ralph.models.edx.navigational.UISeqPrev","text":"Represents the seq_prev browser event. The browser emits such event when a user selects a navigational control. seq_prev is emitted when a user navigates to the previous unit in a sequence. Attributes: Name Type Description event obj Consists of member fields that identify specifics triggered event. event_type str Consists of the value seq_prev . name str Consists of the value seq_prev .","title":"UISeqPrev"},{"location":"models/edx/#ralph.models.edx.navigational.UISeqPrev.validate_prev_jump_event_field","text":"Checks that event.new is equal to event.old - 1. Source code in ralph/models/edx/navigational.py @validator ( \"event\" ) def validate_prev_jump_event_field ( cls , value ): # pylint: disable=no-self-argument, no-self-use \"\"\"Checks that event.new is equal to event.old - 1.\"\"\" if value . new != value . old - 1 : raise ValueError ( \"event.old - event.new should be equal to 1\" ) return value","title":"validate_prev_jump_event_field()"},{"location":"models/edx/#ralph.models.edx.server","text":"Server event model definitions","title":"server"},{"location":"models/edx/#ralph.models.edx.server.BaseServerEvent","text":"Represents the base server event model all server events inherit from.","title":"BaseServerEvent"},{"location":"models/edx/#ralph.models.edx.server.ServerEvent","text":"Represents a common server event. This type of event is triggered from the django middleware on each request excluding: /event , login , heartbeat , /segmentio/event and /performance . Attributes: Name Type Description event_type str Consist of the relative URL (without the hostname) of the requested page. Retrieved with: request.META['PATH_INFO'] event str Consist of a JSON string holding the content of the GET or POST request. Retrieved with: json.dumps({'GET': dict(request.GET), 'POST': dict(request.POST)})[:512] Note: Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019, \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by ******** . The JSON string is truncated at 512 characters resulting in invalid JSON.","title":"ServerEvent"},{"location":"models/edx/#ralph.models.edx.server.ServerEventField","text":"Represents the event field of the ServerEventModel","title":"ServerEventField"}]}